use crate::params::*;
use crate::ring::*;

pub struct KeyGenDebugValues<PARAMS: MlKemParams> where 
    [(); 384 * PARAMS::K + 32]: ,
    [(); 768 * PARAMS::K + 96]: 

{
    pub z: [u8; 32],
    pub d: [u8; 32],
    pub rho: [u8; 32],
    pub sigma: [u8; 32],
    pub ek: [u8; 384 * PARAMS::K + 32],
    pub dk: [u8; 768 * PARAMS::K + 96]
}

pub struct EncapsDebugValues<PARAMS: MlKemParams> where 
    [(); 384 * PARAMS::K + 32]: ,
    [(); 768 * PARAMS::K + 96]: ,
    [(); 32 * (PARAMS::D_U * PARAMS::K + PARAMS::D_V)]: ,
{
    pub ek: [u8; 384 * PARAMS::K + 32],
    pub m: [u8; 32],
    pub key: [u8; 32],
    pub r: [u8; 32],
    pub c: [u8; 32 * (PARAMS::D_U * PARAMS::K + PARAMS::D_V)]
}

pub trait DebugValues<PARAMS: MlKemParams> where
    [(); 384 * PARAMS::K + 32]: ,
    [(); 768 * PARAMS::K + 96]: ,
    [(); 32 * (PARAMS::D_U * PARAMS::K + PARAMS::D_V)]: ,
{
    const KEYGEN_DEBUG: KeyGenDebugValues<PARAMS>;
    const ENCAPS_DEBUG: EncapsDebugValues<PARAMS>;
}

impl DebugValues<MlKem1024> for MlKem1024 {
    const KEYGEN_DEBUG: KeyGenDebugValues<MlKem1024> = KeyGenDebugValues::<MlKem1024> {
        z: [0x7A,0xF6,0x50,0x22,0xE0,0xA4,0x72,0xED,0x63,0x88,0x63,0x8E,0xA2,0x9D,0x82,0xDA,0x68,0xB4,0xCF,0x9F,0xFD,0xF2,0xB6,0x7C,0xD7,0x08,0xEA,0x5A,0x37,0x0C,0x6A,0x7C],
        d: [0x7A,0xF6,0x50,0x22,0xE0,0xA4,0x72,0xED,0x63,0x88,0x63,0x8E,0xA2,0x9D,0x82,0xDA,0x68,0xB4,0xCF,0x9F,0xFD,0xF2,0xB6,0x7C,0xD7,0x08,0xEA,0x5A,0x37,0x0C,0x6A,0x7C],
        rho: [0x30,0x05,0x23,0x37,0xAC,0xA7,0xC8,0x52,0x1A,0xB4,0x4F,0x1E,0x2A,0x04,0x9B,0x83,0xE0,0x77,0x4C,0x96,0xCD,0x8C,0x87,0x6F,0xA6,0x75,0xD0,0x92,0x39,0x77,0x27,0x1B],
        sigma: [0x88,0x98,0x27,0xB5,0xC3,0xF8,0xC2,0x03,0xA4,0x89,0x74,0xEC,0xF1,0xCA,0xD9,0xCB,0x2B,0xFE,0x5F,0x87,0xEB,0xA2,0x6F,0x58,0x5B,0xBF,0x02,0xAC,0x89,0x17,0x6D,0x2A],
        ek: [0x70,0xE1,0x3F,0x30,0x15,0x17,0xB5,0xA4,0x0D,0x70,0x36,0x1F,0x63,0x09,0x41,0x60,0x67,0x64,0x6D,0x2B,0x71,0x36,0x62,0x6B,0xCC,0xCC,0x17,0x0C,0x66,0xCE,0xD4,0x90,0xC7,0x35,0x34,0x4B,0x62,0x77,0x09,0x7C,0xA9,0x14,0x21,0x2A,0x29,0x2D,0xD1,0x22,0xFB,0xB6,0x9F,0xDE,0xCA,0x47,0xFA,0xB4,0x53,0x2B,0x8C,0x80,0xCE,0xB7,0x7F,0x9C,0x54,0x3E,0x0B,0xF1,0x53,0x6D,0x1C,0x0C,0xAE,0x07,0x7E,0x2C,0xA7,0x86,0x2B,0x45,0xA4,0x10,0x46,0x9C,0xC5,0xB7,0x06,0xBA,0xE0,0x05,0x1C,0xB2,0x96,0x1D,0xB7,0x27,0x0B,0x75,0xB7,0x11,0x69,0x8D,0x2B,0x80,0x70,0x40,0xD5,0x62,0x81,0x29,0x43,0x6F,0xBB,0x58,0xF1,0x20,0x3F,0x75,0x56,0x14,0x65,0xF5,0x42,0x57,0xE4,0x4D,0x33,0xF5,0x12,0xD6,0x33,0x43,0x1D,0x00,0xA2,0xFB,0x02,0x30,0xC9,0xBB,0x9C,0xDD,0xFC,0x83,0xBD,0x65,0xC9,0x74,0x45,0x30,0x21,0x86,0xA1,0x72,0x23,0xAD,0x21,0x33,0x28,0x03,0xB9,0x09,0xE5,0xE5,0x67,0x19,0x70,0xBB,0xB0,0xF1,0xC4,0x83,0x7B,0xB8,0x42,0x73,0xBA,0x67,0x5A,0xC0,0x74,0xC5,0x29,0x0B,0x41,0x1C,0x25,0x00,0x65,0x70,0x59,0x33,0x9D,0xE3,0x92,0xF9,0xCA,0x30,0x89,0x52,0xA2,0x20,0x1A,0x58,0x87,0x67,0xAD,0xC0,0x35,0xBD,0xF3,0x30,0x24,0xEA,0x3B,0x9A,0x83,0xC5,0xA0,0xB9,0xC5,0x42,0x5D,0x14,0x07,0x0C,0x81,0xAA,0xDA,0x26,0xBA,0xC3,0xFB,0xB8,0xD4,0xB7,0xCF,0xEE,0x03,0x92,0x37,0x5C,0x68,0x42,0x73,0x51,0xDF,0xEC,0x63,0x60,0x9B,0xBB,0x50,0xB4,0x63,0xE0,0x40,0x92,0x85,0x70,0x09,0xD1,0xE5,0xB8,0x1D,0x70,0x7D,0x14,0xB8,0x33,0xCD,0x4A,0x0B,0x55,0x1B,0xAA,0x13,0xEC,0x48,0x8A,0x15,0x03,0xB0,0x46,0x7E,0xE4,0x02,0x3C,0x3F,0xE0,0x32,0xC7,0x82,0x25,0x06,0x38,0x86,0xE2,0x46,0x8E,0x00,0xF7,0x00,0x07,0x2A,0x2E,0xC8,0xDA,0x6A,0xFB,0x20,0x6C,0x91,0x90,0x44,0x33,0xBB,0xCC,0xB0,0xE7,0x6F,0x42,0x46,0x8C,0x40,0xEB,0x5F,0x59,0xCB,0x9A,0xE1,0xB0,0x35,0xE5,0x21,0x51,0x0B,0xF2,0x16,0xA1,0xAB,0xCB,0x19,0x03,0x3B,0x7A,0x65,0x88,0x97,0xC6,0x58,0x74,0xD5,0x13,0x51,0x83,0x14,0x9F,0x97,0x9E,0x55,0x3C,0xCF,0xBF,0xA3,0x90,0x0C,0xDA,0x6F,0x01,0x96,0x0B,0x75,0x15,0x7F,0x54,0x53,0xAA,0x6E,0x73,0xB3,0xED,0x90,0x2F,0x7D,0x7C,0x93,0x05,0x97,0x1B,0xDF,0x72,0x2E,0x29,0x37,0x16,0x9A,0x1B,0xC0,0xFA,0xEB,0x6C,0x92,0xF7,0x15,0x0D,0x23,0x30,0x87,0x7C,0x5D,0xC5,0x24,0x9A,0xAE,0x20,0x30,0x26,0x34,0xC5,0xC5,0xB2,0x30,0x53,0x52,0x10,0x28,0x12,0x25,0x42,0xF4,0x85,0xA0,0xEA,0xC8,0x69,0x22,0x37,0x20,0x63,0x36,0x51,0xF5,0xB2,0x47,0xC6,0x62,0xB3,0x1A,0x10,0x53,0x8C,0xA7,0x49,0x1B,0x14,0x37,0xAA,0x74,0xF4,0x28,0x2D,0x12,0x97,0x4D,0x9C,0x93,0x4D,0xF2,0x14,0x78,0x5B,0x64,0x18,0x46,0x8B,0x92,0xE5,0x25,0x28,0xC8,0x44,0x7A,0x1C,0xA4,0x22,0xFA,0x6C,0xC8,0x8E,0x28,0xB0,0x59,0xF0,0x4B,0x23,0x59,0x73,0x23,0xF7,0x2F,0x3E,0x23,0x36,0xF8,0x7C,0x47,0x90,0x5C,0xBA,0x65,0x5B,0xB7,0x3F,0xC3,0x2E,0x18,0xD4,0xB7,0x87,0x05,0xC7,0x82,0xEB,0xCB,0x43,0xE2,0x78,0x5C,0x82,0xC5,0xAF,0x24,0xB0,0xE1,0x69,0x9C,0xFB,0xC0,0x25,0x74,0x75,0x79,0x9A,0x53,0x9B,0x11,0xA5,0x0F,0x4D,0xF2,0xB7,0xFA,0xA2,0x0B,0xD8,0x82,0x75,0x15,0xCA,0x37,0x0F,0x89,0xC0,0xD4,0xC6,0x09,0x02,0xF6,0x56,0x7C,0xD6,0x0B,0x08,0x60,0xA5,0x5B,0xC8,0x57,0x2C,0x43,0x6C,0x24,0x6A,0xC2,0x76,0x64,0x4E,0x7D,0x60,0x2A,0xA5,0x7C,0x01,0x66,0x20,0x18,0x14,0x99,0x1C,0x1B,0xD7,0x5C,0x7C,0x47,0xC3,0x48,0xB6,0x7D,0x77,0x61,0x33,0x86,0x90,0x81,0x44,0xEA,0x83,0xFF,0x72,0x1F,0x9A,0x50,0x07,0x6C,0x51,0x01,0x64,0xD1,0x8E,0x05,0xD0,0x5D,0x98,0x84,0xC4,0x41,0x46,0xA0,0x7C,0xCA,0xCF,0x89,0x04,0x98,0xED,0x1A,0x19,0xB2,0xA1,0x54,0x31,0x72,0x9D,0xC1,0xF1,0x2B,0x7E,0xA1,0x0F,0x9F,0x92,0x80,0x62,0xD1,0x45,0x4B,0x4B,0x9F,0x68,0xE5,0x99,0x90,0x29,0x0B,0xE3,0x72,0x8B,0x32,0x89,0x56,0x93,0x63,0xAB,0x10,0x05,0x13,0x1B,0x23,0x81,0xA0,0x8C,0xC2,0xBF,0x94,0x3E,0x95,0xD5,0xB2,0x1B,0xC6,0xAA,0xBC,0x22,0x73,0x34,0x8B,0xC7,0x2B,0xD0,0x93,0xB7,0xB5,0x61,0x7A,0xE8,0x7F,0x60,0x2B,0xB9,0x89,0xE6,0xAF,0xC4,0x4B,0x81,0x51,0x20,0x76,0xA3,0xA8,0x76,0xE0,0xE2,0x5F,0x97,0x62,0xB4,0x62,0x08,0x19,0x85,0x50,0x2F,0x26,0xB2,0x87,0xA2,0x93,0x6D,0x5B,0x1A,0xCF,0xFC,0xEC,0x4E,0xEE,0x77,0xA9,0xCB,0xA9,0x80,0xEB,0x9B,0x5F,0xDE,0x75,0x53,0x9F,0x65,0x09,0x04,0x67,0x7D,0xBE,0x29,0xAB,0x8B,0xB9,0x18,0xA3,0x49,0x48,0x03,0xEC,0xA5,0x9A,0x2C,0x32,0xE5,0xB5,0xC8,0x3B,0x0B,0x80,0xB1,0x10,0x2C,0xD7,0xD9,0x48,0x2B,0x45,0x9B,0x6B,0x74,0x49,0x1E,0xC3,0x0C,0x4B,0xE7,0x7C,0x2B,0x52,0x4A,0xF7,0xB3,0xAD,0x1F,0x71,0x34,0x1D,0xF0,0xA7,0x6F,0x25,0x5C,0x29,0x03,0xC8,0x82,0x08,0x07,0x93,0x79,0x93,0x0A,0x95,0x13,0xF3,0x90,0x12,0x6E,0x73,0x2A,0x2B,0xB0,0x94,0xBF,0xA6,0xBF,0x0A,0x43,0x2B,0xCD,0x65,0x7D,0xAF,0xCB,0x25,0xC8,0xBB,0x15,0xE0,0x95,0x5D,0x09,0x9B,0x74,0xFF,0x1A,0x4D,0xE6,0x55,0x9C,0xD6,0x79,0x7C,0x38,0xC4,0x8C,0x11,0x34,0xCA,0x2C,0x97,0x92,0x43,0xF3,0x15,0x2A,0xF4,0xBB,0xE4,0xD7,0xA6,0xBC,0x09,0x87,0x21,0x33,0x92,0x0C,0xD2,0x3B,0x3E,0xF9,0x84,0x8C,0xCC,0x68,0x45,0xD6,0x47,0xB5,0x38,0x75,0x57,0x73,0x65,0x13,0xD5,0x85,0x60,0x84,0x51,0x92,0xF9,0x26,0x51,0x59,0x93,0x2E,0x57,0x2A,0x88,0xC4,0x4E,0x65,0x66,0x76,0x0C,0x06,0x1C,0x67,0xFC,0xB5,0xBF,0x21,0x00,0x95,0xE2,0x14,0xDA,0x74,0x53,0x57,0xE3,0x69,0x96,0xD8,0xC0,0x66,0x31,0x1B,0xBC,0x76,0x1A,0x1F,0xD2,0x52,0x73,0xD2,0x1E,0xAB,0x50,0x01,0x05,0x63,0xCD,0x64,0x68,0xA4,0xEA,0x83,0x6B,0x6D,0x64,0xBD,0x2B,0xD7,0x6D,0xBE,0x35,0x82,0xD5,0x73,0x6A,0x60,0x5A,0x55,0x09,0xFC,0x28,0x78,0x9B,0x56,0xB8,0x84,0xAE,0x9A,0x60,0x41,0x5F,0x55,0x67,0x4B,0xE6,0x01,0x57,0x6C,0x7C,0xEE,0x58,0x14,0x3B,0xF0,0x54,0x80,0x6A,0xBC,0xB3,0x45,0xA2,0x56,0xCB,0xC4,0x54,0xE3,0x43,0xF3,0xCC,0x7A,0xDE,0x65,0x56,0x2F,0xD2,0x9E,0xB2,0x59,0x73,0x7B,0xB3,0xCF,0x96,0x49,0xBD,0xEA,0x28,0x3F,0xB0,0x72,0x65,0x67,0x7C,0x98,0x08,0xD1,0x31,0x19,0xC0,0xA2,0xAD,0xF7,0x45,0xDE,0x69,0x75,0xF4,0x56,0x2C,0xD6,0x15,0x57,0xB3,0x96,0x5D,0x2B,0x07,0x2F,0x00,0x0A,0xA7,0xE0,0xA3,0x57,0xE1,0x25,0x3E,0xAF,0xEA,0x7F,0xDF,0xCC,0x92,0xFA,0x87,0x63,0x0D,0xD2,0x27,0x6C,0xE4,0x2E,0x82,0x0B,0x69,0xD1,0xFC,0x2E,0x47,0xD5,0xC4,0x98,0xA5,0x5B,0x3B,0x29,0xC3,0x4E,0x64,0x90,0x3D,0x04,0x7A,0xB1,0xC0,0x40,0x24,0x95,0x8F,0x70,0x11,0x95,0xF5,0xD1,0x3E,0xC6,0x70,0x6B,0x84,0x48,0x50,0x3A,0x54,0x99,0x22,0xA5,0x8A,0x24,0xB6,0x7C,0x93,0x63,0x27,0x56,0xB7,0x7D,0x22,0x54,0x07,0x31,0x61,0x71,0xDE,0xEC,0x56,0x71,0x44,0x35,0xCF,0x94,0xCC,0xF4,0x59,0x9E,0x00,0xD1,0x0E,0x56,0x96,0x22,0xBA,0xDA,0x82,0x0C,0x45,0x2F,0x25,0x42,0xAD,0xF0,0x87,0x65,0xCA,0x93,0xAE,0x38,0xEB,0x02,0x5D,0xE3,0x1C,0xFF,0x79,0x74,0x54,0x9A,0x78,0x25,0xA8,0x31,0xDD,0x05,0x4E,0x87,0xB8,0x4C,0x5F,0x25,0x47,0xFF,0x47,0xB4,0x6F,0x88,0xC9,0x9F,0x15,0x48,0xE9,0x33,0xA6,0xF4,0xD8,0x7F,0x1A,0x4A,0x1B,0x00,0xE3,0x9E,0x02,0xD6,0x0E,0x51,0xEB,0x60,0x3C,0x1C,0x0D,0x80,0x7A,0xCD,0xAB,0x08,0xBA,0xA2,0xB9,0x98,0x69,0xB7,0x5C,0xA2,0xC4,0xB9,0x63,0x68,0xB5,0x17,0x80,0xBD,0x1E,0xC7,0x5B,0x11,0x0B,0x9F,0xA6,0x65,0x56,0x87,0x6C,0x5F,0x48,0x79,0x7D,0x09,0x01,0x38,0xF7,0x54,0xAE,0x30,0x53,0x3D,0x36,0xAA,0x44,0xB9,0xB1,0x70,0x2A,0x6A,0x8A,0x56,0x62,0x6B,0xF0,0x45,0x1A,0x37,0xA7,0xAC,0x1A,0x33,0x70,0x76,0xE5,0x1E,0x0A,0x6B,0x03,0x00,0xC2,0xC7,0x90,0xA4,0x43,0x7E,0xA2,0x8D,0x7E,0xC9,0x8C,0x41,0x9B,0x37,0xD6,0xAA,0x97,0x04,0x17,0x43,0x5F,0x91,0xBE,0xDC,0x2B,0x1F,0x4B,0xC8,0x15,0x8A,0x51,0xB1,0xF4,0x71,0x51,0x6F,0xE8,0x24,0x28,0x7C,0x89,0x6B,0x89,0x1B,0x49,0xF2,0x54,0xDD,0x36,0x35,0x9B,0x89,0xC8,0x24,0xEB,0x3F,0x62,0x48,0x02,0x7F,0xBB,0xAD,0x4C,0xF2,0x91,0x18,0xCB,0x50,0xEB,0xB6,0x25,0xA3,0x7C,0x53,0x7A,0x02,0x23,0xF0,0xEB,0x70,0x85,0xB5,0xC7,0xEC,0x60,0x75,0x70,0xDB,0x91,0x85,0xD5,0x99,0x02,0xBC,0x26,0xC6,0x54,0xA2,0x80,0x4C,0x0D,0x94,0x67,0x93,0xD8,0xA2,0x14,0x82,0xAC,0x4F,0x05,0xE9,0x01,0x62,0x60,0x33,0x1D,0xCC,0x58,0xBC,0x66,0xAF,0x3C,0xA7,0x58,0x54,0x40,0x21,0x6A,0xA0,0x26,0x3B,0x2A,0x72,0x5E,0x08,0x0F,0x6F,0x9C,0x5B,0x6A,0x9C,0x9D,0xA2,0x93,0x55,0x18,0x9B,0x4B,0x95,0xB1,0x37,0xD1,0x22,0x5F,0x25,0x2A,0xC7,0x97,0xB0,0x64,0x6C,0xAC,0x52,0x16,0x4B,0x59,0x72,0xA9,0x92,0x65,0xD3,0x47,0xFC,0x7C,0x35,0x91,0xD1,0x5F,0xFE,0x68,0x1C,0x06,0xD4,0x38,0xCC,0xEB,0x60,0xBB,0x63,0x10,0xB7,0x95,0x32,0x89,0x72,0x0E,0x2C,0x72,0x87,0x30,0x05,0x23,0x37,0xAC,0xA7,0xC8,0x52,0x1A,0xB4,0x4F,0x1E,0x2A,0x04,0x9B,0x83,0xE0,0x77,0x4C,0x96,0xCD,0x8C,0x87,0x6F,0xA6,0x75,0xD0,0x92,0x39,0x77,0x27,0x1B],
        dk: [0x8A,0xD0,0xB5,0xF0,0x9A,0x25,0xAA,0x93,0x5D,0xD9,0xDA,0x34,0xAB,0x82,0xCA,0x75,0xA1,0x2D,0x66,0xE9,0x9C,0xF4,0x8B,0xCA,0x45,0xB9,0xB2,0xDB,0x44,0x1B,0xC2,0x97,0x1B,0xDC,0x99,0x22,0xB5,0xF8,0xBC,0x3C,0x06,0x78,0x54,0x67,0x59,0x07,0x3C,0xB8,0x8E,0x26,0xBA,0xD1,0xB1,0xB3,0xA4,0x64,0x6A,0x65,0x29,0xC6,0x32,0xEA,0xA3,0x47,0x73,0x4A,0x3B,0xE5,0x83,0xD4,0x71,0x78,0x09,0x4C,0x4A,0x67,0x0C,0xBC,0x41,0xEC,0x06,0x89,0x76,0x56,0x68,0x54,0x2E,0x6F,0x15,0xA7,0xD5,0x86,0xC9,0xE2,0x6A,0x6A,0x03,0xC7,0x14,0x69,0xC2,0xC5,0x3F,0x7B,0x14,0x1B,0x23,0x2D,0x86,0x21,0x6A,0x25,0xC7,0xA8,0xF3,0x68,0x52,0x85,0x8C,0x07,0xA9,0x52,0x4E,0xE1,0x7B,0xA6,0x34,0x0A,0xA2,0xA2,0x15,0xC1,0xEA,0x85,0x21,0x67,0xB6,0x89,0x1C,0xC1,0x66,0xC2,0xFA,0x13,0xA0,0x27,0x0A,0x22,0x98,0x34,0x13,0xE0,0xAC,0xC4,0x44,0xBF,0x40,0xE2,0x8C,0x45,0xE1,0x4E,0x07,0x40,0x4F,0x62,0x99,0x63,0x69,0x59,0x7F,0x10,0xFC,0xC1,0x80,0xEC,0xAC,0xAD,0x1A,0x67,0x19,0xAB,0x9F,0x1B,0x44,0x7A,0xE1,0x9A,0x2C,0xB0,0x2A,0x7D,0x04,0x20,0x61,0x72,0x16,0x8C,0x4F,0x0A,0x99,0xBA,0xFA,0x93,0x2D,0x66,0x49,0xE8,0x94,0xA8,0xF0,0x57,0x7B,0x81,0xC6,0x64,0x83,0xC5,0xB5,0xCF,0x60,0xAE,0x75,0xA4,0x44,0x52,0x6A,0x9B,0x36,0x74,0x32,0x5F,0xBA,0x38,0xF5,0x32,0x96,0x42,0x1A,0x78,0x50,0x11,0xC1,0xDD,0xB3,0xA6,0x99,0x77,0x45,0xDB,0x83,0xCD,0x58,0x3C,0x0C,0x41,0x77,0xC7,0x97,0xD4,0x0A,0x4F,0x69,0x9F,0x1F,0x40,0xC5,0x41,0x3A,0xC4,0xE4,0x23,0x73,0x49,0x2B,0x6A,0x2C,0x6A,0x40,0x6D,0x43,0x7F,0x42,0x57,0x0B,0x5E,0x94,0x9E,0xF4,0x35,0x0D,0xEA,0x79,0x0C,0xFE,0xB7,0x2D,0x12,0x87,0x51,0x7F,0xE3,0x27,0x3D,0x3C,0xA6,0x5A,0x13,0xCA,0x6E,0x23,0xC5,0x7B,0xF0,0x7D,0xA0,0x4B,0x85,0x1C,0xF3,0xAF,0xA1,0x8B,0xAF,0x5E,0xF0,0x20,0x79,0x28,0x57,0xA9,0xE7,0x21,0xF0,0x1B,0x9F,0xEA,0x7B,0x61,0x2E,0x4C,0x6E,0x29,0x07,0x93,0x66,0xB0,0x22,0x86,0x88,0xBE,0x2A,0x06,0x7F,0xBE,0x92,0x84,0x2D,0xD2,0x80,0xB3,0xC7,0x4D,0xFA,0xB7,0x61,0xE6,0x13,0xA8,0x60,0x4C,0x47,0x6E,0x15,0x46,0x66,0x85,0xC6,0x95,0xAC,0x35,0x79,0x1A,0x91,0x59,0x94,0x2F,0x60,0x17,0x0C,0xA2,0x14,0xC7,0xC0,0x9B,0x1A,0x4B,0x1B,0xCC,0x4F,0x4C,0xC6,0x0D,0xF0,0x1A,0x10,0x19,0x15,0xA9,0xA2,0xBC,0x55,0x31,0x19,0x66,0x50,0x32,0xDC,0xD9,0x47,0x6F,0xBA,0x7B,0xB0,0x71,0x57,0xD3,0x3C,0x9C,0x8E,0xFA,0x6B,0xD0,0xAC,0x38,0xC1,0xAC,0x26,0x5F,0xB5,0x18,0x57,0xD0,0x15,0x17,0x61,0x53,0x26,0xCA,0x0E,0x08,0x65,0x0B,0xA6,0xFA,0x40,0x83,0x2C,0x7B,0x4C,0x41,0xB6,0x44,0x71,0x60,0x22,0xB6,0x52,0xB1,0x92,0x7D,0x55,0xC9,0xB3,0x7F,0xE2,0x5F,0x1A,0xB6,0x7A,0x9A,0x03,0xC7,0x00,0x8C,0x84,0xB0,0x7C,0x49,0x26,0xB6,0x38,0x1E,0x40,0xCF,0xD4,0x41,0x04,0x12,0x35,0x18,0x74,0x16,0xCE,0xC3,0x66,0xCA,0x6F,0xB7,0x6F,0xA0,0xAB,0x6E,0x32,0x8A,0x26,0x41,0xFC,0x47,0xDC,0xD7,0x6E,0x91,0xCA,0x94,0x31,0xE1,0x9B,0xFF,0x02,0xCE,0x62,0x28,0xC2,0x33,0x63,0x82,0xF8,0xA1,0x0E,0x9E,0xE2,0xC8,0xF1,0x75,0x93,0x90,0xA2,0x00,0x24,0xA1,0x5B,0x3B,0x09,0x0C,0x13,0x90,0xCA,0x03,0x43,0x79,0x72,0x84,0x24,0x6B,0xD8,0x94,0x35,0x07,0xB7,0xA6,0xB7,0x1F,0xC3,0x3A,0x03,0xB7,0xA8,0x83,0x66,0xE4,0xAF,0xED,0x51,0x57,0x39,0xE5,0xC6,0x9F,0x8A,0x26,0x6E,0x4A,0x1F,0x53,0xD7,0x39,0x30,0xE9,0x87,0x55,0x69,0x31,0x2B,0x27,0x03,0x7E,0x5C,0x7F,0x85,0x21,0x00,0xC2,0xBA,0x36,0x48,0xB1,0xB9,0xC1,0xB1,0x49,0xF6,0x25,0x0E,0x0A,0x6B,0x06,0x52,0x13,0x13,0x4F,0x30,0x25,0x69,0x75,0x5B,0x8C,0x5C,0x4F,0xFC,0x68,0x0B,0xF7,0x81,0x18,0x45,0x34,0x00,0x35,0xF1,0x70,0xB0,0x68,0xBA,0x67,0xA4,0xC3,0xB0,0x16,0x6D,0x03,0xCC,0x82,0x61,0x84,0x01,0x90,0xA2,0x0F,0x9A,0x3B,0x1E,0xF4,0x65,0xC2,0xF2,0x18,0x2D,0xA8,0xDA,0x8D,0x3B,0x3C,0x8C,0xB1,0x29,0x15,0xF7,0xD9,0x3E,0x04,0xD8,0x84,0x0C,0x35,0x67,0x25,0x5A,0x7B,0xD6,0xD4,0x33,0xCF,0x10,0x68,0xD8,0x84,0x52,0xCF,0xC1,0x1F,0x99,0x1B,0x7C,0xE3,0x79,0x27,0xD6,0xCA,0xAE,0x88,0x10,0x74,0x2F,0x42,0x14,0x8B,0x89,0x6E,0xC4,0xEB,0xB5,0x34,0x03,0x86,0x31,0x5B,0x2C,0x1E,0x2B,0x43,0x91,0x5C,0x04,0x54,0x9C,0xC8,0xC1,0x9A,0xB4,0x0E,0x3B,0x7C,0x31,0x1B,0x42,0x61,0x10,0xA9,0xBB,0xB1,0x8D,0x3B,0x99,0x2A,0x42,0xC0,0x18,0x92,0x90,0xBE,0x67,0x3A,0x39,0x7C,0x40,0x90,0x44,0x3B,0x88,0xC5,0xD5,0xC5,0x65,0xA1,0x0F,0xEA,0x05,0x60,0x3D,0x36,0x24,0x4A,0x4A,0xA8,0xE9,0x25,0x5C,0xF1,0x84,0xAE,0x69,0x53,0x5A,0x83,0x99,0xC1,0xC6,0xF7,0x6C,0xF2,0x34,0x2A,0xDF,0xEA,0x6A,0x44,0x7B,0xB4,0x50,0x1B,0x9A,0x6C,0x44,0x59,0x3E,0xB0,0x43,0xE7,0xA5,0x50,0x2F,0x58,0x6C,0xF3,0x40,0x7D,0xEB,0x7A,0x0F,0xC3,0x2B,0x3F,0x46,0xF1,0x24,0x5C,0x55,0x96,0xE0,0xF1,0xBE,0xD9,0x37,0x20,0x7C,0x45,0x09,0xE1,0xD8,0x98,0x5B,0xE7,0x45,0xFD,0x69,0xBF,0x44,0x80,0x92,0x43,0x30,0x28,0xBE,0x25,0x95,0x90,0x33,0x11,0x47,0x95,0x86,0xA3,0x4B,0x2D,0x49,0x10,0x74,0x10,0xBC,0x4B,0xD2,0x96,0x53,0x17,0xFC,0x76,0x35,0x2B,0x63,0x8D,0xF3,0xB3,0xA3,0x15,0x32,0x50,0x26,0x80,0x9E,0x3B,0xC4,0x60,0x8C,0x0B,0x2C,0xB8,0x4D,0xF0,0xC9,0x5B,0xC0,0x52,0x70,0x7F,0xC1,0xA3,0x77,0xB2,0xB4,0x65,0xEB,0x7A,0x5D,0x64,0x4A,0xB4,0x27,0x8D,0xDC,0xE5,0xB6,0x1E,0x2B,0xB3,0xA7,0x10,0x52,0x55,0x5C,0xB3,0xBA,0xC6,0x93,0xEF,0x02,0x5F,0xF0,0x03,0x53,0xFB,0x76,0x94,0x5B,0x8A,0xA3,0xE9,0x95,0x0F,0x92,0x73,0x81,0x87,0x91,0xCC,0xAD,0x56,0x88,0x46,0x58,0x14,0x2A,0x2B,0x4D,0xF3,0xC5,0x7E,0xCA,0x13,0xAD,0x44,0xB4,0x9B,0x63,0x46,0xC6,0x3E,0xE8,0x90,0x78,0x58,0x9E,0x9E,0xB9,0xA9,0x80,0x4A,0x03,0xBF,0x7A,0x27,0x6F,0x86,0xB9,0x67,0x6C,0x58,0xD3,0xE7,0x1D,0x2C,0x87,0x70,0x80,0x4A,0x61,0x59,0x21,0x78,0xB4,0x49,0xC7,0x95,0x5B,0xBE,0x8C,0xF4,0x2F,0x31,0x67,0x25,0xE3,0xB1,0x6D,0x55,0xB5,0x27,0xCF,0xB2,0x32,0x68,0x1B,0x21,0xB2,0xCB,0x2F,0x30,0xAC,0x76,0x01,0x5B,0xB5,0x41,0x6A,0x04,0x11,0xC1,0x74,0x58,0x92,0x41,0x2E,0x68,0x3A,0x98,0xD7,0x36,0xED,0x1A,0x4C,0xD9,0x80,0x61,0x7D,0x08,0x21,0xC2,0xAB,0x02,0x82,0x07,0x0A,0x61,0x1A,0x11,0xD1,0x97,0x01,0xFB,0xD5,0x5A,0x21,0x27,0xB3,0x24,0xE6,0x90,0x1D,0x84,0x98,0x6C,0x04,0x64,0xDE,0x71,0x20,0xAF,0x45,0x10,0xAF,0x59,0x1D,0xD9,0xBB,0x79,0x47,0x9C,0x5F,0xA8,0x87,0x14,0xC6,0xA9,0x97,0x14,0xF7,0x6A,0x1E,0x40,0x2C,0x8F,0x38,0x4A,0x4E,0xE6,0xBC,0xD4,0x15,0x00,0x72,0x4C,0xC1,0x79,0x3A,0xBF,0xD8,0xD3,0xC2,0xF3,0x20,0x39,0x71,0x34,0xB0,0x0F,0x76,0x2D,0xBA,0x85,0xA2,0x3A,0xF1,0x55,0xE6,0xCC,0x03,0x73,0x80,0xC1,0xDD,0x64,0xA9,0x73,0xDB,0x35,0xB7,0x44,0x70,0x44,0x8B,0x24,0x21,0x20,0x62,0x76,0x47,0x87,0xE5,0xA9,0x3A,0x48,0x80,0x71,0x71,0xA7,0x71,0x5C,0xFC,0x89,0xBC,0xBC,0x9E,0x14,0x18,0x86,0xF8,0x07,0xA1,0xF9,0xD6,0x84,0xC8,0x42,0x6F,0x01,0x22,0x88,0x7D,0x9C,0x4C,0x27,0xEA,0x69,0xCC,0x15,0x1B,0x4D,0x49,0xB5,0x1E,0x5A,0x4E,0xAA,0xA5,0xAD,0x06,0xAB,0xA8,0x6D,0xF9,0x42,0xE9,0x86,0xA5,0xD5,0x79,0x20,0x80,0xFC,0x48,0x03,0x96,0xB3,0x94,0x86,0x68,0xFB,0x38,0x2C,0xC8,0xFC,0x15,0x47,0x48,0xCB,0x30,0xB7,0x64,0x1F,0x02,0x70,0xC8,0x34,0x38,0xB4,0xFC,0x3D,0x19,0x01,0x26,0x58,0x80,0x40,0x51,0x77,0xBC,0x7F,0x44,0x78,0x82,0x51,0xAB,0xC4,0x74,0x27,0x35,0x31,0x21,0x2A,0x66,0x27,0x9E,0x70,0x33,0x7A,0x23,0x09,0xFD,0xF4,0x9E,0x05,0x9B,0xBD,0xAF,0x49,0x73,0xA5,0x37,0x7A,0x4D,0x51,0x7B,0xA7,0x55,0x70,0x2C,0x37,0xCC,0x35,0x56,0x85,0x40,0x4C,0x95,0x2F,0xB6,0x7E,0x04,0x19,0xC7,0x8D,0x15,0x84,0xD0,0x94,0x92,0x54,0xD0,0x49,0x52,0xF7,0x24,0x3B,0xF1,0x40,0x28,0x03,0xC9,0xFC,0x73,0x73,0x25,0x88,0x13,0x78,0xCA,0x77,0xEE,0xF5,0xC4,0x15,0xFB,0x03,0x7D,0x68,0x9A,0x58,0x54,0xA1,0xD2,0x4B,0x65,0x27,0xA5,0x9B,0x9B,0x16,0x95,0x93,0x84,0x35,0x8C,0x42,0x3C,0x79,0x64,0x5C,0xCF,0x31,0x33,0xE2,0x1B,0x4B,0x64,0x95,0x7B,0x14,0xF6,0x3F,0x2A,0xA2,0x63,0x57,0xB1,0xC2,0x62,0xF2,0xA9,0x0F,0x7C,0xCC,0x2A,0x15,0x93,0x69,0x99,0xB0,0xA1,0xB4,0x98,0xAB,0x3B,0x32,0x43,0x30,0x32,0xC9,0xCA,0x23,0x08,0x1C,0x55,0xD3,0x1C,0xAD,0x36,0xE9,0x0C,0x1C,0xE0,0xB5,0xFC,0x24,0x7C,0xE8,0xC8,0x43,0xF2,0x88,0x35,0x24,0xB6,0x64,0xFA,0xC1,0xB2,0x0B,0xE6,0x02,0xA1,0x0A,0xAF,0x65,0x73,0x86,0x80,0xBB,0x10,0x25,0x44,0x26,0xF9,0xCB,0x09,0xA1,0x95,0x4D,0xB7,0x65,0x56,0x22,0x30,0x8F,0xAE,0xF5,0x05,0xAC,0xB4,0x97,0x55,0x4A,0x8F,0xCF,0xA9,0x6A,0x85,0x25,0x5A,0xD8,0x46,0x54,0x20,0x13,0xB8,0x41,0x59,0x51,0xBD,0xD4,0x5C,0x01,0x93,0x1E,0xBE,0x58,0x3E,0x70,0xE1,0x3F,0x30,0x15,0x17,0xB5,0xA4,0x0D,0x70,0x36,0x1F,0x63,0x09,0x41,0x60,0x67,0x64,0x6D,0x2B,0x71,0x36,0x62,0x6B,0xCC,0xCC,0x17,0x0C,0x66,0xCE,0xD4,0x90,0xC7,0x35,0x34,0x4B,0x62,0x77,0x09,0x7C,0xA9,0x14,0x21,0x2A,0x29,0x2D,0xD1,0x22,0xFB,0xB6,0x9F,0xDE,0xCA,0x47,0xFA,0xB4,0x53,0x2B,0x8C,0x80,0xCE,0xB7,0x7F,0x9C,0x54,0x3E,0x0B,0xF1,0x53,0x6D,0x1C,0x0C,0xAE,0x07,0x7E,0x2C,0xA7,0x86,0x2B,0x45,0xA4,0x10,0x46,0x9C,0xC5,0xB7,0x06,0xBA,0xE0,0x05,0x1C,0xB2,0x96,0x1D,0xB7,0x27,0x0B,0x75,0xB7,0x11,0x69,0x8D,0x2B,0x80,0x70,0x40,0xD5,0x62,0x81,0x29,0x43,0x6F,0xBB,0x58,0xF1,0x20,0x3F,0x75,0x56,0x14,0x65,0xF5,0x42,0x57,0xE4,0x4D,0x33,0xF5,0x12,0xD6,0x33,0x43,0x1D,0x00,0xA2,0xFB,0x02,0x30,0xC9,0xBB,0x9C,0xDD,0xFC,0x83,0xBD,0x65,0xC9,0x74,0x45,0x30,0x21,0x86,0xA1,0x72,0x23,0xAD,0x21,0x33,0x28,0x03,0xB9,0x09,0xE5,0xE5,0x67,0x19,0x70,0xBB,0xB0,0xF1,0xC4,0x83,0x7B,0xB8,0x42,0x73,0xBA,0x67,0x5A,0xC0,0x74,0xC5,0x29,0x0B,0x41,0x1C,0x25,0x00,0x65,0x70,0x59,0x33,0x9D,0xE3,0x92,0xF9,0xCA,0x30,0x89,0x52,0xA2,0x20,0x1A,0x58,0x87,0x67,0xAD,0xC0,0x35,0xBD,0xF3,0x30,0x24,0xEA,0x3B,0x9A,0x83,0xC5,0xA0,0xB9,0xC5,0x42,0x5D,0x14,0x07,0x0C,0x81,0xAA,0xDA,0x26,0xBA,0xC3,0xFB,0xB8,0xD4,0xB7,0xCF,0xEE,0x03,0x92,0x37,0x5C,0x68,0x42,0x73,0x51,0xDF,0xEC,0x63,0x60,0x9B,0xBB,0x50,0xB4,0x63,0xE0,0x40,0x92,0x85,0x70,0x09,0xD1,0xE5,0xB8,0x1D,0x70,0x7D,0x14,0xB8,0x33,0xCD,0x4A,0x0B,0x55,0x1B,0xAA,0x13,0xEC,0x48,0x8A,0x15,0x03,0xB0,0x46,0x7E,0xE4,0x02,0x3C,0x3F,0xE0,0x32,0xC7,0x82,0x25,0x06,0x38,0x86,0xE2,0x46,0x8E,0x00,0xF7,0x00,0x07,0x2A,0x2E,0xC8,0xDA,0x6A,0xFB,0x20,0x6C,0x91,0x90,0x44,0x33,0xBB,0xCC,0xB0,0xE7,0x6F,0x42,0x46,0x8C,0x40,0xEB,0x5F,0x59,0xCB,0x9A,0xE1,0xB0,0x35,0xE5,0x21,0x51,0x0B,0xF2,0x16,0xA1,0xAB,0xCB,0x19,0x03,0x3B,0x7A,0x65,0x88,0x97,0xC6,0x58,0x74,0xD5,0x13,0x51,0x83,0x14,0x9F,0x97,0x9E,0x55,0x3C,0xCF,0xBF,0xA3,0x90,0x0C,0xDA,0x6F,0x01,0x96,0x0B,0x75,0x15,0x7F,0x54,0x53,0xAA,0x6E,0x73,0xB3,0xED,0x90,0x2F,0x7D,0x7C,0x93,0x05,0x97,0x1B,0xDF,0x72,0x2E,0x29,0x37,0x16,0x9A,0x1B,0xC0,0xFA,0xEB,0x6C,0x92,0xF7,0x15,0x0D,0x23,0x30,0x87,0x7C,0x5D,0xC5,0x24,0x9A,0xAE,0x20,0x30,0x26,0x34,0xC5,0xC5,0xB2,0x30,0x53,0x52,0x10,0x28,0x12,0x25,0x42,0xF4,0x85,0xA0,0xEA,0xC8,0x69,0x22,0x37,0x20,0x63,0x36,0x51,0xF5,0xB2,0x47,0xC6,0x62,0xB3,0x1A,0x10,0x53,0x8C,0xA7,0x49,0x1B,0x14,0x37,0xAA,0x74,0xF4,0x28,0x2D,0x12,0x97,0x4D,0x9C,0x93,0x4D,0xF2,0x14,0x78,0x5B,0x64,0x18,0x46,0x8B,0x92,0xE5,0x25,0x28,0xC8,0x44,0x7A,0x1C,0xA4,0x22,0xFA,0x6C,0xC8,0x8E,0x28,0xB0,0x59,0xF0,0x4B,0x23,0x59,0x73,0x23,0xF7,0x2F,0x3E,0x23,0x36,0xF8,0x7C,0x47,0x90,0x5C,0xBA,0x65,0x5B,0xB7,0x3F,0xC3,0x2E,0x18,0xD4,0xB7,0x87,0x05,0xC7,0x82,0xEB,0xCB,0x43,0xE2,0x78,0x5C,0x82,0xC5,0xAF,0x24,0xB0,0xE1,0x69,0x9C,0xFB,0xC0,0x25,0x74,0x75,0x79,0x9A,0x53,0x9B,0x11,0xA5,0x0F,0x4D,0xF2,0xB7,0xFA,0xA2,0x0B,0xD8,0x82,0x75,0x15,0xCA,0x37,0x0F,0x89,0xC0,0xD4,0xC6,0x09,0x02,0xF6,0x56,0x7C,0xD6,0x0B,0x08,0x60,0xA5,0x5B,0xC8,0x57,0x2C,0x43,0x6C,0x24,0x6A,0xC2,0x76,0x64,0x4E,0x7D,0x60,0x2A,0xA5,0x7C,0x01,0x66,0x20,0x18,0x14,0x99,0x1C,0x1B,0xD7,0x5C,0x7C,0x47,0xC3,0x48,0xB6,0x7D,0x77,0x61,0x33,0x86,0x90,0x81,0x44,0xEA,0x83,0xFF,0x72,0x1F,0x9A,0x50,0x07,0x6C,0x51,0x01,0x64,0xD1,0x8E,0x05,0xD0,0x5D,0x98,0x84,0xC4,0x41,0x46,0xA0,0x7C,0xCA,0xCF,0x89,0x04,0x98,0xED,0x1A,0x19,0xB2,0xA1,0x54,0x31,0x72,0x9D,0xC1,0xF1,0x2B,0x7E,0xA1,0x0F,0x9F,0x92,0x80,0x62,0xD1,0x45,0x4B,0x4B,0x9F,0x68,0xE5,0x99,0x90,0x29,0x0B,0xE3,0x72,0x8B,0x32,0x89,0x56,0x93,0x63,0xAB,0x10,0x05,0x13,0x1B,0x23,0x81,0xA0,0x8C,0xC2,0xBF,0x94,0x3E,0x95,0xD5,0xB2,0x1B,0xC6,0xAA,0xBC,0x22,0x73,0x34,0x8B,0xC7,0x2B,0xD0,0x93,0xB7,0xB5,0x61,0x7A,0xE8,0x7F,0x60,0x2B,0xB9,0x89,0xE6,0xAF,0xC4,0x4B,0x81,0x51,0x20,0x76,0xA3,0xA8,0x76,0xE0,0xE2,0x5F,0x97,0x62,0xB4,0x62,0x08,0x19,0x85,0x50,0x2F,0x26,0xB2,0x87,0xA2,0x93,0x6D,0x5B,0x1A,0xCF,0xFC,0xEC,0x4E,0xEE,0x77,0xA9,0xCB,0xA9,0x80,0xEB,0x9B,0x5F,0xDE,0x75,0x53,0x9F,0x65,0x09,0x04,0x67,0x7D,0xBE,0x29,0xAB,0x8B,0xB9,0x18,0xA3,0x49,0x48,0x03,0xEC,0xA5,0x9A,0x2C,0x32,0xE5,0xB5,0xC8,0x3B,0x0B,0x80,0xB1,0x10,0x2C,0xD7,0xD9,0x48,0x2B,0x45,0x9B,0x6B,0x74,0x49,0x1E,0xC3,0x0C,0x4B,0xE7,0x7C,0x2B,0x52,0x4A,0xF7,0xB3,0xAD,0x1F,0x71,0x34,0x1D,0xF0,0xA7,0x6F,0x25,0x5C,0x29,0x03,0xC8,0x82,0x08,0x07,0x93,0x79,0x93,0x0A,0x95,0x13,0xF3,0x90,0x12,0x6E,0x73,0x2A,0x2B,0xB0,0x94,0xBF,0xA6,0xBF,0x0A,0x43,0x2B,0xCD,0x65,0x7D,0xAF,0xCB,0x25,0xC8,0xBB,0x15,0xE0,0x95,0x5D,0x09,0x9B,0x74,0xFF,0x1A,0x4D,0xE6,0x55,0x9C,0xD6,0x79,0x7C,0x38,0xC4,0x8C,0x11,0x34,0xCA,0x2C,0x97,0x92,0x43,0xF3,0x15,0x2A,0xF4,0xBB,0xE4,0xD7,0xA6,0xBC,0x09,0x87,0x21,0x33,0x92,0x0C,0xD2,0x3B,0x3E,0xF9,0x84,0x8C,0xCC,0x68,0x45,0xD6,0x47,0xB5,0x38,0x75,0x57,0x73,0x65,0x13,0xD5,0x85,0x60,0x84,0x51,0x92,0xF9,0x26,0x51,0x59,0x93,0x2E,0x57,0x2A,0x88,0xC4,0x4E,0x65,0x66,0x76,0x0C,0x06,0x1C,0x67,0xFC,0xB5,0xBF,0x21,0x00,0x95,0xE2,0x14,0xDA,0x74,0x53,0x57,0xE3,0x69,0x96,0xD8,0xC0,0x66,0x31,0x1B,0xBC,0x76,0x1A,0x1F,0xD2,0x52,0x73,0xD2,0x1E,0xAB,0x50,0x01,0x05,0x63,0xCD,0x64,0x68,0xA4,0xEA,0x83,0x6B,0x6D,0x64,0xBD,0x2B,0xD7,0x6D,0xBE,0x35,0x82,0xD5,0x73,0x6A,0x60,0x5A,0x55,0x09,0xFC,0x28,0x78,0x9B,0x56,0xB8,0x84,0xAE,0x9A,0x60,0x41,0x5F,0x55,0x67,0x4B,0xE6,0x01,0x57,0x6C,0x7C,0xEE,0x58,0x14,0x3B,0xF0,0x54,0x80,0x6A,0xBC,0xB3,0x45,0xA2,0x56,0xCB,0xC4,0x54,0xE3,0x43,0xF3,0xCC,0x7A,0xDE,0x65,0x56,0x2F,0xD2,0x9E,0xB2,0x59,0x73,0x7B,0xB3,0xCF,0x96,0x49,0xBD,0xEA,0x28,0x3F,0xB0,0x72,0x65,0x67,0x7C,0x98,0x08,0xD1,0x31,0x19,0xC0,0xA2,0xAD,0xF7,0x45,0xDE,0x69,0x75,0xF4,0x56,0x2C,0xD6,0x15,0x57,0xB3,0x96,0x5D,0x2B,0x07,0x2F,0x00,0x0A,0xA7,0xE0,0xA3,0x57,0xE1,0x25,0x3E,0xAF,0xEA,0x7F,0xDF,0xCC,0x92,0xFA,0x87,0x63,0x0D,0xD2,0x27,0x6C,0xE4,0x2E,0x82,0x0B,0x69,0xD1,0xFC,0x2E,0x47,0xD5,0xC4,0x98,0xA5,0x5B,0x3B,0x29,0xC3,0x4E,0x64,0x90,0x3D,0x04,0x7A,0xB1,0xC0,0x40,0x24,0x95,0x8F,0x70,0x11,0x95,0xF5,0xD1,0x3E,0xC6,0x70,0x6B,0x84,0x48,0x50,0x3A,0x54,0x99,0x22,0xA5,0x8A,0x24,0xB6,0x7C,0x93,0x63,0x27,0x56,0xB7,0x7D,0x22,0x54,0x07,0x31,0x61,0x71,0xDE,0xEC,0x56,0x71,0x44,0x35,0xCF,0x94,0xCC,0xF4,0x59,0x9E,0x00,0xD1,0x0E,0x56,0x96,0x22,0xBA,0xDA,0x82,0x0C,0x45,0x2F,0x25,0x42,0xAD,0xF0,0x87,0x65,0xCA,0x93,0xAE,0x38,0xEB,0x02,0x5D,0xE3,0x1C,0xFF,0x79,0x74,0x54,0x9A,0x78,0x25,0xA8,0x31,0xDD,0x05,0x4E,0x87,0xB8,0x4C,0x5F,0x25,0x47,0xFF,0x47,0xB4,0x6F,0x88,0xC9,0x9F,0x15,0x48,0xE9,0x33,0xA6,0xF4,0xD8,0x7F,0x1A,0x4A,0x1B,0x00,0xE3,0x9E,0x02,0xD6,0x0E,0x51,0xEB,0x60,0x3C,0x1C,0x0D,0x80,0x7A,0xCD,0xAB,0x08,0xBA,0xA2,0xB9,0x98,0x69,0xB7,0x5C,0xA2,0xC4,0xB9,0x63,0x68,0xB5,0x17,0x80,0xBD,0x1E,0xC7,0x5B,0x11,0x0B,0x9F,0xA6,0x65,0x56,0x87,0x6C,0x5F,0x48,0x79,0x7D,0x09,0x01,0x38,0xF7,0x54,0xAE,0x30,0x53,0x3D,0x36,0xAA,0x44,0xB9,0xB1,0x70,0x2A,0x6A,0x8A,0x56,0x62,0x6B,0xF0,0x45,0x1A,0x37,0xA7,0xAC,0x1A,0x33,0x70,0x76,0xE5,0x1E,0x0A,0x6B,0x03,0x00,0xC2,0xC7,0x90,0xA4,0x43,0x7E,0xA2,0x8D,0x7E,0xC9,0x8C,0x41,0x9B,0x37,0xD6,0xAA,0x97,0x04,0x17,0x43,0x5F,0x91,0xBE,0xDC,0x2B,0x1F,0x4B,0xC8,0x15,0x8A,0x51,0xB1,0xF4,0x71,0x51,0x6F,0xE8,0x24,0x28,0x7C,0x89,0x6B,0x89,0x1B,0x49,0xF2,0x54,0xDD,0x36,0x35,0x9B,0x89,0xC8,0x24,0xEB,0x3F,0x62,0x48,0x02,0x7F,0xBB,0xAD,0x4C,0xF2,0x91,0x18,0xCB,0x50,0xEB,0xB6,0x25,0xA3,0x7C,0x53,0x7A,0x02,0x23,0xF0,0xEB,0x70,0x85,0xB5,0xC7,0xEC,0x60,0x75,0x70,0xDB,0x91,0x85,0xD5,0x99,0x02,0xBC,0x26,0xC6,0x54,0xA2,0x80,0x4C,0x0D,0x94,0x67,0x93,0xD8,0xA2,0x14,0x82,0xAC,0x4F,0x05,0xE9,0x01,0x62,0x60,0x33,0x1D,0xCC,0x58,0xBC,0x66,0xAF,0x3C,0xA7,0x58,0x54,0x40,0x21,0x6A,0xA0,0x26,0x3B,0x2A,0x72,0x5E,0x08,0x0F,0x6F,0x9C,0x5B,0x6A,0x9C,0x9D,0xA2,0x93,0x55,0x18,0x9B,0x4B,0x95,0xB1,0x37,0xD1,0x22,0x5F,0x25,0x2A,0xC7,0x97,0xB0,0x64,0x6C,0xAC,0x52,0x16,0x4B,0x59,0x72,0xA9,0x92,0x65,0xD3,0x47,0xFC,0x7C,0x35,0x91,0xD1,0x5F,0xFE,0x68,0x1C,0x06,0xD4,0x38,0xCC,0xEB,0x60,0xBB,0x63,0x10,0xB7,0x95,0x32,0x89,0x72,0x0E,0x2C,0x72,0x87,0x30,0x05,0x23,0x37,0xAC,0xA7,0xC8,0x52,0x1A,0xB4,0x4F,0x1E,0x2A,0x04,0x9B,0x83,0xE0,0x77,0x4C,0x96,0xCD,0x8C,0x87,0x6F,0xA6,0x75,0xD0,0x92,0x39,0x77,0x27,0x1B,0xE6,0xE8,0x32,0xF2,0x49,0x8C,0xA5,0xA3,0x43,0x1F,0x40,0xD3,0x18,0x7B,0x1E,0xD9,0x65,0xFD,0xD6,0x69,0x3B,0x37,0xF6,0xEB,0x40,0x8A,0x99,0x97,0x7A,0xE4,0x96,0x44,0x7A,0xF6,0x50,0x22,0xE0,0xA4,0x72,0xED,0x63,0x88,0x63,0x8E,0xA2,0x9D,0x82,0xDA,0x68,0xB4,0xCF,0x9F,0xFD,0xF2,0xB6,0x7C,0xD7,0x08,0xEA,0x5A,0x37,0x0C,0x6A,0x7C,]
    };

    const ENCAPS_DEBUG: EncapsDebugValues<MlKem1024> = EncapsDebugValues::<MlKem1024> {
        ek: [0x27,0x66,0x9A,0x66,0x76,0x67,0xB8,0xD5,0x46,0x68,0x58,0x60,0x22,0x60,0x11,0x5B,0x62,0x09,0xBC,0x2C,0x45,0xDF,0x7A,0x4E,0x64,0x93,0x2B,0x75,0xC7,0x8B,0x9F,0x70,0x83,0xF1,0x31,0xBC,0xD4,0xE2,0x0E,0xFF,0x8C,0xCF,0x69,0x73,0x6B,0xDB,0xC8,0x84,0x06,0xF9,0xB6,0x9A,0xD3,0xCE,0x35,0x6A,0x0F,0x5E,0x67,0x6D,0xD0,0xA7,0xC4,0xAB,0xB1,0xA1,0xC9,0xD6,0x20,0x21,0xBB,0x38,0x4A,0x40,0x14,0xFB,0x04,0xCD,0x2F,0x82,0x18,0x90,0xD9,0x04,0x27,0xC4,0x9F,0x4A,0x62,0x8E,0xCE,0xC2,0x73,0x1F,0xAC,0x02,0x52,0x37,0x36,0x0D,0x58,0x2C,0xD0,0x66,0x47,0xB1,0x10,0x9A,0xA6,0xC2,0xAC,0x5D,0x43,0x37,0x58,0xC1,0xCA,0xA5,0x35,0x55,0xFF,0xF5,0x77,0xEB,0xB5,0x21,0xFB,0xE3,0x2D,0x10,0xF7,0x90,0x60,0x4C,0x53,0xC2,0xF8,0x2C,0x17,0xB0,0x8E,0xF3,0x62,0x56,0x74,0x21,0x48,0x44,0x90,0x6D,0xB3,0xFB,0x95,0x20,0x03,0x14,0x22,0xA1,0x3B,0xD7,0x61,0x2D,0x42,0x01,0xC2,0x7D,0x15,0xB9,0xD1,0x94,0x83,0x0C,0xC3,0x66,0x9B,0xB8,0xBA,0x34,0xC2,0x52,0x37,0x64,0x41,0x39,0x71,0xC4,0x0D,0x84,0xAE,0xE6,0x56,0x75,0xD5,0x21,0x53,0x09,0xDA,0x83,0x67,0xF0,0x01,0x49,0x75,0x46,0xEC,0xE0,0x7C,0xBF,0x00,0x2D,0x78,0x1B,0x83,0x06,0x82,0x48,0x40,0x80,0xAD,0x6F,0x95,0x58,0xB3,0x6B,0x6B,0xF6,0x10,0x91,0x71,0x30,0xB7,0x41,0x9B,0x39,0xF8,0x50,0x29,0x62,0x12,0x64,0xCF,0x2C,0x8A,0xE4,0xD8,0x08,0x38,0x7B,0x20,0xCC,0x5A,0xA0,0xB9,0x69,0xC3,0x9B,0xC8,0x0E,0x6C,0xB9,0xCA,0x03,0x51,0xA3,0xF6,0x0A,0xCE,0xAF,0x12,0xBD,0x41,0xFA,0x09,0x96,0xE3,0x99,0x06,0xA9,0xB6,0x16,0x97,0xB7,0x47,0xC2,0x03,0x1C,0x76,0x02,0x88,0x36,0x44,0x57,0x42,0x5B,0xBB,0xB4,0x0F,0x48,0x98,0xAD,0x08,0x58,0x76,0x60,0x8A,0x77,0xA5,0xEB,0x9D,0x12,0x4B,0xC9,0x92,0x26,0x51,0xB7,0x63,0x95,0x88,0x15,0x58,0xCA,0xD0,0x6F,0x3C,0x4B,0xCF,0x08,0xE4,0x5B,0x67,0xBA,0x51,0x60,0x38,0xA3,0x64,0xB7,0x74,0x0E,0x97,0x40,0xEE,0x2B,0x93,0xC5,0xC6,0x5F,0x49,0x02,0x0A,0xD4,0x2B,0x3C,0x0A,0xEA,0x5B,0xF2,0x42,0xA4,0xF1,0xB0,0x89,0xB5,0xA3,0x45,0x8B,0xE8,0xA3,0x71,0xCA,0x1F,0x29,0x3C,0x53,0xF2,0x78,0x0E,0xCE,0x28,0x12,0x93,0xD9,0x91,0xE6,0xE5,0x79,0x04,0x2B,0xAB,0xC1,0x69,0x72,0x4F,0x10,0x68,0x1F,0xD1,0xC7,0xD2,0xFB,0x16,0x48,0xB0,0xBF,0x80,0x81,0x8A,0x7D,0xD3,0xB7,0x09,0x73,0x4D,0x38,0x97,0x2E,0x3E,0x44,0x87,0x5A,0xF0,0x92,0x7A,0x9A,0xAD,0xE8,0x26,0x13,0xFC,0xA0,0x5E,0xE5,0xB3,0x21,0x06,0x47,0xA5,0x63,0x2A,0xA1,0x70,0xD0,0x9E,0x70,0xB5,0x6A,0x2F,0x04,0x33,0x7A,0x33,0x7E,0xE9,0x52,0x38,0x3A,0x1A,0x8A,0xEE,0xA6,0xCD,0xB9,0x0C,0xCD,0x86,0xA8,0x18,0xD1,0xBB,0x39,0x46,0x5B,0xA3,0x13,0xD2,0x66,0xBB,0xB1,0x05,0x81,0xFA,0x18,0x7D,0x92,0x6A,0xC3,0xA8,0xB7,0x49,0xF6,0x44,0x45,0xFA,0xB5,0x6C,0x99,0x27,0x55,0x57,0x93,0xFB,0x4A,0xCF,0xB0,0x39,0xB1,0xAA,0x54,0x3B,0x1B,0x87,0xAE,0x6A,0x49,0xAB,0x56,0x29,0x33,0xC4,0xC9,0x7B,0xD7,0x4C,0x07,0xBF,0x29,0x85,0x1A,0x46,0x98,0x51,0xA9,0x82,0x59,0x55,0x96,0xFE,0x7A,0xCA,0xE0,0xDB,0x23,0x53,0x30,0x28,0xAA,0x34,0x67,0x6F,0x7A,0x9B,0x29,0x26,0x3E,0x7A,0xA2,0x79,0x00,0x10,0x4B,0x1B,0xA1,0xB5,0x67,0x47,0x39,0xB2,0xFC,0x4E,0xD8,0xA3,0x30,0xBB,0xA5,0xA0,0xB6,0x24,0x7C,0x63,0xF1,0x15,0x3D,0xA0,0x1D,0xC8,0xF6,0x16,0xF1,0x04,0x83,0xA6,0x93,0xA6,0x34,0xC1,0xBA,0x6A,0xE1,0xAB,0x2F,0x16,0x34,0x00,0xBB,0x57,0x71,0xE7,0x01,0x71,0xFC,0xB5,0x41,0x55,0xAB,0xFC,0xB2,0x04,0x4F,0xCB,0x30,0xBA,0xD6,0x7F,0x74,0x21,0x83,0x86,0x18,0x19,0xED,0xB1,0xAA,0x6C,0x77,0x1F,0xC8,0xE1,0x1A,0x92,0xE0,0x8B,0x71,0xF4,0x0D,0x03,0x6C,0x15,0xD2,0x89,0x6A,0x20,0x47,0x25,0xBA,0x90,0xA0,0x3B,0x47,0x8D,0x98,0xC4,0x90,0x84,0x38,0x2F,0x1D,0x22,0x3F,0xE1,0x29,0x80,0xE9,0x47,0xA4,0x15,0xE5,0x5F,0xE6,0x7B,0x85,0xDA,0x40,0x44,0x13,0x42,0x44,0x5B,0x46,0xC2,0xFC,0x42,0x02,0x0D,0x04,0x76,0x9A,0x2A,0x1C,0x64,0x64,0x1F,0x0C,0x36,0x63,0x6B,0xA6,0xC4,0x65,0x2B,0x26,0x7A,0x4B,0x92,0x19,0xE3,0x33,0xA0,0x68,0x17,0xB5,0x81,0x7B,0x6E,0x6C,0xC4,0x85,0xE3,0x52,0x61,0x41,0x69,0xAB,0xC2,0x0E,0x18,0x91,0xB7,0xA0,0x00,0xC5,0x2A,0xF1,0x5A,0x7B,0x90,0x4C,0x97,0x6C,0x1B,0xFD,0x3A,0x23,0x77,0xEB,0x76,0xB5,0x50,0x33,0xC7,0xC4,0xC6,0x9E,0x71,0x74,0xAA,0xF2,0x77,0x15,0x75,0x63,0x16,0xCA,0xCC,0xCE,0x63,0xA5,0xA2,0x24,0x35,0xC7,0xD1,0x02,0x04,0x43,0xAA,0x71,0x69,0x3B,0xF0,0x62,0x30,0x3D,0x13,0x33,0x1F,0x79,0x54,0x24,0xC2,0x0D,0x26,0x6C,0x1D,0x90,0x30,0x5F,0xC8,0xC2,0x53,0x66,0x84,0xA9,0x3D,0x50,0x6D,0xE6,0x32,0x9B,0x61,0x62,0x40,0x59,0x99,0xBD,0x5C,0xAA,0x7D,0xDB,0x96,0x13,0xC8,0x23,0x8C,0xC6,0xD3,0x35,0xA1,0xEB,0x40,0x82,0xE7,0x71,0x0D,0x07,0x9F,0x87,0xA4,0xBF,0xF6,0x47,0x8B,0x5F,0x0C,0x58,0x77,0x86,0xAF,0x42,0x71,0x92,0xD9,0xA3,0x4A,0x4F,0xA3,0x3B,0xF0,0xD3,0xCC,0x58,0xFB,0x46,0x3B,0x48,0x38,0xCA,0x2C,0x33,0x7E,0x65,0x39,0x7D,0xA1,0x56,0x90,0xC5,0x2A,0xC0,0xE5,0x46,0x8B,0xDC,0x03,0xDF,0x5A,0x62,0xF7,0x02,0x09,0x34,0xE2,0x67,0xE0,0xF7,0xCF,0x95,0x59,0x94,0x35,0xF9,0x52,0xFA,0xB7,0x4C,0xFE,0xB4,0x30,0x8B,0x17,0x3F,0x12,0xE0,0x73,0xF7,0xF0,0x40,0xDB,0x4C,0x63,0xC1,0xC4,0x8A,0x7B,0x7A,0x41,0xF4,0x77,0x9A,0x6B,0x57,0xA9,0x22,0xC9,0x70,0x77,0x11,0x80,0x00,0x84,0x93,0xD4,0xC7,0x68,0x05,0x40,0x0B,0x7C,0x66,0x4D,0x0B,0x92,0xB2,0x2C,0x49,0x55,0x1B,0x12,0x47,0xE6,0x2C,0x85,0xE1,0xE5,0x40,0xC8,0x20,0x93,0x37,0x10,0x13,0xC4,0x67,0x6C,0xEA,0xD7,0x7C,0x5F,0x30,0x64,0xA3,0x73,0x49,0xC7,0x16,0x5E,0xB3,0xAA,0x7D,0xEF,0x87,0x31,0xE9,0xD6,0x6A,0x56,0x36,0x8F,0x19,0x5C,0x04,0x5B,0x2A,0x50,0xE5,0x97,0x86,0x16,0x1A,0x63,0x0D,0x28,0x00,0x89,0x80,0x12,0x98,0xC1,0x30,0xE4,0x48,0x31,0x50,0xCA,0x91,0x52,0xC2,0xA0,0xF2,0x47,0x75,0x0C,0x06,0x22,0x59,0xB8,0x4C,0x28,0x23,0x6C,0x3F,0xB5,0x46,0x25,0xD5,0xCD,0xBE,0xCC,0x68,0xDB,0xA2,0x2F,0xB1,0x55,0x80,0x55,0xFB,0x9B,0x24,0x35,0x01,0xC7,0x58,0x51,0xE7,0x6A,0xBE,0x48,0x47,0xB9,0xB9,0x72,0xA7,0x34,0x11,0xA6,0xB4,0x28,0x2B,0xF5,0x98,0x3A,0x82,0xDA,0x74,0x13,0xE5,0x4B,0xA3,0x5B,0xAB,0x37,0xA9,0xB3,0xC6,0x28,0x84,0xB6,0x43,0xC1,0x34,0x16,0x5C,0x98,0x70,0xC6,0xBB,0x39,0x0F,0x6B,0x7A,0x1E,0x57,0x45,0x15,0x8F,0xB2,0x51,0xD6,0x90,0x94,0x33,0x55,0x1F,0xEB,0xD3,0x0B,0xA5,0x75,0xA1,0xE2,0xF1,0x09,0x58,0x49,0x8D,0x9F,0x14,0x7E,0xD9,0x53,0x13,0x22,0xA1,0x60,0x97,0xF5,0x5D,0x81,0x17,0x95,0x45,0x79,0x12,0x91,0x2B,0x1C,0x65,0xF3,0x80,0x25,0x42,0x9B,0x3E,0x76,0x4A,0x2E,0x1A,0xBC,0x4E,0x30,0xC2,0x88,0x08,0x27,0x42,0x99,0x55,0x90,0x98,0x1C,0x43,0xDB,0xB3,0x65,0x96,0x6B,0xCB,0x97,0x20,0xB1,0x78,0xC5,0xEB,0x96,0x3B,0x82,0x93,0x4C,0x02,0x81,0x4B,0x75,0x25,0x54,0x6D,0xB7,0xC9,0x6D,0x65,0x82,0x2E,0x49,0x42,0xE4,0xA4,0xAC,0x13,0xC9,0x94,0x90,0xE7,0xAB,0x4A,0x70,0x23,0x71,0xF2,0x13,0x16,0xA5,0x79,0x06,0xB1,0x92,0x58,0x42,0x88,0x01,0x19,0x25,0x67,0xC2,0x04,0x5B,0xF8,0x77,0x5C,0xF5,0x8C,0x5D,0xB2,0x8B,0xA1,0xB0,0x5E,0x04,0x2A,0x18,0x59,0xE6,0x42,0x86,0xB5,0xB1,0x14,0xF3,0x9F,0xCA,0xCC,0x12,0x7B,0xE6,0x3D,0xFF,0x59,0x0B,0xC1,0x84,0xB8,0x3B,0x16,0x8C,0x30,0x19,0x98,0x90,0x37,0x41,0x00,0xE4,0x0D,0x2F,0xC7,0x75,0x2B,0x14,0x30,0x35,0x50,0x22,0xF3,0xD5,0x89,0x25,0xD1,0x99,0x1B,0xF3,0xB9,0x8A,0x90,0x39,0x5F,0x85,0x79,0x64,0x6C,0x84,0x13,0xBA,0xB3,0xC0,0xC0,0x70,0x7A,0x23,0x8A,0x27,0xD0,0x9F,0xA5,0x7A,0x32,0xFF,0x85,0x39,0x2F,0xD0,0x8C,0x2F,0x22,0x86,0xAB,0xDB,0x2B,0x69,0x36,0xB9,0xD3,0x50,0x38,0x02,0xC6,0xB5,0x1E,0x41,0x5B,0x81,0x67,0x3C,0xC7,0x80,0x54,0xF1,0xB2,0xC4,0xBD,0xFA,0x73,0x3E,0x52,0x64,0xC5,0x5A,0x7C,0x4D,0xA5,0xB7,0x39,0x44,0x40,0x24,0x62,0x03,0x3D,0x08,0xAE,0x62,0x0B,0xD0,0x56,0x44,0xB4,0x77,0xAB,0x31,0x5E,0x93,0x6D,0x3F,0x25,0xB5,0xBA,0x7A,0xC1,0x9E,0xB5,0x59,0xA5,0xC1,0x19,0x5F,0x56,0x8B,0x31,0x3C,0x26,0x75,0x09,0x2E,0x6D,0xF5,0x8F,0xF3,0x99,0xC4,0x2C,0xAB,0x63,0x63,0xAA,0x03,0x36,0x91,0xCB,0x8C,0xE0,0x66,0x99,0xE7,0x01,0xF2,0xB9,0x25,0x97,0xCB,0x8F,0xC2,0x35,0x16,0xE9,0xF4,0x0C,0xE7,0x5B,0x7B,0xC1,0xE0,0x52,0x0A,0x5A,0x38,0x95,0xEB,0x7D,0x8D,0x47,0x40,0x09,0xA0,0xCB,0x0A,0xDC,0x2D,0xF4,0x76,0xB5,0x16,0x41,0x12,0xC3,0xB6,0x00,0xB6,0x77,0x6D,0xAB,0x49,0xB2,0x03,0x81,0xA4,0x01,0x46,0x91,0x65,0x2A,0x3C,0x31,0x61,0xAA,0xC6,0x61,0x6C,0xFA,0xA2,0x65,0x63,0x8C,0x6C,0x66,0x5A,0x84,0x54,0xF3,0x67,0x80,0xB7,0x89,0xCF,0xA3,0x5D,0x2A,0xF4,0x9E,0x6D,0x5F,0x48,0x2B,0xFA,0x3C,0x86,0x4B,0x0E,0xF2,0x9E,0x18,0xD2,0xEF,0xFF,0x92,0xDB,0x18,0x76,0xA2,0x20,0x76,0xAB,0x1A,0xAC,0x0A,0x73,0x93,0xED,0x9E,0x5A,0x48],
        m: [0x03,0x4F,0xF1,0x4A,0x56,0x24,0x9C,0x25,0x21,0xD4,0x27,0x9E,0xBA,0x3D,0x04,0x93,0x1C,0xC8,0x92,0xBB,0xC4,0x50,0x02,0xB5,0xB3,0x3D,0x9F,0x01,0x88,0xAC,0xBA,0xF6],
        key: [0x46,0xC2,0x00,0xF3,0xF6,0xEE,0x8E,0x11,0xD4,0x76,0x53,0x80,0x1E,0x34,0x82,0x24,0x1C,0xB7,0x83,0xB9,0xD7,0x94,0xEB,0x11,0x6A,0x4B,0xDA,0x08,0x5A,0xEB,0x6B,0xB7],
        r: [0x8A,0x6B,0xF0,0xAB,0xC0,0x66,0x0F,0x5E,0xAF,0x82,0xFC,0x50,0x3D,0xA7,0x3A,0xA7,0x6A,0x2B,0xD0,0xD8,0xE8,0x54,0x24,0xD2,0x7F,0x4F,0x75,0x0A,0xC3,0xCC,0xE1,0x5E],
        c: [0x8D,0x4E,0x2C,0xB3,0x9F,0xFD,0xE4,0x31,0x1A,0xEE,0xDB,0x23,0x38,0xBF,0x58,0xCE,0x11,0xFA,0xDA,0xBD,0xC9,0x81,0x3A,0x32,0x19,0x30,0xF4,0x67,0x56,0xDD,0x13,0xA8,0xE7,0x91,0x9F,0xAC,0x4F,0x59,0xCC,0x9F,0x8B,0x91,0xC8,0x33,0xB3,0xB3,0xF9,0x1A,0xDC,0x6F,0x9F,0xBD,0xBD,0xE2,0xF7,0xDA,0xE8,0x84,0x1B,0xE5,0x23,0x8B,0x98,0x50,0xA5,0xEE,0xBE,0x67,0x5D,0xDE,0xF4,0x2A,0x93,0x14,0xF6,0x90,0x59,0x5D,0x51,0x52,0x3E,0x81,0x17,0xF2,0x22,0x66,0x03,0x4F,0x09,0xB7,0x7D,0x99,0x1E,0xE5,0x75,0x80,0x2A,0xFE,0x44,0x63,0x74,0xEB,0x3D,0x9E,0x1B,0xEB,0x8F,0x25,0x04,0x9C,0x6E,0xFA,0x96,0x32,0x73,0x66,0xC0,0x24,0xCD,0xFB,0xE8,0xDC,0x27,0xEF,0x56,0x49,0x2C,0x90,0x40,0x9E,0x87,0x13,0x9C,0x60,0x88,0x48,0x8E,0x17,0xB8,0x2D,0x15,0x56,0xC2,0x51,0x31,0xAC,0xEE,0x7D,0xAF,0xFE,0x2D,0x43,0x7C,0xEC,0x34,0x41,0xBB,0xBB,0xAB,0x80,0xC4,0xBF,0x17,0x7E,0x65,0x3A,0xE0,0x83,0x1C,0x9B,0x4C,0xEB,0x70,0x50,0x57,0x27,0xD6,0x3C,0x4D,0x47,0x4F,0xED,0xC5,0x20,0x19,0xBE,0x41,0x1C,0x9A,0x43,0xB8,0x71,0x70,0xF5,0x89,0x3F,0x06,0xEC,0xD8,0xD7,0x82,0x06,0x3D,0xF8,0x93,0xA1,0xB6,0x82,0x24,0x6D,0x1C,0x64,0xF8,0xF5,0xA8,0xC6,0xFC,0xDF,0x07,0x92,0x7F,0x4D,0x5B,0x7A,0x39,0x7F,0xBC,0xBD,0x07,0x50,0x45,0xDF,0x2C,0x4A,0x36,0xF5,0x30,0x4C,0x95,0xF4,0x4A,0xF9,0x27,0xAE,0x91,0x66,0x42,0x0B,0x39,0x44,0x87,0x94,0xF5,0xB3,0xC3,0x52,0x27,0xC3,0xC9,0xDF,0x92,0x56,0x02,0xA1,0xAC,0x98,0xF8,0x51,0xAA,0xDB,0x65,0xC9,0x3F,0xDD,0x63,0x27,0xAE,0xD8,0xAE,0x41,0x29,0x72,0x44,0x36,0xA3,0x3A,0xA0,0x8A,0xA5,0x66,0x08,0x85,0x5F,0xF8,0x0A,0xAA,0x42,0xAC,0xA4,0x56,0x2B,0x2D,0x78,0xDB,0xBD,0x2F,0x91,0xAE,0xF2,0x51,0x56,0x6B,0x8C,0x6F,0x98,0x21,0x37,0x84,0xC9,0x9D,0xD7,0xD7,0x1F,0x49,0x55,0x64,0xC9,0x08,0x50,0x1E,0x35,0xE3,0xBF,0xBB,0x67,0x5C,0xCB,0x66,0x63,0x52,0x87,0xCB,0x64,0x66,0xE6,0xE3,0x8E,0xA8,0xAB,0x11,0xCE,0x7E,0xC6,0x0B,0xED,0x86,0x20,0xB3,0xDC,0xD6,0x94,0x3D,0x12,0x79,0xA4,0x1F,0x93,0xA8,0x7F,0xA3,0x59,0xE5,0x13,0xC8,0x1D,0xE9,0x18,0xDA,0x88,0x32,0x2B,0x1B,0x08,0x81,0x40,0xE0,0x74,0xBE,0x39,0xBC,0x17,0xE3,0xC5,0x1A,0xB7,0x19,0xDF,0x6E,0x42,0x6D,0x64,0xFF,0x94,0xB8,0x66,0x2B,0x9D,0xD2,0x6A,0x32,0xA3,0xC3,0x68,0x7B,0xF9,0x29,0x4C,0x53,0x7A,0x22,0x68,0xF9,0xDE,0xD3,0x80,0xCC,0x8A,0x0F,0x11,0x27,0xEE,0x5A,0x32,0x2B,0x4D,0xF2,0x4D,0x87,0xFB,0xCE,0x76,0xF5,0x60,0xB0,0x37,0xC6,0x59,0xB6,0xFB,0x15,0xC1,0x56,0x07,0x1A,0xED,0xC2,0x6E,0xF1,0x11,0x40,0xDE,0x88,0xD0,0x8D,0x46,0x3E,0xA0,0xEA,0xF0,0x80,0xA0,0xB2,0xE6,0x27,0xD9,0xFF,0x1D,0x56,0xC5,0x02,0x33,0x55,0x24,0x26,0x97,0x27,0xA0,0x32,0xDA,0xCD,0x16,0x54,0x3A,0xDA,0x83,0x42,0xCD,0x6C,0xB4,0x0E,0x72,0x28,0x59,0x2C,0x35,0x74,0xD9,0x82,0xE0,0xB9,0x14,0x5E,0xB8,0x65,0xDB,0x2E,0xE7,0x81,0x07,0x26,0xA9,0x16,0xB8,0x37,0xCA,0x4F,0x14,0xC2,0xCB,0x9E,0x95,0x1B,0xDE,0x76,0xBE,0x16,0xB8,0xB1,0xCD,0xC2,0xEE,0xCD,0xC0,0x69,0x49,0xB8,0xBE,0xB1,0x17,0x86,0xB8,0xF2,0x5F,0x4C,0x9A,0xFA,0x55,0x97,0xCE,0xB1,0xD8,0x5F,0xC9,0xB9,0xC9,0x1D,0xC6,0x19,0x66,0xF3,0x96,0x09,0x1E,0x54,0xC9,0x6C,0x97,0xA4,0x30,0x0E,0x99,0xFD,0x9F,0x75,0x2C,0x0B,0xEF,0x5D,0x88,0xCA,0xFB,0xDC,0xB3,0x99,0x3F,0xCF,0x6C,0x7A,0x8C,0x55,0x19,0xFC,0xEC,0xB6,0xA7,0x91,0x17,0xE9,0xB5,0x21,0x68,0x01,0x97,0xD8,0xA9,0x1A,0xB7,0x5F,0x18,0x14,0xDB,0xC5,0x80,0x75,0xEF,0x4F,0x07,0x98,0x7A,0xBC,0x56,0xA7,0x5D,0xA4,0x41,0x6E,0xDB,0x9D,0x6F,0x3D,0x77,0x1A,0xD3,0x40,0xD5,0xCB,0xCF,0xC0,0xE5,0x71,0xFA,0x70,0xAA,0xC1,0xC7,0xDB,0xBB,0x5F,0x5C,0x5E,0x1D,0x8B,0x10,0x36,0xF5,0xA6,0xFC,0xFD,0x06,0x25,0xAB,0x5B,0xBD,0xA5,0x71,0x83,0x9C,0x58,0x35,0xDD,0x69,0x79,0x77,0x8F,0x59,0xD3,0x48,0x68,0x4F,0xA6,0xCF,0xC2,0xA6,0x25,0x35,0xB4,0x7F,0xAD,0x7F,0x97,0xB5,0x21,0x88,0x72,0xD5,0x2D,0xCA,0xCE,0x9D,0x3C,0x1B,0x11,0x62,0x8D,0x35,0x2A,0xD8,0x21,0x90,0x0F,0x44,0xE1,0x4B,0x64,0x7F,0x6B,0xFA,0x70,0xF6,0x46,0xB5,0xC7,0xAF,0x53,0x13,0x17,0x7A,0x10,0x95,0x49,0x44,0x22,0x91,0x53,0xA4,0x49,0xFC,0xF8,0x9A,0x62,0x63,0xBD,0xBF,0x85,0x56,0xE9,0x81,0xE5,0xD6,0x25,0x13,0x40,0xF9,0xF4,0x3C,0x66,0x92,0x03,0x0F,0xB9,0x60,0x5B,0xB9,0x9F,0x33,0xE9,0x6F,0x06,0xD1,0xE4,0xE6,0xAB,0xBE,0x65,0xE1,0x46,0x96,0xD5,0x30,0xF1,0xB5,0x25,0xFF,0xF8,0x7D,0x54,0xC1,0xAC,0x2F,0x5E,0x96,0x4D,0x46,0xEE,0x37,0xF4,0x04,0x5B,0x54,0xE6,0x09,0x8F,0x76,0xB2,0x8E,0xAF,0x69,0xE9,0x98,0x88,0x8D,0x25,0xE0,0x21,0xA5,0x38,0xFD,0x19,0x56,0xA7,0xFC,0x30,0xAE,0x83,0xF8,0xBA,0x99,0x47,0xF8,0x64,0xFD,0x59,0x73,0x1A,0x6F,0xBB,0x40,0x2A,0xF2,0x99,0x0E,0x1E,0xD2,0xD5,0x6B,0xF6,0x2A,0xA6,0xCE,0xAE,0x6F,0x76,0x9D,0x2D,0x0C,0x6C,0x31,0x3D,0x7A,0xAF,0x97,0x4E,0x69,0xDC,0x02,0xCC,0x43,0x18,0xB9,0x45,0x7B,0x8C,0xC4,0x06,0x56,0xAB,0x7B,0x61,0x34,0xDE,0x3F,0x98,0x01,0xCE,0x01,0x96,0x99,0xCE,0x85,0x5E,0xBE,0x9C,0x6C,0x02,0xFD,0x08,0x50,0x6F,0x00,0x4A,0x4E,0xED,0x2C,0xA1,0x66,0xC9,0x54,0xC7,0xDB,0x88,0x10,0x70,0x0C,0xA6,0x71,0xEF,0x37,0x2A,0x29,0x0B,0x00,0xE1,0xBF,0xBB,0x97,0xE3,0xE6,0x74,0xD3,0xDC,0xCC,0x57,0xCE,0x59,0xF4,0x65,0xB1,0x48,0x8F,0xF7,0x6F,0x62,0x39,0x00,0x8B,0xE3,0xE7,0x61,0xEF,0x9C,0x11,0x3D,0xF0,0x10,0x7B,0x8E,0xEA,0xE3,0xFE,0xBA,0x55,0xB3,0x5E,0x4C,0x1D,0xA3,0xB6,0xC8,0x7A,0x8D,0x20,0x11,0x0E,0x1C,0xD7,0x71,0xCC,0xBC,0x30,0xDF,0xF7,0x61,0xE6,0x03,0xD4,0x88,0xE5,0x5B,0x85,0x3A,0xAE,0x7D,0xAA,0xDF,0x2A,0x00,0x7B,0x83,0x93,0xDF,0x08,0xAF,0x53,0x4F,0x9F,0x53,0xA7,0x37,0x57,0xBA,0xBE,0x21,0xC8,0x64,0x26,0xCF,0x05,0x8E,0xCA,0x81,0x7E,0xF2,0x37,0xBF,0xC5,0x8A,0xC2,0x98,0xFB,0xF2,0xA1,0x48,0x1C,0x4D,0x12,0xDC,0xF1,0xB7,0x37,0xFD,0x63,0x97,0x69,0xA2,0x53,0x1E,0xF9,0x31,0xA3,0x62,0xA4,0x44,0x56,0xEE,0x2C,0xA4,0x85,0x98,0xB4,0x62,0x59,0xFC,0xC9,0x77,0x07,0x6C,0x59,0xFA,0x4E,0x29,0x54,0xE9,0x96,0x7D,0xA4,0x5D,0xA7,0xCB,0xF7,0x86,0x33,0xEC,0x59,0xC4,0x63,0xFE,0x48,0xA8,0x3B,0x80,0x1A,0x54,0xDB,0x3F,0xEA,0xB4,0x45,0xA3,0x57,0xE4,0x18,0xB0,0x65,0x3F,0x29,0x40,0xB2,0xB7,0x13,0x81,0xB2,0xDF,0x9E,0xCF,0x81,0x00,0x84,0x8E,0x29,0x12,0xF4,0xBD,0x50,0x3A,0xF0,0x75,0xAA,0xAF,0x36,0xC1,0x36,0xA4,0x13,0xC9,0x5B,0xE2,0xF2,0x5A,0x6D,0x29,0x19,0x76,0xCD,0x66,0xA2,0x76,0x43,0x53,0x7E,0x35,0xE1,0xDF,0x89,0xB1,0xE4,0x94,0xB3,0x6B,0x08,0xF3,0xD0,0x19,0x6C,0xD7,0xE9,0x0B,0xA5,0xBB,0x21,0x00,0x9F,0x37,0xA8,0x43,0x19,0x9E,0x08,0xDD,0x95,0xCA,0x49,0x48,0xC5,0x33,0xCB,0x26,0x3B,0x5D,0x40,0x5A,0xF2,0xFA,0x11,0x99,0x81,0xA8,0x53,0x6E,0xB7,0x1C,0x88,0x22,0x6C,0x41,0x53,0x4C,0x26,0x87,0xBF,0x1E,0xED,0x34,0x75,0xE8,0x48,0x8B,0xDE,0x90,0x9A,0x93,0xD4,0xDB,0x55,0xB6,0xE8,0x34,0xB5,0xE7,0x86,0x0A,0xA9,0x8F,0xD8,0xBC,0xB1,0x3A,0xB0,0x77,0xB7,0xBF,0xD7,0x5B,0x35,0xFA,0x39,0x3E,0x93,0xE3,0xBF,0xB4,0xB9,0xBA,0x1D,0xAA,0x74,0x65,0xFD,0x5B,0x23,0xA5,0xB4,0xCD,0x17,0x16,0xD4,0xBD,0xF7,0xB8,0xD5,0x57,0x4B,0x15,0x6D,0xB8,0x7D,0x8D,0xE1,0xE5,0x26,0xC9,0x7F,0x8E,0xB2,0x87,0xBD,0x97,0xEE,0xEE,0xEF,0x07,0x4D,0xBC,0xB2,0xC4,0xDB,0x51,0xA4,0xEF,0xF1,0xFA,0x7F,0xFF,0x32,0x8A,0x57,0x2D,0x72,0x70,0x01,0x71,0x08,0xAC,0xE2,0xED,0x25,0x09,0x3D,0xA5,0x35,0xC7,0xA2,0x6D,0x3B,0x91,0x2A,0xA5,0x7F,0xB3,0x22,0xE5,0x3B,0xB2,0x22,0xE9,0x4E,0x7C,0xF6,0x8C,0xD8,0xA2,0x1A,0xD7,0xC0,0x6A,0x4A,0xF9,0x78,0xED,0x1D,0xEB,0x10,0xE3,0xF2,0x41,0x2A,0xC6,0x54,0x3C,0x18,0x20,0x68,0xEF,0xFB,0xD8,0x7F,0x31,0x76,0x5F,0x5A,0xE6,0x81,0xEE,0x8B,0x2E,0x9A,0xEB,0x5B,0xC9,0x40,0xA9,0x4E,0xC0,0xEE,0xF5,0xBE,0xF7,0x48,0x74,0x16,0x9E,0xAB,0xEC,0xF1,0x51,0x25,0x65,0xC5,0x1E,0xA5,0x87,0x21,0xDD,0x3A,0xF1,0x69,0x03,0x65,0xDB,0x22,0xE1,0x87,0x7F,0x2A,0x5C,0x01,0x72,0x3F,0x69,0xB7,0x72,0x52,0x77,0xAE,0x4E,0x9E,0xFA,0xCD,0x3A,0xFA,0x5A,0xDC,0xAF,0x38,0x57,0x77,0xE7,0xCE,0x10,0xF9,0x56,0xB4,0x64,0x2C,0x6F,0xC1,0xC9,0x78,0x08,0x99,0x3E,0xFD,0x99,0x4C,0xA6,0x5C,0x75,0xF4,0x59,0xAC,0x58,0x72,0xF8,0x24,0x88,0xC5,0x7F,0xB7,0xAF,0x9A,0xB9,0x69,0xD5,0xE3,0x69,0xC1,0x6D,0x0B,0x2B,0xF7,0x80,0x0B,0x93,0x8D,0x67,0x84,0xC7,0xF6,0x4D,0x0C,0x55,0xCA,0x77,0x94,0x65,0x49,0x38,0x94,0x9E,0x14,0x21,0x70,0x55,0xD3,0x41,0x01,0xF9,0x41,0x7D,0x37,0x0A,0x8A,0xDD,0x72,0xFC,0x0B,0x57,0x66,0xEC,0x1D,0x8A,0xDD,0xD7,0x02,0x33,0x4A,0x2A,0xC2,0x77,0x09,0xC5,0xAC,0x5A,0xE5,0x60,0x1D,0xBA,0x95,0x2B,0xE2,0x58,0xD9,0x33,0x6D,0xF3,0xE0,0xF6,0x58,0x78,0xA8,0x58,0x61,0x32,0x58,0xFB,0x5E,0x47,0x94,0x1B],
    };
}


#[cfg(test)]
mod test {
    use super::*;
    use crate::mlkem::{MlkemEncapsulationKey, MlkemDecapsulationKey};
    use crate::kpke::{KpkeKeyGenOutput, Cyphertext};
    use crate::serialize::*;
    use crate::crypt;
    use crate::sample;
    use crate::serialize::BitOrder;

    use bitvec::prelude::*;

    // Right now we are just testing ML-KEM-1024, but should be trivial to make generic over all 3, (but someone has to move the data)
    type PARAMS = MlKem1024;

    #[test]
    pub fn key_gen<> () {
        let z = PARAMS::KEYGEN_DEBUG.z;

        println!("z: {}", {
            z.iter()
            .map(|byte| format!("{:02X}", byte))
            .collect::<String>()
        });

        //kpke::key_gen
        let (ek, dk) : KpkeKeyGenOutput<{PARAMS::K}> = {
            let d = PARAMS::KEYGEN_DEBUG.d;

            println!("d: {}", {
                d.iter()
                .map(|byte| format!("{:02X}", byte))
                .collect::<String>()
            });

            let (rho, sigma) = crypt::G::<32>(&d);

            println!("\nrho: {}\nsigma: {}", {
                rho.iter()
                .map(|byte| format!("{:02X}", byte))
                .collect::<String>()
            }, {
                sigma.iter()
                .map(|byte| format!("{:02X}", byte))
                .collect::<String>()
            });

            assert_eq!(rho, PARAMS::KEYGEN_DEBUG.rho);
            assert_eq!(sigma, PARAMS::KEYGEN_DEBUG.sigma);

            let mut n = 0;

            // Our public key, (the bad bases)
            let mut a: Matrix<{PARAMS::K}> = Matrix::new(RingRepresentation::NTT);

            for i in 0..PARAMS::K {
                for j in 0..PARAMS::K {
                    a.data[i][j] = sample::sample_ntt(crypt::XOF::new(&rho, j as u8, i as u8)) // XOF stream is instantied here for each index of the matrix
                }
            }

            println!("\naHat: {:?}", a);

            // Our secret key
            let mut s = Vector::new(RingRepresentation::Degree255); //This is ugly, maybe use an iterator to make the polynomials, then collect them into a vector
            for i in 0..PARAMS::K {
                s.data[i] = sample::sample_poly_cbd::<{PARAMS::ETA_1}>(
                    crypt::prf::<{PARAMS::ETA_1}>(&sigma, n)
                );
                n += 1;
            }

            
            // Our error vector
            let mut e = Vector::new(RingRepresentation::Degree255);
            for i in 0..PARAMS::K {
                e.data[i] = sample::sample_poly_cbd::<{PARAMS::ETA_1}>(
                    crypt::prf::<{PARAMS::ETA_1}>(&sigma, n)
                );
                n += 1;
            }

            println!("\ns: {:?}", s);
            println!("\ne: {:?}", e);
            
            
            // NTT both
            let s = s.ntt();
            let e = e.ntt();

            println!("\nsHat: {:?}", &s);
            println!("eHat: {:?}", &e);

            let mut t = a.right_vector_multiply(&s);

            println!("aHat * sHat: {:?}", t);

            t.add(&e);

            println!("tHat = aHat * sHat + eHat: {:?}", t);

            ((t, rho), s)
        };
       
        // Encapsulation key is the encryption key
        let encapsulation_key: MlkemEncapsulationKey<{PARAMS::K}> = ek;

        let hash = crypt::H(&encapsulation_key.serialize().into_vec());

        // Fujisaki-Okamoto transformation, turn decryption key into decapsulation
        let decapsulation_key: MlkemDecapsulationKey<{PARAMS::K}> = (dk, encapsulation_key.clone(), hash, z);

        //First bits should be 0001_0111_0000
        println!("ek: {}\ndk: {}", {
            encapsulation_key.serialize().as_raw_slice().iter()
            .map(|byte| format!("{:02X}", byte))
            .collect::<String>()
        }, {
            decapsulation_key.serialize().as_raw_slice().iter()
            .map(|byte| format!("{:02X}", byte))
            .collect::<String>()
        });

        assert_eq!(encapsulation_key.serialize(), PARAMS::KEYGEN_DEBUG.ek.view_bits::<Lsb0>().to_bitvec());
        assert_eq!(decapsulation_key.serialize(), PARAMS::KEYGEN_DEBUG.dk.view_bits::<Lsb0>().to_bitvec());
    }

    #[test]
    pub fn encaps() {
        println!("Encapsulation -- ML-KEM-1024");

        let m = PARAMS::ENCAPS_DEBUG.m;

        let serialized_ek = PARAMS::ENCAPS_DEBUG.ek.view_bits::<BitOrder>().to_bitvec();

        println!("ek: {}", {
            serialized_ek.as_raw_slice().iter()
            .map(|byte| format!("{:02X}", byte))
            .collect::<String>()
        });
        println!("m: {}", {
            m.iter()
            .map(|byte| format!("{:02X}", byte))
            .collect::<String>()
        });

        let ek_hash = crypt::H(&serialized_ek.clone().into());

        let mut combined = [0u8; 64];

        combined[..32].copy_from_slice(&m);
        combined[32..].copy_from_slice(&ek_hash);
        
        let (key, rand) = crypt::G::<64>(&combined);
        
        println!("\nK: {}", {
            key.iter()
            .map(|byte| format!("{:02X}", byte))
                .collect::<String>()
        });
        println!("r: {}", {
            rand.iter()
                .map(|byte| format!("{:02X}", byte))
                .collect::<String>()
        });

        assert_eq!(key, PARAMS::ENCAPS_DEBUG.key);
        assert_eq!(rand, PARAMS::ENCAPS_DEBUG.r);

        let m: Compressed<1, Ring> = Compressed::<1, Ring>::deserialize(&m.view_bits::<BitOrder>().to_bitvec());

        // kpke::encaps
        let c = {
            let mut n = 0;

            let (t, rho) = MlkemEncapsulationKey::<{PARAMS::K}>::deserialize(&serialized_ek);
            
            dbg!(t.data[0].t);

            println!("t: {:?}", &t);
        
            // Recreate the matrix A
            let mut a: Matrix<{PARAMS::K}> = Matrix::new(RingRepresentation::NTT);
            for i in 0..PARAMS::K {
                for j in 0..PARAMS::K {
                    a.data[i][j] = sample::sample_ntt(crypt::XOF::new(&rho, j as u8, i as u8));
                }
            }

            println!("\na: {:?}", &a);
        
            // Encrpytor's Secret (Equivalent of S in key_gen)
            let mut r: Vector<{PARAMS::K}> = Vector::new(RingRepresentation::Degree255);
            for i in 0..PARAMS::K {
                r.data[i] = sample::sample_poly_cbd::<{PARAMS::ETA_1}>(
                    crypt::prf::<{PARAMS::ETA_1}>(&rand, n)
                );
                n += 1;
            }

            println!("\nr: {:?}", &r);
        
            // Error vector to be added to R^T * A
            let mut e_1: Vector<{PARAMS::K}> = Vector::new(RingRepresentation::Degree255);
            for i in 0..PARAMS::K {
                e_1.data[i] = sample::sample_poly_cbd::<{PARAMS::ETA_2}>(
                    crypt::prf::<{PARAMS::ETA_2}>(&rand, n)
                );
                n += 1;
            }

            println!("\ne_1: {:?}", &e_1);
        
            // Error vector to be added to the shared key V (R^T * t) 
            let e_2 = sample::sample_poly_cbd::<{PARAMS::ETA_2}>(
                crypt::prf::<{PARAMS::ETA_2}>(&rand, n)
            );

            println!("\ne_2: {:?}", e_2);
        
            let r = r.ntt();
        
            // u is the encryptors computation with A and their secret, but this one is left-multiplied
            let u = a.left_vector_multiply(&r);

            println!("\nBHat * rHat: {:?}", u);
            
            let mut u = u.inverse_ntt();

            println!("NTTInverse(BHat * rHat): {:?}", u);

            u.add(&e_1);

            println!("u = NTTInverse(BHat * rHat) + e1: {:?}", u);

            let u_compressed = Compressed::<{PARAMS::D_U}, Vector<{PARAMS::K}>>::compress(u);
        
            let m = m.decompress();

            println!("mu: {:?}", m);
        
            // v is our shared secret, notice for both parties its approximately rAs.
            dbg!(r.data[0].t, t.data[0].t);

            let mut v_ntt = r.inner_product(t);

            println!("tHat^T * rHat: {:?}", v_ntt);

            v_ntt.inverse_ntt();

            println!("NTTInverse(tHat^T * rHat): {:?}", v_ntt);

            v_ntt.add(&e_2).add(&m);

            print!("v = NTTInverse(tHat^T * rHat) + e2 + mu: {:?}", v_ntt);
        
            let v_compressed = Compressed::<{PARAMS::D_V}, Ring>::compress(v_ntt);
        
            (u_compressed, v_compressed)
        };

        println!("\nc: {}", {
            c.serialize().as_raw_slice().iter()
            .map(|byte| format!("{:02X}", byte))
            .collect::<String>()
        });

        assert_eq!(c.serialize(), PARAMS::ENCAPS_DEBUG.c.view_bits::<BitOrder>().to_bitvec());
    }
}