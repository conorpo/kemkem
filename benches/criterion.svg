<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="742" onload="init(evt)" viewBox="0 0 1200 742" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="742" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="725.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="725.00"> </text><svg id="frames" x="10" width="1180" total_samples="184"><g><title>`0x7FFB120E2690 (2 samples, 1.09%)</title><rect x="0.0000%" y="677" width="1.0870%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="2"/><text x="0.2500%" y="687.50"></text></g><g><title>`0x7FFB120C2513 (1 samples, 0.54%)</title><rect x="1.0870%" y="581" width="0.5435%" height="15" fill="rgb(217,0,24)" fg:x="2" fg:w="1"/><text x="1.3370%" y="591.50"></text></g><g><title>`0x7FFB120C2B52 (1 samples, 0.54%)</title><rect x="1.0870%" y="565" width="0.5435%" height="15" fill="rgb(221,193,54)" fg:x="2" fg:w="1"/><text x="1.3370%" y="575.50"></text></g><g><title>`0x7FFB120C26B7 (1 samples, 0.54%)</title><rect x="1.6304%" y="581" width="0.5435%" height="15" fill="rgb(248,212,6)" fg:x="3" fg:w="1"/><text x="1.8804%" y="591.50"></text></g><g><title>`0x7FFB120C26C6 (1 samples, 0.54%)</title><rect x="2.1739%" y="581" width="0.5435%" height="15" fill="rgb(208,68,35)" fg:x="4" fg:w="1"/><text x="2.4239%" y="591.50"></text></g><g><title>`0x7FFB120C3336 (1 samples, 0.54%)</title><rect x="2.7174%" y="565" width="0.5435%" height="15" fill="rgb(232,128,0)" fg:x="5" fg:w="1"/><text x="2.9674%" y="575.50"></text></g><g><title>`0x7FFB121215DD (1 samples, 0.54%)</title><rect x="2.7174%" y="549" width="0.5435%" height="15" fill="rgb(207,160,47)" fg:x="5" fg:w="1"/><text x="2.9674%" y="559.50"></text></g><g><title>`0x7FFB120A88A8 (1 samples, 0.54%)</title><rect x="3.2609%" y="549" width="0.5435%" height="15" fill="rgb(228,23,34)" fg:x="6" fg:w="1"/><text x="3.5109%" y="559.50"></text></g><g><title>`0x7FFB120A43EA (1 samples, 0.54%)</title><rect x="3.2609%" y="533" width="0.5435%" height="15" fill="rgb(218,30,26)" fg:x="6" fg:w="1"/><text x="3.5109%" y="543.50"></text></g><g><title>`0x7FFB120A5157 (1 samples, 0.54%)</title><rect x="3.2609%" y="517" width="0.5435%" height="15" fill="rgb(220,122,19)" fg:x="6" fg:w="1"/><text x="3.5109%" y="527.50"></text></g><g><title>`0x7FFB1212D6C4 (1 samples, 0.54%)</title><rect x="3.2609%" y="501" width="0.5435%" height="15" fill="rgb(250,228,42)" fg:x="6" fg:w="1"/><text x="3.5109%" y="511.50"></text></g><g><title>`0x7FFB120EEC38 (6 samples, 3.26%)</title><rect x="1.0870%" y="597" width="3.2609%" height="15" fill="rgb(240,193,28)" fg:x="2" fg:w="6"/><text x="1.3370%" y="607.50">`0x..</text></g><g><title>`0x7FFB120C27DA (3 samples, 1.63%)</title><rect x="2.7174%" y="581" width="1.6304%" height="15" fill="rgb(216,20,37)" fg:x="5" fg:w="3"/><text x="2.9674%" y="591.50"></text></g><g><title>`0x7FFB120C33D7 (2 samples, 1.09%)</title><rect x="3.2609%" y="565" width="1.0870%" height="15" fill="rgb(206,188,39)" fg:x="6" fg:w="2"/><text x="3.5109%" y="575.50"></text></g><g><title>`0x7FFB120A8BCE (1 samples, 0.54%)</title><rect x="3.8043%" y="549" width="0.5435%" height="15" fill="rgb(217,207,13)" fg:x="7" fg:w="1"/><text x="4.0543%" y="559.50"></text></g><g><title>`0x7FFB120BB3C7 (1 samples, 0.54%)</title><rect x="3.8043%" y="533" width="0.5435%" height="15" fill="rgb(231,73,38)" fg:x="7" fg:w="1"/><text x="4.0543%" y="543.50"></text></g><g><title>`0x7FFB120BB73C (1 samples, 0.54%)</title><rect x="3.8043%" y="517" width="0.5435%" height="15" fill="rgb(225,20,46)" fg:x="7" fg:w="1"/><text x="4.0543%" y="527.50"></text></g><g><title>`0x7FFB120EEED1 (1 samples, 0.54%)</title><rect x="4.3478%" y="565" width="0.5435%" height="15" fill="rgb(210,31,41)" fg:x="8" fg:w="1"/><text x="4.5978%" y="575.50"></text></g><g><title>`0x7FFB120EFFD2 (1 samples, 0.54%)</title><rect x="4.3478%" y="549" width="0.5435%" height="15" fill="rgb(221,200,47)" fg:x="8" fg:w="1"/><text x="4.5978%" y="559.50"></text></g><g><title>`0x7FFB120A15D0 (1 samples, 0.54%)</title><rect x="4.3478%" y="533" width="0.5435%" height="15" fill="rgb(226,26,5)" fg:x="8" fg:w="1"/><text x="4.5978%" y="543.50"></text></g><g><title>`0x7FFB120A17B1 (1 samples, 0.54%)</title><rect x="4.3478%" y="517" width="0.5435%" height="15" fill="rgb(249,33,26)" fg:x="8" fg:w="1"/><text x="4.5978%" y="527.50"></text></g><g><title>`0x7FFB120FC6D0 (1 samples, 0.54%)</title><rect x="4.3478%" y="501" width="0.5435%" height="15" fill="rgb(235,183,28)" fg:x="8" fg:w="1"/><text x="4.5978%" y="511.50"></text></g><g><title>`0x7FFB1212B853 (1 samples, 0.54%)</title><rect x="4.3478%" y="485" width="0.5435%" height="15" fill="rgb(221,5,38)" fg:x="8" fg:w="1"/><text x="4.5978%" y="495.50"></text></g><g><title>`0x7FFB1212BD59 (1 samples, 0.54%)</title><rect x="4.3478%" y="469" width="0.5435%" height="15" fill="rgb(247,18,42)" fg:x="8" fg:w="1"/><text x="4.5978%" y="479.50"></text></g><g><title>`0x7FFB1212BE50 (1 samples, 0.54%)</title><rect x="4.3478%" y="453" width="0.5435%" height="15" fill="rgb(241,131,45)" fg:x="8" fg:w="1"/><text x="4.5978%" y="463.50"></text></g><g><title>`0x7FFB121AB040 (1 samples, 0.54%)</title><rect x="4.3478%" y="437" width="0.5435%" height="15" fill="rgb(249,31,29)" fg:x="8" fg:w="1"/><text x="4.5978%" y="447.50"></text></g><g><title>`0x7FFB120ECC1F (1 samples, 0.54%)</title><rect x="4.3478%" y="421" width="0.5435%" height="15" fill="rgb(225,111,53)" fg:x="8" fg:w="1"/><text x="4.5978%" y="431.50"></text></g><g><title>`0x7FFB121AB215 (1 samples, 0.54%)</title><rect x="4.3478%" y="405" width="0.5435%" height="15" fill="rgb(238,160,17)" fg:x="8" fg:w="1"/><text x="4.5978%" y="415.50"></text></g><g><title>`0x7FFB121AB47E (1 samples, 0.54%)</title><rect x="4.3478%" y="389" width="0.5435%" height="15" fill="rgb(214,148,48)" fg:x="8" fg:w="1"/><text x="4.5978%" y="399.50"></text></g><g><title>`0x7FFB120EF6E6 (3 samples, 1.63%)</title><rect x="4.3478%" y="581" width="1.6304%" height="15" fill="rgb(232,36,49)" fg:x="8" fg:w="3"/><text x="4.5978%" y="591.50"></text></g><g><title>`0x7FFB120EF026 (2 samples, 1.09%)</title><rect x="4.8913%" y="565" width="1.0870%" height="15" fill="rgb(209,103,24)" fg:x="9" fg:w="2"/><text x="5.1413%" y="575.50"></text></g><g><title>`0x7FFB120EF207 (2 samples, 1.09%)</title><rect x="4.8913%" y="549" width="1.0870%" height="15" fill="rgb(229,88,8)" fg:x="9" fg:w="2"/><text x="5.1413%" y="559.50"></text></g><g><title>`0x7FFB120EF37B (2 samples, 1.09%)</title><rect x="4.8913%" y="533" width="1.0870%" height="15" fill="rgb(213,181,19)" fg:x="9" fg:w="2"/><text x="5.1413%" y="543.50"></text></g><g><title>`0x7FFB1212D784 (2 samples, 1.09%)</title><rect x="4.8913%" y="517" width="1.0870%" height="15" fill="rgb(254,191,54)" fg:x="9" fg:w="2"/><text x="5.1413%" y="527.50"></text></g><g><title>`0x7FFB120EFC9C (1 samples, 0.54%)</title><rect x="5.9783%" y="565" width="0.5435%" height="15" fill="rgb(241,83,37)" fg:x="11" fg:w="1"/><text x="6.2283%" y="575.50"></text></g><g><title>`0x7FFB1212D644 (1 samples, 0.54%)</title><rect x="5.9783%" y="549" width="0.5435%" height="15" fill="rgb(233,36,39)" fg:x="11" fg:w="1"/><text x="6.2283%" y="559.50"></text></g><g><title>`0x7FFB120A4AAA (1 samples, 0.54%)</title><rect x="6.5217%" y="549" width="0.5435%" height="15" fill="rgb(226,3,54)" fg:x="12" fg:w="1"/><text x="6.7717%" y="559.50"></text></g><g><title>`0x7FFB120A4D42 (1 samples, 0.54%)</title><rect x="6.5217%" y="533" width="0.5435%" height="15" fill="rgb(245,192,40)" fg:x="12" fg:w="1"/><text x="6.7717%" y="543.50"></text></g><g><title>`0x7FFB1212D4E4 (1 samples, 0.54%)</title><rect x="6.5217%" y="517" width="0.5435%" height="15" fill="rgb(238,167,29)" fg:x="12" fg:w="1"/><text x="6.7717%" y="527.50"></text></g><g><title>`0x7FFB120E31BA (12 samples, 6.52%)</title><rect x="1.0870%" y="645" width="6.5217%" height="15" fill="rgb(232,182,51)" fg:x="2" fg:w="12"/><text x="1.3370%" y="655.50">`0x7FFB12..</text></g><g><title>`0x7FFB120F2230 (12 samples, 6.52%)</title><rect x="1.0870%" y="629" width="6.5217%" height="15" fill="rgb(231,60,39)" fg:x="2" fg:w="12"/><text x="1.3370%" y="639.50">`0x7FFB12..</text></g><g><title>`0x7FFB120EEBE3 (12 samples, 6.52%)</title><rect x="1.0870%" y="613" width="6.5217%" height="15" fill="rgb(208,69,12)" fg:x="2" fg:w="12"/><text x="1.3370%" y="623.50">`0x7FFB12..</text></g><g><title>`0x7FFB120EEC70 (6 samples, 3.26%)</title><rect x="4.3478%" y="597" width="3.2609%" height="15" fill="rgb(235,93,37)" fg:x="8" fg:w="6"/><text x="4.5978%" y="607.50">`0x..</text></g><g><title>`0x7FFB120EF7B0 (3 samples, 1.63%)</title><rect x="5.9783%" y="581" width="1.6304%" height="15" fill="rgb(213,116,39)" fg:x="11" fg:w="3"/><text x="6.2283%" y="591.50"></text></g><g><title>`0x7FFB120EFD53 (2 samples, 1.09%)</title><rect x="6.5217%" y="565" width="1.0870%" height="15" fill="rgb(222,207,29)" fg:x="12" fg:w="2"/><text x="6.7717%" y="575.50"></text></g><g><title>`0x7FFB120A4C14 (1 samples, 0.54%)</title><rect x="7.0652%" y="549" width="0.5435%" height="15" fill="rgb(206,96,30)" fg:x="13" fg:w="1"/><text x="7.3152%" y="559.50"></text></g><g><title>`0x7FFB120A79D2 (1 samples, 0.54%)</title><rect x="7.0652%" y="533" width="0.5435%" height="15" fill="rgb(218,138,4)" fg:x="13" fg:w="1"/><text x="7.3152%" y="543.50"></text></g><g><title>`0x7FFB120A5096 (1 samples, 0.54%)</title><rect x="7.0652%" y="517" width="0.5435%" height="15" fill="rgb(250,191,14)" fg:x="13" fg:w="1"/><text x="7.3152%" y="527.50"></text></g><g><title>`0x7FFB0FE2E4C3 (1 samples, 0.54%)</title><rect x="7.6087%" y="629" width="0.5435%" height="15" fill="rgb(239,60,40)" fg:x="14" fg:w="1"/><text x="7.8587%" y="639.50"></text></g><g><title>simulate.exe`pre_c_initialization() (1 samples, 0.54%)</title><rect x="7.6087%" y="613" width="0.5435%" height="15" fill="rgb(206,27,48)" fg:x="14" fg:w="1"/><text x="7.8587%" y="623.50"></text></g><g><title>`0x7FFB0FE14518 (1 samples, 0.54%)</title><rect x="7.6087%" y="597" width="0.5435%" height="15" fill="rgb(225,35,8)" fg:x="14" fg:w="1"/><text x="7.8587%" y="607.50"></text></g><g><title>`0x7FFB0FE3205C (1 samples, 0.54%)</title><rect x="7.6087%" y="581" width="0.5435%" height="15" fill="rgb(250,213,24)" fg:x="14" fg:w="1"/><text x="7.8587%" y="591.50"></text></g><g><title>`0x7FFB120EFA12 (2 samples, 1.09%)</title><rect x="8.1522%" y="485" width="1.0870%" height="15" fill="rgb(247,123,22)" fg:x="15" fg:w="2"/><text x="8.4022%" y="495.50"></text></g><g><title>`0x7FFB120EF207 (2 samples, 1.09%)</title><rect x="8.1522%" y="469" width="1.0870%" height="15" fill="rgb(231,138,38)" fg:x="15" fg:w="2"/><text x="8.4022%" y="479.50"></text></g><g><title>`0x7FFB120EF37B (2 samples, 1.09%)</title><rect x="8.1522%" y="453" width="1.0870%" height="15" fill="rgb(231,145,46)" fg:x="15" fg:w="2"/><text x="8.4022%" y="463.50"></text></g><g><title>`0x7FFB1212D784 (2 samples, 1.09%)</title><rect x="8.1522%" y="437" width="1.0870%" height="15" fill="rgb(251,118,11)" fg:x="15" fg:w="2"/><text x="8.4022%" y="447.50"></text></g><g><title>`0x7FFB120EFC9C (1 samples, 0.54%)</title><rect x="9.2391%" y="469" width="0.5435%" height="15" fill="rgb(217,147,25)" fg:x="17" fg:w="1"/><text x="9.4891%" y="479.50"></text></g><g><title>`0x7FFB1212D644 (1 samples, 0.54%)</title><rect x="9.2391%" y="453" width="0.5435%" height="15" fill="rgb(247,81,37)" fg:x="17" fg:w="1"/><text x="9.4891%" y="463.50"></text></g><g><title>`0x7FFB120EFD53 (1 samples, 0.54%)</title><rect x="9.7826%" y="469" width="0.5435%" height="15" fill="rgb(209,12,38)" fg:x="18" fg:w="1"/><text x="10.0326%" y="479.50"></text></g><g><title>`0x7FFB120A4C14 (1 samples, 0.54%)</title><rect x="9.7826%" y="453" width="0.5435%" height="15" fill="rgb(227,1,9)" fg:x="18" fg:w="1"/><text x="10.0326%" y="463.50"></text></g><g><title>`0x7FFB120A79D2 (1 samples, 0.54%)</title><rect x="9.7826%" y="437" width="0.5435%" height="15" fill="rgb(248,47,43)" fg:x="18" fg:w="1"/><text x="10.0326%" y="447.50"></text></g><g><title>`0x7FFB120A5082 (1 samples, 0.54%)</title><rect x="9.7826%" y="421" width="0.5435%" height="15" fill="rgb(221,10,30)" fg:x="18" fg:w="1"/><text x="10.0326%" y="431.50"></text></g><g><title>`0x7FFB1212D9E4 (1 samples, 0.54%)</title><rect x="9.7826%" y="405" width="0.5435%" height="15" fill="rgb(210,229,1)" fg:x="18" fg:w="1"/><text x="10.0326%" y="415.50"></text></g><g><title>`0x7FFB0FE305A2 (5 samples, 2.72%)</title><rect x="8.1522%" y="613" width="2.7174%" height="15" fill="rgb(222,148,37)" fg:x="15" fg:w="5"/><text x="8.4022%" y="623.50">`0..</text></g><g><title>`0x7FFB0FE319C7 (5 samples, 2.72%)</title><rect x="8.1522%" y="597" width="2.7174%" height="15" fill="rgb(234,67,33)" fg:x="15" fg:w="5"/><text x="8.4022%" y="607.50">`0..</text></g><g><title>`0x7FFB0FE2C050 (5 samples, 2.72%)</title><rect x="8.1522%" y="581" width="2.7174%" height="15" fill="rgb(247,98,35)" fg:x="15" fg:w="5"/><text x="8.4022%" y="591.50">`0..</text></g><g><title>`0x7FFB0FA63322 (5 samples, 2.72%)</title><rect x="8.1522%" y="565" width="2.7174%" height="15" fill="rgb(247,138,52)" fg:x="15" fg:w="5"/><text x="8.4022%" y="575.50">`0..</text></g><g><title>`0x7FFB120A6AF4 (5 samples, 2.72%)</title><rect x="8.1522%" y="549" width="2.7174%" height="15" fill="rgb(213,79,30)" fg:x="15" fg:w="5"/><text x="8.4022%" y="559.50">`0..</text></g><g><title>`0x7FFB120A73E4 (5 samples, 2.72%)</title><rect x="8.1522%" y="533" width="2.7174%" height="15" fill="rgb(246,177,23)" fg:x="15" fg:w="5"/><text x="8.4022%" y="543.50">`0..</text></g><g><title>`0x7FFB120AFB53 (5 samples, 2.72%)</title><rect x="8.1522%" y="517" width="2.7174%" height="15" fill="rgb(230,62,27)" fg:x="15" fg:w="5"/><text x="8.4022%" y="527.50">`0..</text></g><g><title>`0x7FFB120EED1F (5 samples, 2.72%)</title><rect x="8.1522%" y="501" width="2.7174%" height="15" fill="rgb(216,154,8)" fg:x="15" fg:w="5"/><text x="8.4022%" y="511.50">`0..</text></g><g><title>`0x7FFB120EFA80 (3 samples, 1.63%)</title><rect x="9.2391%" y="485" width="1.6304%" height="15" fill="rgb(244,35,45)" fg:x="17" fg:w="3"/><text x="9.4891%" y="495.50"></text></g><g><title>`0x7FFB120EFD71 (1 samples, 0.54%)</title><rect x="10.3261%" y="469" width="0.5435%" height="15" fill="rgb(251,115,12)" fg:x="19" fg:w="1"/><text x="10.5761%" y="479.50"></text></g><g><title>`0x7FFB1212D1C4 (1 samples, 0.54%)</title><rect x="10.3261%" y="453" width="0.5435%" height="15" fill="rgb(240,54,50)" fg:x="19" fg:w="1"/><text x="10.5761%" y="463.50"></text></g><g><title>`0x7FFB0FE3045F (6 samples, 3.26%)</title><rect x="8.1522%" y="629" width="3.2609%" height="15" fill="rgb(233,84,52)" fg:x="15" fg:w="6"/><text x="8.4022%" y="639.50">`0x..</text></g><g><title>`0x7FFB0FE305BC (1 samples, 0.54%)</title><rect x="10.8696%" y="613" width="0.5435%" height="15" fill="rgb(207,117,47)" fg:x="20" fg:w="1"/><text x="11.1196%" y="623.50"></text></g><g><title>`0x7FFB11FAE3BB (1 samples, 0.54%)</title><rect x="10.8696%" y="597" width="0.5435%" height="15" fill="rgb(249,43,39)" fg:x="20" fg:w="1"/><text x="11.1196%" y="607.50"></text></g><g><title>`0x7FFB120EDA8D (1 samples, 0.54%)</title><rect x="10.8696%" y="581" width="0.5435%" height="15" fill="rgb(209,38,44)" fg:x="20" fg:w="1"/><text x="11.1196%" y="591.50"></text></g><g><title>`0x7FFB120EDCDA (1 samples, 0.54%)</title><rect x="10.8696%" y="565" width="0.5435%" height="15" fill="rgb(236,212,23)" fg:x="20" fg:w="1"/><text x="11.1196%" y="575.50"></text></g><g><title>`0x7FFB120A9A1D (1 samples, 0.54%)</title><rect x="10.8696%" y="549" width="0.5435%" height="15" fill="rgb(242,79,21)" fg:x="20" fg:w="1"/><text x="11.1196%" y="559.50"></text></g><g><title>`0x7FFB0F0A226F (1 samples, 0.54%)</title><rect x="10.8696%" y="533" width="0.5435%" height="15" fill="rgb(211,96,35)" fg:x="20" fg:w="1"/><text x="11.1196%" y="543.50"></text></g><g><title>`0x7FFB1212D1C4 (1 samples, 0.54%)</title><rect x="10.8696%" y="517" width="0.5435%" height="15" fill="rgb(253,215,40)" fg:x="20" fg:w="1"/><text x="11.1196%" y="527.50"></text></g><g><title>simulate.exe`std::rt::lang_start_internal::closure$1 (1 samples, 0.54%)</title><rect x="11.4130%" y="517" width="0.5435%" height="15" fill="rgb(211,81,21)" fg:x="21" fg:w="1"/><text x="11.6630%" y="527.50"></text></g><g><title>simulate.exe`std::rt::init (1 samples, 0.54%)</title><rect x="11.4130%" y="501" width="0.5435%" height="15" fill="rgb(208,190,38)" fg:x="21" fg:w="1"/><text x="11.6630%" y="511.50"></text></g><g><title>simulate.exe`std::thread::Thread::new_main (1 samples, 0.54%)</title><rect x="11.4130%" y="485" width="0.5435%" height="15" fill="rgb(235,213,38)" fg:x="21" fg:w="1"/><text x="11.6630%" y="495.50"></text></g><g><title>simulate.exe`std::sys::pal::windows::thread::Thread::set_name (1 samples, 0.54%)</title><rect x="11.4130%" y="469" width="0.5435%" height="15" fill="rgb(237,122,38)" fg:x="21" fg:w="1"/><text x="11.6630%" y="479.50"></text></g><g><title>simulate.exe`core::ptr::drop_in_place (1 samples, 0.54%)</title><rect x="11.4130%" y="453" width="0.5435%" height="15" fill="rgb(244,218,35)" fg:x="21" fg:w="1"/><text x="11.6630%" y="463.50"></text></g><g><title>simulate.exe`core::ptr::drop_in_place (1 samples, 0.54%)</title><rect x="11.4130%" y="437" width="0.5435%" height="15" fill="rgb(240,68,47)" fg:x="21" fg:w="1"/><text x="11.6630%" y="447.50"></text></g><g><title>simulate.exe`alloc::raw_vec::impl$4::drop (1 samples, 0.54%)</title><rect x="11.4130%" y="421" width="0.5435%" height="15" fill="rgb(210,16,53)" fg:x="21" fg:w="1"/><text x="11.6630%" y="431.50"></text></g><g><title>simulate.exe`alloc::raw_vec::RawVec::current_memory (1 samples, 0.54%)</title><rect x="11.4130%" y="405" width="0.5435%" height="15" fill="rgb(235,124,12)" fg:x="21" fg:w="1"/><text x="11.6630%" y="415.50"></text></g><g><title>simulate.exe`std::sys::pal::windows::c::SetThreadDescription::load (1 samples, 0.54%)</title><rect x="11.4130%" y="389" width="0.5435%" height="15" fill="rgb(224,169,11)" fg:x="21" fg:w="1"/><text x="11.6630%" y="399.50"></text></g><g><title>simulate.exe`std::sys::pal::windows::c::SetThreadDescription::load_from_module (1 samples, 0.54%)</title><rect x="11.4130%" y="373" width="0.5435%" height="15" fill="rgb(250,166,2)" fg:x="21" fg:w="1"/><text x="11.6630%" y="383.50"></text></g><g><title>simulate.exe`core::option::Option::and_then (1 samples, 0.54%)</title><rect x="11.4130%" y="357" width="0.5435%" height="15" fill="rgb(242,216,29)" fg:x="21" fg:w="1"/><text x="11.6630%" y="367.50"></text></g><g><title>`0x7FFB0FA5C366 (1 samples, 0.54%)</title><rect x="11.4130%" y="341" width="0.5435%" height="15" fill="rgb(230,116,27)" fg:x="21" fg:w="1"/><text x="11.6630%" y="351.50"></text></g><g><title>`0x7FFB0FA5C3DA (1 samples, 0.54%)</title><rect x="11.4130%" y="325" width="0.5435%" height="15" fill="rgb(228,99,48)" fg:x="21" fg:w="1"/><text x="11.6630%" y="335.50"></text></g><g><title>`0x7FFB120A688C (1 samples, 0.54%)</title><rect x="11.4130%" y="309" width="0.5435%" height="15" fill="rgb(253,11,6)" fg:x="21" fg:w="1"/><text x="11.6630%" y="319.50"></text></g><g><title>`0x7FFB120A6977 (1 samples, 0.54%)</title><rect x="11.4130%" y="293" width="0.5435%" height="15" fill="rgb(247,143,39)" fg:x="21" fg:w="1"/><text x="11.6630%" y="303.50"></text></g><g><title>`0x7FFB120ADB7C (1 samples, 0.54%)</title><rect x="11.4130%" y="277" width="0.5435%" height="15" fill="rgb(236,97,10)" fg:x="21" fg:w="1"/><text x="11.6630%" y="287.50"></text></g><g><title>`0x7FFB120AA3AC (1 samples, 0.54%)</title><rect x="11.4130%" y="261" width="0.5435%" height="15" fill="rgb(233,208,19)" fg:x="21" fg:w="1"/><text x="11.6630%" y="271.50"></text></g><g><title>`0x7FFB120AA613 (1 samples, 0.54%)</title><rect x="11.4130%" y="245" width="0.5435%" height="15" fill="rgb(216,164,2)" fg:x="21" fg:w="1"/><text x="11.6630%" y="255.50"></text></g><g><title>`0x7FFB120AABB2 (1 samples, 0.54%)</title><rect x="11.4130%" y="229" width="0.5435%" height="15" fill="rgb(220,129,5)" fg:x="21" fg:w="1"/><text x="11.6630%" y="239.50"></text></g><g><title>simulate.exe`core::iter::traits::iterator::Iterator::collect&lt;std::env::Args,alloc::vec::Vec&lt;alloc::string::String,alloc::alloc::Global&gt; &gt; (1 samples, 0.54%)</title><rect x="11.9565%" y="421" width="0.5435%" height="15" fill="rgb(242,17,10)" fg:x="22" fg:w="1"/><text x="12.2065%" y="431.50"></text></g><g><title>simulate.exe`alloc::vec::impl$15::from_iter&lt;alloc::string::String,std::env::Args&gt; (1 samples, 0.54%)</title><rect x="11.9565%" y="405" width="0.5435%" height="15" fill="rgb(242,107,0)" fg:x="22" fg:w="1"/><text x="12.2065%" y="415.50"></text></g><g><title>simulate.exe`alloc::vec::spec_from_iter::impl$0::from_iter&lt;alloc::string::String,std::env::Args&gt; (1 samples, 0.54%)</title><rect x="11.9565%" y="389" width="0.5435%" height="15" fill="rgb(251,28,31)" fg:x="22" fg:w="1"/><text x="12.2065%" y="399.50"></text></g><g><title>simulate.exe`alloc::vec::spec_from_iter_nested::impl$0::from_iter&lt;alloc::string::String,std::env::Args&gt; (1 samples, 0.54%)</title><rect x="11.9565%" y="373" width="0.5435%" height="15" fill="rgb(233,223,10)" fg:x="22" fg:w="1"/><text x="12.2065%" y="383.50"></text></g><g><title>simulate.exe`alloc::vec::spec_extend::impl$0::spec_extend&lt;alloc::string::String,std::env::Args,alloc::alloc::Global&gt;(alloc::vec::Vec (1 samples, 0.54%)</title><rect x="11.9565%" y="357" width="0.5435%" height="15" fill="rgb(215,21,27)" fg:x="22" fg:w="1"/><text x="12.2065%" y="367.50"></text></g><g><title>simulate.exe`alloc::vec::Vec&lt;alloc::string::String,alloc::alloc::Global&gt;::extend_desugared&lt;alloc::string::String,alloc::alloc::Global,std::env::Args&gt; (1 samples, 0.54%)</title><rect x="11.9565%" y="341" width="0.5435%" height="15" fill="rgb(232,23,21)" fg:x="22" fg:w="1"/><text x="12.2065%" y="351.50"></text></g><g><title>simulate.exe`core::ptr::drop_in_place&lt;std::env::Args&gt; (1 samples, 0.54%)</title><rect x="11.9565%" y="325" width="0.5435%" height="15" fill="rgb(244,5,23)" fg:x="22" fg:w="1"/><text x="12.2065%" y="335.50"></text></g><g><title>simulate.exe`core::ptr::drop_in_place&lt;std::env::ArgsOs&gt; (1 samples, 0.54%)</title><rect x="11.9565%" y="309" width="0.5435%" height="15" fill="rgb(226,81,46)" fg:x="22" fg:w="1"/><text x="12.2065%" y="319.50"></text></g><g><title>simulate.exe`core::ptr::drop_in_place&lt;std::sys::pal::windows::args::Args&gt; (1 samples, 0.54%)</title><rect x="11.9565%" y="293" width="0.5435%" height="15" fill="rgb(247,70,30)" fg:x="22" fg:w="1"/><text x="12.2065%" y="303.50"></text></g><g><title>simulate.exe`core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;std::ffi::os_str::OsString,alloc::alloc::Global&gt; &gt;(alloc::vec::into_iter::IntoIter (1 samples, 0.54%)</title><rect x="11.9565%" y="277" width="0.5435%" height="15" fill="rgb(212,68,19)" fg:x="22" fg:w="1"/><text x="12.2065%" y="287.50"></text></g><g><title>simulate.exe`alloc::vec::into_iter::impl$15::drop&lt;std::ffi::os_str::OsString,alloc::alloc::Global&gt;(alloc::vec::into_iter::IntoIter (1 samples, 0.54%)</title><rect x="11.9565%" y="261" width="0.5435%" height="15" fill="rgb(240,187,13)" fg:x="22" fg:w="1"/><text x="12.2065%" y="271.50"></text></g><g><title>simulate.exe`digest::core_api::wrapper::impl$11::finalize_xof&lt;sha3::Shake256Core&gt;(digest::core_api::wrapper::CoreWrapper (1 samples, 0.54%)</title><rect x="12.5000%" y="373" width="0.5435%" height="15" fill="rgb(223,113,26)" fg:x="23" fg:w="1"/><text x="12.7500%" y="383.50"></text></g><g><title>simulate.exe`sha3::impl$116::finalize_xof_core(sha3::Shake256Core*, block_buffer::BlockBuffer&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt (1 samples, 0.54%)</title><rect x="12.5000%" y="357" width="0.5435%" height="15" fill="rgb(206,192,2)" fg:x="23" fg:w="1"/><text x="12.7500%" y="367.50"></text></g><g><title>simulate.exe`sha3::state::Sha3State::absorb_block(ref$&lt;slice2$ (1 samples, 0.54%)</title><rect x="12.5000%" y="341" width="0.5435%" height="15" fill="rgb(241,108,4)" fg:x="23" fg:w="1"/><text x="12.7500%" y="351.50"></text></g><g><title>simulate.exe`keccak::p1600 (1 samples, 0.54%)</title><rect x="12.5000%" y="325" width="0.5435%" height="15" fill="rgb(247,173,49)" fg:x="23" fg:w="1"/><text x="12.7500%" y="335.50"></text></g><g><title>simulate.exe`keccak::keccak_p&lt;u64&gt; (1 samples, 0.54%)</title><rect x="12.5000%" y="309" width="0.5435%" height="15" fill="rgb(224,114,35)" fg:x="23" fg:w="1"/><text x="12.7500%" y="319.50"></text></g><g><title>simulate.exe`kemkem::crypt::j(alloc::vec::Vec (3 samples, 1.63%)</title><rect x="12.5000%" y="389" width="1.6304%" height="15" fill="rgb(245,159,27)" fg:x="23" fg:w="3"/><text x="12.7500%" y="399.50"></text></g><g><title>simulate.exe`digest::core_api::wrapper::impl$7::update&lt;sha3::Shake256Core&gt;(digest::core_api::wrapper::CoreWrapper&lt;sha3::Shake256Core&gt;*, ref$&lt;slice2$ (2 samples, 1.09%)</title><rect x="13.0435%" y="373" width="1.0870%" height="15" fill="rgb(245,172,44)" fg:x="24" fg:w="2"/><text x="13.2935%" y="383.50"></text></g><g><title>simulate.exe`block_buffer::BlockBuffer&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,block_buffer::Eager&gt;::digest_blocks&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,block_buffer::Eager,digest::core_api::wrapper::impl$7::update::closure_env$0&lt;sha3::Shake256Core&gt; &gt;(ref$&lt;slice2$&lt;u8&gt; &gt;, digest::core_api::wrapper::impl$7::update::closure_env$0 (2 samples, 1.09%)</title><rect x="13.0435%" y="357" width="1.0870%" height="15" fill="rgb(236,23,11)" fg:x="24" fg:w="2"/><text x="13.2935%" y="367.50"></text></g><g><title>simulate.exe`digest::core_api::wrapper::impl$7::update::closure$0&lt;sha3::Shake256Core&gt;(digest::core_api::wrapper::impl$7::update::closure_env$0&lt;sha3::Shake256Core&gt;*, ref$&lt;slice2$&lt;generic_array::GenericArray&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt (2 samples, 1.09%)</title><rect x="13.0435%" y="341" width="1.0870%" height="15" fill="rgb(205,117,38)" fg:x="24" fg:w="2"/><text x="13.2935%" y="351.50"></text></g><g><title>simulate.exe`sha3::impl$115::update_blocks(sha3::Shake256Core*, ref$&lt;slice2$&lt;generic_array::GenericArray&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt (2 samples, 1.09%)</title><rect x="13.0435%" y="325" width="1.0870%" height="15" fill="rgb(237,72,25)" fg:x="24" fg:w="2"/><text x="13.2935%" y="335.50"></text></g><g><title>simulate.exe`keccak::p1600 (2 samples, 1.09%)</title><rect x="13.0435%" y="309" width="1.0870%" height="15" fill="rgb(244,70,9)" fg:x="24" fg:w="2"/><text x="13.2935%" y="319.50"></text></g><g><title>simulate.exe`keccak::keccak_p&lt;u64&gt; (2 samples, 1.09%)</title><rect x="13.0435%" y="293" width="1.0870%" height="15" fill="rgb(217,125,39)" fg:x="24" fg:w="2"/><text x="13.2935%" y="303.50"></text></g><g><title>`0x7FFAF0C013AF (1 samples, 0.54%)</title><rect x="13.5870%" y="277" width="0.5435%" height="15" fill="rgb(235,36,10)" fg:x="25" fg:w="1"/><text x="13.8370%" y="287.50"></text></g><g><title>simulate.exe`kemkem::ring::Ring::inverse_ntt (1 samples, 0.54%)</title><rect x="14.1304%" y="373" width="0.5435%" height="15" fill="rgb(251,123,47)" fg:x="26" fg:w="1"/><text x="14.3804%" y="383.50"></text></g><g><title>simulate.exe`kemkem::kpke::decrypt&lt;kemkem::params::MlKem512&gt;(kemkem::ring::Vector&lt;2&gt;, tuple$&lt;kemkem::ring::Compressed&lt;10,kemkem::ring::Vector&lt;2&gt; &gt;,kemkem::ring::Compressed (2 samples, 1.09%)</title><rect x="14.1304%" y="389" width="1.0870%" height="15" fill="rgb(221,13,13)" fg:x="26" fg:w="2"/><text x="14.3804%" y="399.50"></text></g><g><title>simulate.exe`kemkem::ring::Vector&lt;2&gt;::ntt&lt;2&gt;(kemkem::ring::Vector (1 samples, 0.54%)</title><rect x="14.6739%" y="373" width="0.5435%" height="15" fill="rgb(238,131,9)" fg:x="27" fg:w="1"/><text x="14.9239%" y="383.50"></text></g><g><title>simulate.exe`kemkem::ring::Ring::ntt (1 samples, 0.54%)</title><rect x="14.6739%" y="357" width="0.5435%" height="15" fill="rgb(211,50,8)" fg:x="27" fg:w="1"/><text x="14.9239%" y="367.50"></text></g><g><title>simulate.exe`kemkem::crypt::prf&lt;2&gt; (3 samples, 1.63%)</title><rect x="15.2174%" y="373" width="1.6304%" height="15" fill="rgb(245,182,24)" fg:x="28" fg:w="3"/><text x="15.4674%" y="383.50"></text></g><g><title>simulate.exe`digest::core_api::xof_reader::impl$1::read&lt;sha3::Shake256ReaderCore&gt;(digest::core_api::xof_reader::XofReaderCoreWrapper&lt;sha3::Shake256ReaderCore&gt;*, ref_mut$&lt;slice2$ (3 samples, 1.63%)</title><rect x="15.2174%" y="357" width="1.6304%" height="15" fill="rgb(242,14,37)" fg:x="28" fg:w="3"/><text x="15.4674%" y="367.50"></text></g><g><title>simulate.exe`block_buffer::BlockBuffer&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,block_buffer::Eager&gt;::set_data&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,digest::core_api::xof_reader::impl$1::read::closure_env$0&lt;sha3::Shake256ReaderCore&gt; &gt;(ref_mut$&lt;slice2$&lt;u8&gt; &gt;, digest::core_api::xof_reader::impl$1::read::closure_env$0 (3 samples, 1.63%)</title><rect x="15.2174%" y="341" width="1.6304%" height="15" fill="rgb(246,228,12)" fg:x="28" fg:w="3"/><text x="15.4674%" y="351.50"></text></g><g><title>simulate.exe`digest::core_api::xof_reader::impl$1::read::closure$0&lt;sha3::Shake256ReaderCore&gt;(digest::core_api::xof_reader::impl$1::read::closure_env$0&lt;sha3::Shake256ReaderCore&gt;*, ref_mut$&lt;slice2$&lt;generic_array::GenericArray&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt (3 samples, 1.63%)</title><rect x="15.2174%" y="325" width="1.6304%" height="15" fill="rgb(213,55,15)" fg:x="28" fg:w="3"/><text x="15.4674%" y="335.50"></text></g><g><title>simulate.exe`sha3::impl$122::read_block (3 samples, 1.63%)</title><rect x="15.2174%" y="309" width="1.6304%" height="15" fill="rgb(209,9,3)" fg:x="28" fg:w="3"/><text x="15.4674%" y="319.50"></text></g><g><title>simulate.exe`sha3::state::Sha3State::permute (3 samples, 1.63%)</title><rect x="15.2174%" y="293" width="1.6304%" height="15" fill="rgb(230,59,30)" fg:x="28" fg:w="3"/><text x="15.4674%" y="303.50"></text></g><g><title>simulate.exe`keccak::p1600 (3 samples, 1.63%)</title><rect x="15.2174%" y="277" width="1.6304%" height="15" fill="rgb(209,121,21)" fg:x="28" fg:w="3"/><text x="15.4674%" y="287.50"></text></g><g><title>simulate.exe`keccak::keccak_p&lt;u64&gt; (3 samples, 1.63%)</title><rect x="15.2174%" y="261" width="1.6304%" height="15" fill="rgb(220,109,13)" fg:x="28" fg:w="3"/><text x="15.4674%" y="271.50"></text></g><g><title>`0x7FFAF0C0132F (1 samples, 0.54%)</title><rect x="16.3043%" y="245" width="0.5435%" height="15" fill="rgb(232,18,1)" fg:x="30" fg:w="1"/><text x="16.5543%" y="255.50"></text></g><g><title>simulate.exe`digest::core_api::wrapper::impl$11::finalize_xof&lt;sha3::Shake256Core&gt;(digest::core_api::wrapper::CoreWrapper (1 samples, 0.54%)</title><rect x="16.8478%" y="357" width="0.5435%" height="15" fill="rgb(215,41,42)" fg:x="31" fg:w="1"/><text x="17.0978%" y="367.50"></text></g><g><title>simulate.exe`sha3::impl$116::finalize_xof_core(sha3::Shake256Core*, block_buffer::BlockBuffer&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt (1 samples, 0.54%)</title><rect x="16.8478%" y="341" width="0.5435%" height="15" fill="rgb(224,123,36)" fg:x="31" fg:w="1"/><text x="17.0978%" y="351.50"></text></g><g><title>simulate.exe`sha3::state::Sha3State::absorb_block(ref$&lt;slice2$ (1 samples, 0.54%)</title><rect x="16.8478%" y="325" width="0.5435%" height="15" fill="rgb(240,125,3)" fg:x="31" fg:w="1"/><text x="17.0978%" y="335.50"></text></g><g><title>simulate.exe`keccak::p1600 (1 samples, 0.54%)</title><rect x="16.8478%" y="309" width="0.5435%" height="15" fill="rgb(205,98,50)" fg:x="31" fg:w="1"/><text x="17.0978%" y="319.50"></text></g><g><title>simulate.exe`keccak::keccak_p&lt;u64&gt; (1 samples, 0.54%)</title><rect x="16.8478%" y="293" width="0.5435%" height="15" fill="rgb(205,185,37)" fg:x="31" fg:w="1"/><text x="17.0978%" y="303.50"></text></g><g><title>simulate.exe`kemkem::crypt::prf&lt;3&gt; (3 samples, 1.63%)</title><rect x="16.8478%" y="373" width="1.6304%" height="15" fill="rgb(238,207,15)" fg:x="31" fg:w="3"/><text x="17.0978%" y="383.50"></text></g><g><title>simulate.exe`digest::core_api::xof_reader::impl$1::read&lt;sha3::Shake256ReaderCore&gt;(digest::core_api::xof_reader::XofReaderCoreWrapper&lt;sha3::Shake256ReaderCore&gt;*, ref_mut$&lt;slice2$ (2 samples, 1.09%)</title><rect x="17.3913%" y="357" width="1.0870%" height="15" fill="rgb(213,199,42)" fg:x="32" fg:w="2"/><text x="17.6413%" y="367.50"></text></g><g><title>simulate.exe`block_buffer::BlockBuffer&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,block_buffer::Eager&gt;::set_data&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,digest::core_api::xof_reader::impl$1::read::closure_env$0&lt;sha3::Shake256ReaderCore&gt; &gt;(ref_mut$&lt;slice2$&lt;u8&gt; &gt;, digest::core_api::xof_reader::impl$1::read::closure_env$0 (2 samples, 1.09%)</title><rect x="17.3913%" y="341" width="1.0870%" height="15" fill="rgb(235,201,11)" fg:x="32" fg:w="2"/><text x="17.6413%" y="351.50"></text></g><g><title>simulate.exe`digest::core_api::xof_reader::impl$1::read::closure$0&lt;sha3::Shake256ReaderCore&gt;(digest::core_api::xof_reader::impl$1::read::closure_env$0&lt;sha3::Shake256ReaderCore&gt;*, ref_mut$&lt;slice2$&lt;generic_array::GenericArray&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt (2 samples, 1.09%)</title><rect x="17.3913%" y="325" width="1.0870%" height="15" fill="rgb(207,46,11)" fg:x="32" fg:w="2"/><text x="17.6413%" y="335.50"></text></g><g><title>simulate.exe`sha3::impl$122::read_block (2 samples, 1.09%)</title><rect x="17.3913%" y="309" width="1.0870%" height="15" fill="rgb(241,35,35)" fg:x="32" fg:w="2"/><text x="17.6413%" y="319.50"></text></g><g><title>simulate.exe`sha3::state::Sha3State::permute (2 samples, 1.09%)</title><rect x="17.3913%" y="293" width="1.0870%" height="15" fill="rgb(243,32,47)" fg:x="32" fg:w="2"/><text x="17.6413%" y="303.50"></text></g><g><title>simulate.exe`keccak::p1600 (2 samples, 1.09%)</title><rect x="17.3913%" y="277" width="1.0870%" height="15" fill="rgb(247,202,23)" fg:x="32" fg:w="2"/><text x="17.6413%" y="287.50"></text></g><g><title>simulate.exe`keccak::keccak_p&lt;u64&gt; (2 samples, 1.09%)</title><rect x="17.3913%" y="261" width="1.0870%" height="15" fill="rgb(219,102,11)" fg:x="32" fg:w="2"/><text x="17.6413%" y="271.50"></text></g><g><title>simulate.exe`kemkem::ring::Matrix&lt;2&gt;::left_vector_multiply&lt;2&gt;(kemkem::ring::Matrix&lt;2&gt;, kemkem::ring::Vector (1 samples, 0.54%)</title><rect x="18.4783%" y="373" width="0.5435%" height="15" fill="rgb(243,110,44)" fg:x="34" fg:w="1"/><text x="18.7283%" y="383.50"></text></g><g><title>simulate.exe`kemkem::ring::Ring::mult (1 samples, 0.54%)</title><rect x="18.4783%" y="357" width="0.5435%" height="15" fill="rgb(222,74,54)" fg:x="34" fg:w="1"/><text x="18.7283%" y="367.50"></text></g><g><title>simulate.exe`kemkem::util::bitrev7 (1 samples, 0.54%)</title><rect x="18.4783%" y="341" width="0.5435%" height="15" fill="rgb(216,99,12)" fg:x="34" fg:w="1"/><text x="18.7283%" y="351.50"></text></g><g><title>simulate.exe`core::iter::range::impl$6::next&lt;i32&gt;(core::ops::range::Range (1 samples, 0.54%)</title><rect x="18.4783%" y="325" width="0.5435%" height="15" fill="rgb(226,22,26)" fg:x="34" fg:w="1"/><text x="18.7283%" y="335.50"></text></g><g><title>simulate.exe`core::iter::range::impl$5::spec_next&lt;i32&gt;(core::ops::range::Range (1 samples, 0.54%)</title><rect x="18.4783%" y="309" width="0.5435%" height="15" fill="rgb(217,163,10)" fg:x="34" fg:w="1"/><text x="18.7283%" y="319.50"></text></g><g><title>simulate.exe`core::iter::range::impl$40::forward_unchecked (1 samples, 0.54%)</title><rect x="18.4783%" y="293" width="0.5435%" height="15" fill="rgb(213,25,53)" fg:x="34" fg:w="1"/><text x="18.7283%" y="303.50"></text></g><g><title>simulate.exe`core::num::impl$2::checked_add_unsigned (1 samples, 0.54%)</title><rect x="18.4783%" y="277" width="0.5435%" height="15" fill="rgb(252,105,26)" fg:x="34" fg:w="1"/><text x="18.7283%" y="287.50"></text></g><g><title>simulate.exe`kemkem::ring::Vector&lt;2&gt;::inner_product&lt;2&gt;(kemkem::ring::Vector&lt;2&gt;, kemkem::ring::Vector (1 samples, 0.54%)</title><rect x="19.0217%" y="373" width="0.5435%" height="15" fill="rgb(220,39,43)" fg:x="35" fg:w="1"/><text x="19.2717%" y="383.50"></text></g><g><title>simulate.exe`kemkem::ring::Ring::mult (1 samples, 0.54%)</title><rect x="19.0217%" y="357" width="0.5435%" height="15" fill="rgb(229,68,48)" fg:x="35" fg:w="1"/><text x="19.2717%" y="367.50"></text></g><g><title>simulate.exe`kemkem::util::fastmodpow (1 samples, 0.54%)</title><rect x="19.0217%" y="341" width="0.5435%" height="15" fill="rgb(252,8,32)" fg:x="35" fg:w="1"/><text x="19.2717%" y="351.50"></text></g><g><title>simulate.exe`kemkem::ring::Vector&lt;2&gt;::inverse_ntt&lt;2&gt;(kemkem::ring::Vector (1 samples, 0.54%)</title><rect x="19.5652%" y="373" width="0.5435%" height="15" fill="rgb(223,20,43)" fg:x="36" fg:w="1"/><text x="19.8152%" y="383.50"></text></g><g><title>simulate.exe`kemkem::ring::Ring::inverse_ntt (1 samples, 0.54%)</title><rect x="19.5652%" y="357" width="0.5435%" height="15" fill="rgb(229,81,49)" fg:x="36" fg:w="1"/><text x="19.8152%" y="367.50"></text></g><g><title>simulate.exe`kemkem::util::bitrev7 (1 samples, 0.54%)</title><rect x="19.5652%" y="341" width="0.5435%" height="15" fill="rgb(236,28,36)" fg:x="36" fg:w="1"/><text x="19.8152%" y="351.50"></text></g><g><title>simulate.exe`core::slice::index::impl$0::index(ref$&lt;slice2$&lt;u8&gt; &gt;, core::ops::range::RangeTo (1 samples, 0.54%)</title><rect x="20.1087%" y="309" width="0.5435%" height="15" fill="rgb(249,185,26)" fg:x="37" fg:w="1"/><text x="20.3587%" y="319.50"></text></g><g><title>simulate.exe`core::slice::index::impl$5::index(core::ops::range::RangeTo&lt;usize&gt;, ref$&lt;slice2$ (1 samples, 0.54%)</title><rect x="20.1087%" y="293" width="0.5435%" height="15" fill="rgb(249,174,33)" fg:x="37" fg:w="1"/><text x="20.3587%" y="303.50"></text></g><g><title>simulate.exe`core::slice::index::impl$4::index(core::ops::range::Range&lt;usize&gt;, ref$&lt;slice2$ (1 samples, 0.54%)</title><rect x="20.1087%" y="277" width="0.5435%" height="15" fill="rgb(233,201,37)" fg:x="37" fg:w="1"/><text x="20.3587%" y="287.50"></text></g><g><title>simulate.exe`core::slice::index::impl$4::get_unchecked&lt;u8&gt;(core::ops::range::Range&lt;usize&gt;, ptr_const$&lt;slice2$ (1 samples, 0.54%)</title><rect x="20.1087%" y="261" width="0.5435%" height="15" fill="rgb(221,78,26)" fg:x="37" fg:w="1"/><text x="20.3587%" y="271.50"></text></g><g><title>simulate.exe`core::slice::index::impl$4::get_unchecked::precondition_check (1 samples, 0.54%)</title><rect x="20.1087%" y="245" width="0.5435%" height="15" fill="rgb(250,127,30)" fg:x="37" fg:w="1"/><text x="20.3587%" y="255.50"></text></g><g><title>simulate.exe`generic_array::impls::impl$0::default (2 samples, 1.09%)</title><rect x="20.6522%" y="277" width="1.0870%" height="15" fill="rgb(230,49,44)" fg:x="38" fg:w="2"/><text x="20.9022%" y="287.50"></text></g><g><title>simulate.exe`generic_array::impl$18::generate&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,generic_array::impls::impl$0::default::closure_env$0&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt; &gt; &gt;(generic_array::impls::impl$0::default::closure_env$0&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt (2 samples, 1.09%)</title><rect x="20.6522%" y="261" width="1.0870%" height="15" fill="rgb(229,67,23)" fg:x="38" fg:w="2"/><text x="20.9022%" y="271.50"></text></g><g><title>simulate.exe`core::iter::traits::iterator::Iterator::for_each&lt;core::iter::adapters::enumerate::Enumerate&lt;core::slice::iter::IterMut&lt;u8&gt; &gt;,generic_array::impl$18::generate::closure_env$0&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,generic_array::impls::impl$0::default::closure_env$0&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt; &gt; &gt; &gt;(core::iter::adapters::enumerate::Enumerate&lt;core::slice::iter::IterMut&lt;u8&gt; &gt;, generic_array::impl$18::generate::closure_env$0&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,generic_array::impls::impl$0::default::closure_env$0&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt (2 samples, 1.09%)</title><rect x="20.6522%" y="245" width="1.0870%" height="15" fill="rgb(249,83,47)" fg:x="38" fg:w="2"/><text x="20.9022%" y="255.50"></text></g><g><title>simulate.exe`core::iter::adapters::enumerate::impl$1::fold&lt;core::slice::iter::IterMut&lt;u8&gt;,tuple$&lt;&gt;,core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;tuple$&lt;usize,ref_mut$&lt;u8&gt; &gt;,generic_array::impl$18::generate::closure_env$0&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,generic_array::impls::impl$0::default::closure_env$0&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt; &gt; &gt; &gt; &gt;(core::iter::adapters::enumerate::Enumerate&lt;core::slice::iter::IterMut&lt;u8&gt; &gt;, tuple$&lt;&gt;, core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;tuple$&lt;usize,ref_mut$&lt;u8&gt; &gt;,generic_array::impl$18::generate::closure_env$0&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,generic_array::impls::impl$0::default::closure_env$0&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt (2 samples, 1.09%)</title><rect x="20.6522%" y="229" width="1.0870%" height="15" fill="rgb(215,43,3)" fg:x="38" fg:w="2"/><text x="20.9022%" y="239.50"></text></g><g><title>simulate.exe`core::slice::iter::impl$189::fold&lt;u8,tuple$&lt;&gt;,core::iter::adapters::enumerate::impl$1::fold::enumerate::closure_env$0&lt;ref_mut$&lt;u8&gt;,tuple$&lt;&gt;,core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;tuple$&lt;usize,ref_mut$&lt;u8&gt; &gt;,generic_array::impl$18::generate::closure_env$0&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,generic_array::impls::impl$0::default::closure_env$0&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt; &gt; &gt; &gt; &gt; &gt;(core::slice::iter::IterMut&lt;u8&gt;, tuple$&lt;&gt;, core::iter::adapters::enumerate::impl$1::fold::enumerate::closure_env$0&lt;ref_mut$&lt;u8&gt;,tuple$&lt;&gt;,core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;tuple$&lt;usize,ref_mut$&lt;u8&gt; &gt;,generic_array::impl$18::generate::closure_env$0&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,generic_array::impls::impl$0::default::closure_env$0&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt (2 samples, 1.09%)</title><rect x="20.6522%" y="213" width="1.0870%" height="15" fill="rgb(238,154,13)" fg:x="38" fg:w="2"/><text x="20.9022%" y="223.50"></text></g><g><title>simulate.exe`core::iter::adapters::enumerate::impl$1::fold::enumerate::closure$0&lt;ref_mut$&lt;u8&gt;,tuple$&lt;&gt;,core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;tuple$&lt;usize,ref_mut$&lt;u8&gt; &gt;,generic_array::impl$18::generate::closure_env$0&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,generic_array::impls::impl$0::default::closure_env$0&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt; &gt; &gt; &gt; &gt;(core::iter::adapters::enumerate::impl$1::fold::enumerate::closure_env$0&lt;ref_mut$&lt;u8&gt;,tuple$&lt;&gt;,core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;tuple$&lt;usize,ref_mut$&lt;u8&gt; &gt;,generic_array::impl$18::generate::closure_env$0&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,generic_array::impls::impl$0::default::closure_env$0&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt; &gt; &gt; &gt; &gt;*, tuple$ (2 samples, 1.09%)</title><rect x="20.6522%" y="197" width="1.0870%" height="15" fill="rgb(219,56,2)" fg:x="38" fg:w="2"/><text x="20.9022%" y="207.50"></text></g><g><title>simulate.exe`core::iter::traits::iterator::Iterator::for_each::call::closure$0&lt;tuple$&lt;usize,ref_mut$&lt;u8&gt; &gt;,generic_array::impl$18::generate::closure_env$0&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,generic_array::impls::impl$0::default::closure_env$0&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt; &gt; &gt; &gt;(core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;tuple$&lt;usize,ref_mut$&lt;u8&gt; &gt;,generic_array::impl$18::generate::closure_env$0&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,generic_array::impls::impl$0::default::closure_env$0&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt; &gt; &gt; &gt;*, tuple$&lt;&gt;, tuple$&lt;usize,ref_mut$ (2 samples, 1.09%)</title><rect x="20.6522%" y="181" width="1.0870%" height="15" fill="rgb(233,0,4)" fg:x="38" fg:w="2"/><text x="20.9022%" y="191.50"></text></g><g><title>simulate.exe`generic_array::impl$18::generate::closure$0&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,generic_array::impls::impl$0::default::closure_env$0&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt; &gt; &gt;(generic_array::impl$18::generate::closure_env$0&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,generic_array::impls::impl$0::default::closure_env$0&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt; &gt; &gt;*, tuple$&lt;usize,ref_mut$ (2 samples, 1.09%)</title><rect x="20.6522%" y="165" width="1.0870%" height="15" fill="rgb(235,30,7)" fg:x="38" fg:w="2"/><text x="20.9022%" y="175.50"></text></g><g><title>simulate.exe`generic_array::impls::impl$0::default::closure$0&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt; &gt;(generic_array::impls::impl$0::default::closure_env$0&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt (1 samples, 0.54%)</title><rect x="21.1957%" y="149" width="0.5435%" height="15" fill="rgb(250,79,13)" fg:x="39" fg:w="1"/><text x="21.4457%" y="159.50"></text></g><g><title>simulate.exe`sha3::state::Sha3State::as_bytes(ref_mut$&lt;slice2$ (1 samples, 0.54%)</title><rect x="21.7391%" y="277" width="0.5435%" height="15" fill="rgb(211,146,34)" fg:x="40" fg:w="1"/><text x="21.9891%" y="287.50"></text></g><g><title>simulate.exe`core::slice::impl$0::copy_from_slice&lt;u8&gt;(ref_mut$&lt;slice2$&lt;u8&gt; &gt;, ref$&lt;slice2$ (1 samples, 0.54%)</title><rect x="21.7391%" y="261" width="0.5435%" height="15" fill="rgb(228,22,38)" fg:x="40" fg:w="1"/><text x="21.9891%" y="271.50"></text></g><g><title>simulate.exe`core::slice::impl$0::as_ptr(ref$&lt;slice2$ (1 samples, 0.54%)</title><rect x="21.7391%" y="245" width="0.5435%" height="15" fill="rgb(235,168,5)" fg:x="40" fg:w="1"/><text x="21.9891%" y="255.50"></text></g><g><title>simulate.exe`core::intrinsics::copy_nonoverlapping::precondition_check(tuple$&lt;&gt;*, tuple$ (1 samples, 0.54%)</title><rect x="21.7391%" y="229" width="0.5435%" height="15" fill="rgb(221,155,16)" fg:x="40" fg:w="1"/><text x="21.9891%" y="239.50"></text></g><g><title>simulate.exe`core::ub_checks::is_nonoverlapping(tuple$&lt;&gt;*, tuple$ (1 samples, 0.54%)</title><rect x="21.7391%" y="213" width="0.5435%" height="15" fill="rgb(215,215,53)" fg:x="40" fg:w="1"/><text x="21.9891%" y="223.50"></text></g><g><title>simulate.exe`core::ub_checks::is_nonoverlapping::runtime(tuple$&lt;&gt;*, tuple$ (1 samples, 0.54%)</title><rect x="21.7391%" y="197" width="0.5435%" height="15" fill="rgb(223,4,10)" fg:x="40" fg:w="1"/><text x="21.9891%" y="207.50"></text></g><g><title>simulate.exe`core::num::impl$11::checked_mul (1 samples, 0.54%)</title><rect x="21.7391%" y="181" width="0.5435%" height="15" fill="rgb(234,103,6)" fg:x="40" fg:w="1"/><text x="21.9891%" y="191.50"></text></g><g><title>`0x7FFAF0C013A8 (1 samples, 0.54%)</title><rect x="22.2826%" y="229" width="0.5435%" height="15" fill="rgb(227,97,0)" fg:x="41" fg:w="1"/><text x="22.5326%" y="239.50"></text></g><g><title>simulate.exe`digest::core_api::xof_reader::impl$1::read::closure$0&lt;sha3::Shake128ReaderCore&gt;(digest::core_api::xof_reader::impl$1::read::closure_env$0&lt;sha3::Shake128ReaderCore&gt;*, ref_mut$&lt;slice2$&lt;generic_array::GenericArray&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt (6 samples, 3.26%)</title><rect x="20.6522%" y="309" width="3.2609%" height="15" fill="rgb(234,150,53)" fg:x="38" fg:w="6"/><text x="20.9022%" y="319.50">sim..</text></g><g><title>simulate.exe`sha3::impl$109::read_block (6 samples, 3.26%)</title><rect x="20.6522%" y="293" width="3.2609%" height="15" fill="rgb(228,201,54)" fg:x="38" fg:w="6"/><text x="20.9022%" y="303.50">sim..</text></g><g><title>simulate.exe`sha3::state::Sha3State::permute (3 samples, 1.63%)</title><rect x="22.2826%" y="277" width="1.6304%" height="15" fill="rgb(222,22,37)" fg:x="41" fg:w="3"/><text x="22.5326%" y="287.50"></text></g><g><title>simulate.exe`keccak::p1600 (3 samples, 1.63%)</title><rect x="22.2826%" y="261" width="1.6304%" height="15" fill="rgb(237,53,32)" fg:x="41" fg:w="3"/><text x="22.5326%" y="271.50"></text></g><g><title>simulate.exe`keccak::keccak_p&lt;u64&gt; (3 samples, 1.63%)</title><rect x="22.2826%" y="245" width="1.6304%" height="15" fill="rgb(233,25,53)" fg:x="41" fg:w="3"/><text x="22.5326%" y="255.50"></text></g><g><title>`0x7FFAF0C013AF (2 samples, 1.09%)</title><rect x="22.8261%" y="229" width="1.0870%" height="15" fill="rgb(210,40,34)" fg:x="42" fg:w="2"/><text x="23.0761%" y="239.50"></text></g><g><title>simulate.exe`kemkem::sample::sample_ntt (8 samples, 4.35%)</title><rect x="20.1087%" y="373" width="4.3478%" height="15" fill="rgb(241,220,44)" fg:x="37" fg:w="8"/><text x="20.3587%" y="383.50">simul..</text></g><g><title>simulate.exe`kemkem::crypt::XOF::get_3_bytes (8 samples, 4.35%)</title><rect x="20.1087%" y="357" width="4.3478%" height="15" fill="rgb(235,28,35)" fg:x="37" fg:w="8"/><text x="20.3587%" y="367.50">simul..</text></g><g><title>simulate.exe`digest::core_api::xof_reader::impl$1::read&lt;sha3::Shake128ReaderCore&gt;(digest::core_api::xof_reader::XofReaderCoreWrapper&lt;sha3::Shake128ReaderCore&gt;*, ref_mut$&lt;slice2$ (8 samples, 4.35%)</title><rect x="20.1087%" y="341" width="4.3478%" height="15" fill="rgb(210,56,17)" fg:x="37" fg:w="8"/><text x="20.3587%" y="351.50">simul..</text></g><g><title>simulate.exe`block_buffer::BlockBuffer&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,block_buffer::Eager&gt;::set_data&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,digest::core_api::xof_reader::impl$1::read::closure_env$0&lt;sha3::Shake128ReaderCore&gt; &gt;(ref_mut$&lt;slice2$&lt;u8&gt; &gt;, digest::core_api::xof_reader::impl$1::read::closure_env$0 (8 samples, 4.35%)</title><rect x="20.1087%" y="325" width="4.3478%" height="15" fill="rgb(224,130,29)" fg:x="37" fg:w="8"/><text x="20.3587%" y="335.50">simul..</text></g><g><title>simulate.exe`generic_array::impls::impl$0::default (1 samples, 0.54%)</title><rect x="23.9130%" y="309" width="0.5435%" height="15" fill="rgb(235,212,8)" fg:x="44" fg:w="1"/><text x="24.1630%" y="319.50"></text></g><g><title>simulate.exe`generic_array::impl$18::generate&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,generic_array::impls::impl$0::default::closure_env$0&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt; &gt; &gt;(generic_array::impls::impl$0::default::closure_env$0&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt (1 samples, 0.54%)</title><rect x="23.9130%" y="293" width="0.5435%" height="15" fill="rgb(223,33,50)" fg:x="44" fg:w="1"/><text x="24.1630%" y="303.50"></text></g><g><title>simulate.exe`core::iter::traits::iterator::Iterator::for_each&lt;core::iter::adapters::enumerate::Enumerate&lt;core::slice::iter::IterMut&lt;u8&gt; &gt;,generic_array::impl$18::generate::closure_env$0&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,generic_array::impls::impl$0::default::closure_env$0&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt; &gt; &gt; &gt;(core::iter::adapters::enumerate::Enumerate&lt;core::slice::iter::IterMut&lt;u8&gt; &gt;, generic_array::impl$18::generate::closure_env$0&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,generic_array::impls::impl$0::default::closure_env$0&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt (1 samples, 0.54%)</title><rect x="23.9130%" y="277" width="0.5435%" height="15" fill="rgb(219,149,13)" fg:x="44" fg:w="1"/><text x="24.1630%" y="287.50"></text></g><g><title>simulate.exe`core::iter::adapters::enumerate::impl$1::fold&lt;core::slice::iter::IterMut&lt;u8&gt;,tuple$&lt;&gt;,core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;tuple$&lt;usize,ref_mut$&lt;u8&gt; &gt;,generic_array::impl$18::generate::closure_env$0&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,generic_array::impls::impl$0::default::closure_env$0&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt; &gt; &gt; &gt; &gt;(core::iter::adapters::enumerate::Enumerate&lt;core::slice::iter::IterMut&lt;u8&gt; &gt;, tuple$&lt;&gt;, core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;tuple$&lt;usize,ref_mut$&lt;u8&gt; &gt;,generic_array::impl$18::generate::closure_env$0&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,generic_array::impls::impl$0::default::closure_env$0&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt (1 samples, 0.54%)</title><rect x="23.9130%" y="261" width="0.5435%" height="15" fill="rgb(250,156,29)" fg:x="44" fg:w="1"/><text x="24.1630%" y="271.50"></text></g><g><title>simulate.exe`core::slice::iter::impl$189::fold&lt;u8,tuple$&lt;&gt;,core::iter::adapters::enumerate::impl$1::fold::enumerate::closure_env$0&lt;ref_mut$&lt;u8&gt;,tuple$&lt;&gt;,core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;tuple$&lt;usize,ref_mut$&lt;u8&gt; &gt;,generic_array::impl$18::generate::closure_env$0&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,generic_array::impls::impl$0::default::closure_env$0&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt; &gt; &gt; &gt; &gt; &gt;(core::slice::iter::IterMut&lt;u8&gt;, tuple$&lt;&gt;, core::iter::adapters::enumerate::impl$1::fold::enumerate::closure_env$0&lt;ref_mut$&lt;u8&gt;,tuple$&lt;&gt;,core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;tuple$&lt;usize,ref_mut$&lt;u8&gt; &gt;,generic_array::impl$18::generate::closure_env$0&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,generic_array::impls::impl$0::default::closure_env$0&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt (1 samples, 0.54%)</title><rect x="23.9130%" y="245" width="0.5435%" height="15" fill="rgb(216,193,19)" fg:x="44" fg:w="1"/><text x="24.1630%" y="255.50"></text></g><g><title>simulate.exe`core::iter::adapters::enumerate::impl$1::fold::enumerate::closure$0&lt;ref_mut$&lt;u8&gt;,tuple$&lt;&gt;,core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;tuple$&lt;usize,ref_mut$&lt;u8&gt; &gt;,generic_array::impl$18::generate::closure_env$0&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,generic_array::impls::impl$0::default::closure_env$0&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt; &gt; &gt; &gt; &gt;(core::iter::adapters::enumerate::impl$1::fold::enumerate::closure_env$0&lt;ref_mut$&lt;u8&gt;,tuple$&lt;&gt;,core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;tuple$&lt;usize,ref_mut$&lt;u8&gt; &gt;,generic_array::impl$18::generate::closure_env$0&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,generic_array::impls::impl$0::default::closure_env$0&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt; &gt; &gt; &gt; &gt;*, tuple$ (1 samples, 0.54%)</title><rect x="23.9130%" y="229" width="0.5435%" height="15" fill="rgb(216,135,14)" fg:x="44" fg:w="1"/><text x="24.1630%" y="239.50"></text></g><g><title>simulate.exe`bitvec::slice::BitSlice&lt;u8,bitvec::order::Lsb0&gt;::len&lt;u8,bitvec::order::Lsb0&gt;(ref$&lt;bitvec::slice::BitSlice (1 samples, 0.54%)</title><rect x="24.4565%" y="309" width="0.5435%" height="15" fill="rgb(241,47,5)" fg:x="45" fg:w="1"/><text x="24.7065%" y="319.50"></text></g><g><title>simulate.exe`bitvec::slice::BitSlice&lt;u8,bitvec::order::Lsb0&gt;::as_bitspan&lt;u8,bitvec::order::Lsb0&gt;(ref$&lt;bitvec::slice::BitSlice (1 samples, 0.54%)</title><rect x="24.4565%" y="293" width="0.5435%" height="15" fill="rgb(233,42,35)" fg:x="45" fg:w="1"/><text x="24.7065%" y="303.50"></text></g><g><title>simulate.exe`bitvec::ptr::span::BitSpan&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt;::from_bitslice_ptr&lt;u8,bitvec::order::Lsb0&gt;(ptr_const$&lt;bitvec::slice::BitSlice (1 samples, 0.54%)</title><rect x="24.4565%" y="277" width="0.5435%" height="15" fill="rgb(231,13,6)" fg:x="45" fg:w="1"/><text x="24.7065%" y="287.50"></text></g><g><title>simulate.exe`core::ptr::non_null::NonNull&lt;slice2$&lt;tuple$&lt;&gt; &gt; &gt;::new&lt;slice2$&lt;tuple$&lt;&gt; &gt; &gt;(ptr_mut$&lt;slice2$&lt;tuple$ (1 samples, 0.54%)</title><rect x="24.4565%" y="261" width="0.5435%" height="15" fill="rgb(207,181,40)" fg:x="45" fg:w="1"/><text x="24.7065%" y="271.50"></text></g><g><title>simulate.exe`bitvec::ptr::single::BitPtr&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt;::new_unchecked&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt;(wyz::comu::Address&lt;wyz::comu::Const,u8&gt;, bitvec::index::BitIdx (1 samples, 0.54%)</title><rect x="25.0000%" y="261" width="0.5435%" height="15" fill="rgb(254,173,49)" fg:x="46" fg:w="1"/><text x="25.2500%" y="271.50"></text></g><g><title>simulate.exe`enum2$&lt;core::result::Result&lt;bitvec::ptr::single::BitPtr&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt;,bitvec::ptr::addr::MisalignError&lt;u8&gt; &gt; &gt;::unwrap(enum2$&lt;core::result::Result&lt;bitvec::ptr::single::BitPtr&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt;,bitvec::ptr::addr::MisalignError (1 samples, 0.54%)</title><rect x="25.0000%" y="245" width="0.5435%" height="15" fill="rgb(221,1,38)" fg:x="46" fg:w="1"/><text x="25.2500%" y="255.50"></text></g><g><title>simulate.exe`bitvec::ptr::single::BitPtr&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt;::new&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt;(wyz::comu::Address&lt;wyz::comu::Const,u8&gt;, bitvec::index::BitIdx (1 samples, 0.54%)</title><rect x="25.0000%" y="229" width="0.5435%" height="15" fill="rgb(206,124,46)" fg:x="46" fg:w="1"/><text x="25.2500%" y="239.50"></text></g><g><title>simulate.exe`bitvec::ptr::single::BitPtr&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt;::add&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt;(bitvec::ptr::single::BitPtr (3 samples, 1.63%)</title><rect x="25.0000%" y="293" width="1.6304%" height="15" fill="rgb(249,21,11)" fg:x="46" fg:w="3"/><text x="25.2500%" y="303.50"></text></g><g><title>simulate.exe`bitvec::ptr::single::BitPtr&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt;::offset&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt;(bitvec::ptr::single::BitPtr (3 samples, 1.63%)</title><rect x="25.0000%" y="277" width="1.6304%" height="15" fill="rgb(222,201,40)" fg:x="46" fg:w="3"/><text x="25.2500%" y="287.50"></text></g><g><title>simulate.exe`wyz::comu::Address&lt;wyz::comu::Const,u8&gt;::offset&lt;wyz::comu::Const,u8&gt;(wyz::comu::Address (2 samples, 1.09%)</title><rect x="25.5435%" y="261" width="1.0870%" height="15" fill="rgb(235,61,29)" fg:x="47" fg:w="2"/><text x="25.7935%" y="271.50"></text></g><g><title>simulate.exe`wyz::comu::Address&lt;wyz::comu::Const,u8&gt;::with_ptr&lt;wyz::comu::Const,u8,u8,wyz::comu::impl$10::offset::closure_env$0&lt;wyz::comu::Const,u8&gt; &gt;(wyz::comu::Address&lt;wyz::comu::Const,u8&gt;, wyz::comu::impl$10::offset::closure_env$0 (2 samples, 1.09%)</title><rect x="25.5435%" y="245" width="1.0870%" height="15" fill="rgb(219,207,3)" fg:x="47" fg:w="2"/><text x="25.7935%" y="255.50"></text></g><g><title>simulate.exe`tap::pipe::Pipe::pipe(core::ptr::non_null::NonNull&lt;u8&gt;, wyz::comu::Address&lt;wyz::comu::Const,u8&gt; (*)(core::ptr::non_null::NonNull (1 samples, 0.54%)</title><rect x="26.0870%" y="229" width="0.5435%" height="15" fill="rgb(222,56,46)" fg:x="48" fg:w="1"/><text x="26.3370%" y="239.50"></text></g><g><title>simulate.exe`core::ops::function::FnOnce::call_once&lt;wyz::comu::Address&lt;wyz::comu::Const,u8&gt; (*)(core::ptr::non_null::NonNull&lt;u8&gt;),tuple$&lt;core::ptr::non_null::NonNull&lt;u8&gt; &gt; &gt;(wyz::comu::Address&lt;wyz::comu::Const,u8&gt; (*)(core::ptr::non_null::NonNull&lt;u8&gt;), core::ptr::non_null::NonNull (1 samples, 0.54%)</title><rect x="26.0870%" y="213" width="0.5435%" height="15" fill="rgb(239,76,54)" fg:x="48" fg:w="1"/><text x="26.3370%" y="223.50"></text></g><g><title>simulate.exe`bitvec::slice::BitSlice&lt;u8,bitvec::order::Lsb0&gt;::as_bitptr&lt;u8,bitvec::order::Lsb0&gt;(ref$&lt;bitvec::slice::BitSlice (1 samples, 0.54%)</title><rect x="26.6304%" y="293" width="0.5435%" height="15" fill="rgb(231,124,27)" fg:x="49" fg:w="1"/><text x="26.8804%" y="303.50"></text></g><g><title>simulate.exe`bitvec::ptr::span::BitSpan&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt;::to_bitptr&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt;(bitvec::ptr::span::BitSpan (1 samples, 0.54%)</title><rect x="26.6304%" y="277" width="0.5435%" height="15" fill="rgb(249,195,6)" fg:x="49" fg:w="1"/><text x="26.8804%" y="287.50"></text></g><g><title>simulate.exe`bitvec::ptr::span::BitSpan&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt;::address&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt; (1 samples, 0.54%)</title><rect x="26.6304%" y="261" width="0.5435%" height="15" fill="rgb(237,174,47)" fg:x="49" fg:w="1"/><text x="26.8804%" y="271.50"></text></g><g><title>simulate.exe`core::ptr::non_null::NonNull&lt;u8&gt;::new_unchecked&lt;u8&gt; (1 samples, 0.54%)</title><rect x="26.6304%" y="245" width="0.5435%" height="15" fill="rgb(206,201,31)" fg:x="49" fg:w="1"/><text x="26.8804%" y="255.50"></text></g><g><title>simulate.exe`kemkem::sample::sample_poly_cbd&lt;2&gt; (6 samples, 3.26%)</title><rect x="24.4565%" y="373" width="3.2609%" height="15" fill="rgb(231,57,52)" fg:x="45" fg:w="6"/><text x="24.7065%" y="383.50">sim..</text></g><g><title>simulate.exe`bitvec::slice::ops::impl$3::index&lt;u8,bitvec::order::Lsb0&gt;(ref$&lt;bitvec::slice::BitSlice (6 samples, 3.26%)</title><rect x="24.4565%" y="357" width="3.2609%" height="15" fill="rgb(248,177,22)" fg:x="45" fg:w="6"/><text x="24.7065%" y="367.50">sim..</text></g><g><title>simulate.exe`bitvec::slice::api::impl$2::index&lt;u8,bitvec::order::Lsb0&gt;(unsigned long long, ref$&lt;bitvec::slice::BitSlice (6 samples, 3.26%)</title><rect x="24.4565%" y="341" width="3.2609%" height="15" fill="rgb(215,211,37)" fg:x="45" fg:w="6"/><text x="24.7065%" y="351.50">sim..</text></g><g><title>simulate.exe`bitvec::slice::api::impl$2::get&lt;u8,bitvec::order::Lsb0&gt;(unsigned long long, ref$&lt;bitvec::slice::BitSlice (6 samples, 3.26%)</title><rect x="24.4565%" y="325" width="3.2609%" height="15" fill="rgb(241,128,51)" fg:x="45" fg:w="6"/><text x="24.7065%" y="335.50">sim..</text></g><g><title>simulate.exe`bitvec::slice::api::impl$2::get_unchecked&lt;u8,bitvec::order::Lsb0&gt;(unsigned long long, ref$&lt;bitvec::slice::BitSlice (5 samples, 2.72%)</title><rect x="25.0000%" y="309" width="2.7174%" height="15" fill="rgb(227,165,31)" fg:x="46" fg:w="5"/><text x="25.2500%" y="319.50">si..</text></g><g><title>simulate.exe`enum2$&lt;core::option::Option&lt;bitvec::ptr::proxy::BitRef&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt; &gt; &gt;::unwrap(enum2$&lt;core::option::Option&lt;bitvec::ptr::proxy::BitRef (1 samples, 0.54%)</title><rect x="27.1739%" y="293" width="0.5435%" height="15" fill="rgb(228,167,24)" fg:x="50" fg:w="1"/><text x="27.4239%" y="303.50"></text></g><g><title>simulate.exe`bitvec::ptr::single::BitPtr&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt;::as_ref&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt;(bitvec::ptr::single::BitPtr (1 samples, 0.54%)</title><rect x="27.1739%" y="277" width="0.5435%" height="15" fill="rgb(228,143,12)" fg:x="50" fg:w="1"/><text x="27.4239%" y="287.50"></text></g><g><title>simulate.exe`bitvec::ptr::single::BitPtr&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt;::to_const&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt;(bitvec::ptr::single::BitPtr (1 samples, 0.54%)</title><rect x="27.1739%" y="261" width="0.5435%" height="15" fill="rgb(249,149,8)" fg:x="50" fg:w="1"/><text x="27.4239%" y="271.50"></text></g><g><title>simulate.exe`bitvec::slice::BitSlice&lt;u8,bitvec::order::Lsb0&gt;::len&lt;u8,bitvec::order::Lsb0&gt;(ref$&lt;bitvec::slice::BitSlice (1 samples, 0.54%)</title><rect x="27.7174%" y="309" width="0.5435%" height="15" fill="rgb(243,35,44)" fg:x="51" fg:w="1"/><text x="27.9674%" y="319.50"></text></g><g><title>simulate.exe`bitvec::slice::BitSlice&lt;u8,bitvec::order::Lsb0&gt;::as_bitspan&lt;u8,bitvec::order::Lsb0&gt;(ref$&lt;bitvec::slice::BitSlice (1 samples, 0.54%)</title><rect x="27.7174%" y="293" width="0.5435%" height="15" fill="rgb(246,89,9)" fg:x="51" fg:w="1"/><text x="27.9674%" y="303.50"></text></g><g><title>simulate.exe`bitvec::ptr::span::BitSpan&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt;::from_bitslice_ptr&lt;u8,bitvec::order::Lsb0&gt;(ptr_const$&lt;bitvec::slice::BitSlice (1 samples, 0.54%)</title><rect x="27.7174%" y="277" width="0.5435%" height="15" fill="rgb(233,213,13)" fg:x="51" fg:w="1"/><text x="27.9674%" y="287.50"></text></g><g><title>simulate.exe`core::ptr::non_null::NonNull&lt;slice2$&lt;tuple$&lt;&gt; &gt; &gt;::new&lt;slice2$&lt;tuple$&lt;&gt; &gt; &gt;(ptr_mut$&lt;slice2$&lt;tuple$ (1 samples, 0.54%)</title><rect x="27.7174%" y="261" width="0.5435%" height="15" fill="rgb(233,141,41)" fg:x="51" fg:w="1"/><text x="27.9674%" y="271.50"></text></g><g><title>simulate.exe`bitvec::ptr::single::BitPtr&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt;::new_unchecked&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt;(wyz::comu::Address&lt;wyz::comu::Const,u8&gt;, bitvec::index::BitIdx (1 samples, 0.54%)</title><rect x="28.2609%" y="261" width="0.5435%" height="15" fill="rgb(239,167,4)" fg:x="52" fg:w="1"/><text x="28.5109%" y="271.50"></text></g><g><title>simulate.exe`enum2$&lt;core::result::Result&lt;bitvec::ptr::single::BitPtr&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt;,bitvec::ptr::addr::MisalignError&lt;u8&gt; &gt; &gt;::unwrap(enum2$&lt;core::result::Result&lt;bitvec::ptr::single::BitPtr&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt;,bitvec::ptr::addr::MisalignError (1 samples, 0.54%)</title><rect x="28.2609%" y="245" width="0.5435%" height="15" fill="rgb(209,217,16)" fg:x="52" fg:w="1"/><text x="28.5109%" y="255.50"></text></g><g><title>simulate.exe`bitvec::ptr::single::BitPtr&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt;::new&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt;(wyz::comu::Address&lt;wyz::comu::Const,u8&gt;, bitvec::index::BitIdx (1 samples, 0.54%)</title><rect x="28.2609%" y="229" width="0.5435%" height="15" fill="rgb(219,88,35)" fg:x="52" fg:w="1"/><text x="28.5109%" y="239.50"></text></g><g><title>simulate.exe`core::result::impl$26::branch&lt;wyz::comu::Address&lt;wyz::comu::Const,u8&gt;,bitvec::ptr::addr::MisalignError&lt;u8&gt; &gt;(enum2$&lt;core::result::Result&lt;wyz::comu::Address&lt;wyz::comu::Const,u8&gt;,bitvec::ptr::addr::MisalignError (1 samples, 0.54%)</title><rect x="28.2609%" y="213" width="0.5435%" height="15" fill="rgb(220,193,23)" fg:x="52" fg:w="1"/><text x="28.5109%" y="223.50"></text></g><g><title>simulate.exe`bitvec::ptr::single::BitPtr&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt;::add&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt;(bitvec::ptr::single::BitPtr (2 samples, 1.09%)</title><rect x="28.2609%" y="293" width="1.0870%" height="15" fill="rgb(230,90,52)" fg:x="52" fg:w="2"/><text x="28.5109%" y="303.50"></text></g><g><title>simulate.exe`bitvec::ptr::single::BitPtr&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt;::offset&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt;(bitvec::ptr::single::BitPtr (2 samples, 1.09%)</title><rect x="28.2609%" y="277" width="1.0870%" height="15" fill="rgb(252,106,19)" fg:x="52" fg:w="2"/><text x="28.5109%" y="287.50"></text></g><g><title>simulate.exe`wyz::comu::Address&lt;wyz::comu::Const,u8&gt;::offset&lt;wyz::comu::Const,u8&gt;(wyz::comu::Address (1 samples, 0.54%)</title><rect x="28.8043%" y="261" width="0.5435%" height="15" fill="rgb(206,74,20)" fg:x="53" fg:w="1"/><text x="29.0543%" y="271.50"></text></g><g><title>simulate.exe`wyz::comu::Address&lt;wyz::comu::Const,u8&gt;::with_ptr&lt;wyz::comu::Const,u8,u8,wyz::comu::impl$10::offset::closure_env$0&lt;wyz::comu::Const,u8&gt; &gt;(wyz::comu::Address&lt;wyz::comu::Const,u8&gt;, wyz::comu::impl$10::offset::closure_env$0 (1 samples, 0.54%)</title><rect x="28.8043%" y="245" width="0.5435%" height="15" fill="rgb(230,138,44)" fg:x="53" fg:w="1"/><text x="29.0543%" y="255.50"></text></g><g><title>simulate.exe`tap::pipe::Pipe::pipe(core::ptr::non_null::NonNull&lt;u8&gt;, wyz::comu::Address&lt;wyz::comu::Const,u8&gt; (*)(core::ptr::non_null::NonNull (1 samples, 0.54%)</title><rect x="28.8043%" y="229" width="0.5435%" height="15" fill="rgb(235,182,43)" fg:x="53" fg:w="1"/><text x="29.0543%" y="239.50"></text></g><g><title>simulate.exe`core::ops::function::FnOnce::call_once&lt;wyz::comu::Address&lt;wyz::comu::Const,u8&gt; (*)(core::ptr::non_null::NonNull&lt;u8&gt;),tuple$&lt;core::ptr::non_null::NonNull&lt;u8&gt; &gt; &gt;(wyz::comu::Address&lt;wyz::comu::Const,u8&gt; (*)(core::ptr::non_null::NonNull&lt;u8&gt;), core::ptr::non_null::NonNull (1 samples, 0.54%)</title><rect x="28.8043%" y="213" width="0.5435%" height="15" fill="rgb(242,16,51)" fg:x="53" fg:w="1"/><text x="29.0543%" y="223.50"></text></g><g><title>simulate.exe`bitvec::ptr::span::BitSpan&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt;::to_bitptr&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt;(bitvec::ptr::span::BitSpan (1 samples, 0.54%)</title><rect x="29.3478%" y="277" width="0.5435%" height="15" fill="rgb(248,9,4)" fg:x="54" fg:w="1"/><text x="29.5978%" y="287.50"></text></g><g><title>simulate.exe`bitvec::ptr::single::BitPtr&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt;::new_unchecked&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt;(wyz::comu::Address&lt;wyz::comu::Const,u8&gt;, bitvec::index::BitIdx (1 samples, 0.54%)</title><rect x="29.3478%" y="261" width="0.5435%" height="15" fill="rgb(210,31,22)" fg:x="54" fg:w="1"/><text x="29.5978%" y="271.50"></text></g><g><title>simulate.exe`enum2$&lt;core::result::Result&lt;bitvec::ptr::single::BitPtr&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt;,bitvec::ptr::addr::MisalignError&lt;u8&gt; &gt; &gt;::unwrap(enum2$&lt;core::result::Result&lt;bitvec::ptr::single::BitPtr&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt;,bitvec::ptr::addr::MisalignError (1 samples, 0.54%)</title><rect x="29.3478%" y="245" width="0.5435%" height="15" fill="rgb(239,54,39)" fg:x="54" fg:w="1"/><text x="29.5978%" y="255.50"></text></g><g><title>simulate.exe`bitvec::ptr::single::BitPtr&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt;::new&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt;(wyz::comu::Address&lt;wyz::comu::Const,u8&gt;, bitvec::index::BitIdx (1 samples, 0.54%)</title><rect x="29.3478%" y="229" width="0.5435%" height="15" fill="rgb(230,99,41)" fg:x="54" fg:w="1"/><text x="29.5978%" y="239.50"></text></g><g><title>simulate.exe`bitvec::ptr::addr::check_alignment&lt;wyz::comu::Const,u8&gt;(wyz::comu::Address (1 samples, 0.54%)</title><rect x="29.3478%" y="213" width="0.5435%" height="15" fill="rgb(253,106,12)" fg:x="54" fg:w="1"/><text x="29.5978%" y="223.50"></text></g><g><title>simulate.exe`bitvec::slice::ops::impl$3::index&lt;u8,bitvec::order::Lsb0&gt;(ref$&lt;bitvec::slice::BitSlice (5 samples, 2.72%)</title><rect x="27.7174%" y="357" width="2.7174%" height="15" fill="rgb(213,46,41)" fg:x="51" fg:w="5"/><text x="27.9674%" y="367.50">si..</text></g><g><title>simulate.exe`bitvec::slice::api::impl$2::index&lt;u8,bitvec::order::Lsb0&gt;(unsigned long long, ref$&lt;bitvec::slice::BitSlice (5 samples, 2.72%)</title><rect x="27.7174%" y="341" width="2.7174%" height="15" fill="rgb(215,133,35)" fg:x="51" fg:w="5"/><text x="27.9674%" y="351.50">si..</text></g><g><title>simulate.exe`bitvec::slice::api::impl$2::get&lt;u8,bitvec::order::Lsb0&gt;(unsigned long long, ref$&lt;bitvec::slice::BitSlice (5 samples, 2.72%)</title><rect x="27.7174%" y="325" width="2.7174%" height="15" fill="rgb(213,28,5)" fg:x="51" fg:w="5"/><text x="27.9674%" y="335.50">si..</text></g><g><title>simulate.exe`bitvec::slice::api::impl$2::get_unchecked&lt;u8,bitvec::order::Lsb0&gt;(unsigned long long, ref$&lt;bitvec::slice::BitSlice (4 samples, 2.17%)</title><rect x="28.2609%" y="309" width="2.1739%" height="15" fill="rgb(215,77,49)" fg:x="52" fg:w="4"/><text x="28.5109%" y="319.50">s..</text></g><g><title>simulate.exe`bitvec::slice::BitSlice&lt;u8,bitvec::order::Lsb0&gt;::as_bitptr&lt;u8,bitvec::order::Lsb0&gt;(ref$&lt;bitvec::slice::BitSlice (2 samples, 1.09%)</title><rect x="29.3478%" y="293" width="1.0870%" height="15" fill="rgb(248,100,22)" fg:x="54" fg:w="2"/><text x="29.5978%" y="303.50"></text></g><g><title>simulate.exe`bitvec::slice::BitSlice&lt;u8,bitvec::order::Lsb0&gt;::as_bitspan&lt;u8,bitvec::order::Lsb0&gt;(ref$&lt;bitvec::slice::BitSlice (1 samples, 0.54%)</title><rect x="29.8913%" y="277" width="0.5435%" height="15" fill="rgb(208,67,9)" fg:x="55" fg:w="1"/><text x="30.1413%" y="287.50"></text></g><g><title>simulate.exe`bitvec::ptr::span::BitSpan&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt;::from_bitslice_ptr&lt;u8,bitvec::order::Lsb0&gt;(ptr_const$&lt;bitvec::slice::BitSlice (1 samples, 0.54%)</title><rect x="29.8913%" y="261" width="0.5435%" height="15" fill="rgb(219,133,21)" fg:x="55" fg:w="1"/><text x="30.1413%" y="271.50"></text></g><g><title>simulate.exe`core::ptr::non_null::NonNull&lt;slice2$&lt;tuple$&lt;&gt; &gt; &gt;::new&lt;slice2$&lt;tuple$&lt;&gt; &gt; &gt;(ptr_mut$&lt;slice2$&lt;tuple$ (1 samples, 0.54%)</title><rect x="29.8913%" y="245" width="0.5435%" height="15" fill="rgb(246,46,29)" fg:x="55" fg:w="1"/><text x="30.1413%" y="255.50"></text></g><g><title>simulate.exe`core::ptr::non_null::NonNull&lt;slice2$&lt;tuple$&lt;&gt; &gt; &gt;::new_unchecked(ptr_mut$&lt;slice2$&lt;tuple$ (1 samples, 0.54%)</title><rect x="29.8913%" y="229" width="0.5435%" height="15" fill="rgb(246,185,52)" fg:x="55" fg:w="1"/><text x="30.1413%" y="239.50"></text></g><g><title>simulate.exe`core::ptr::non_null::impl$3::new_unchecked::precondition_check(tuple$ (1 samples, 0.54%)</title><rect x="29.8913%" y="213" width="0.5435%" height="15" fill="rgb(252,136,11)" fg:x="55" fg:w="1"/><text x="30.1413%" y="223.50"></text></g><g><title>simulate.exe`kemkem::kpke::encrypt&lt;kemkem::params::MlKem512&gt;(tuple$&lt;kemkem::ring::Vector&lt;2&gt;,array$&lt;u8,32&gt; &gt;, kemkem::ring::Compressed (29 samples, 15.76%)</title><rect x="15.2174%" y="389" width="15.7609%" height="15" fill="rgb(219,138,53)" fg:x="28" fg:w="29"/><text x="15.4674%" y="399.50">simulate.exe`kemkem::kpk..</text></g><g><title>simulate.exe`kemkem::sample::sample_poly_cbd&lt;3&gt; (6 samples, 3.26%)</title><rect x="27.7174%" y="373" width="3.2609%" height="15" fill="rgb(211,51,23)" fg:x="51" fg:w="6"/><text x="27.9674%" y="383.50">sim..</text></g><g><title>simulate.exe`core::iter::range::impl$6::next&lt;usize&gt;(core::ops::range::Range (1 samples, 0.54%)</title><rect x="30.4348%" y="357" width="0.5435%" height="15" fill="rgb(247,221,28)" fg:x="56" fg:w="1"/><text x="30.6848%" y="367.50"></text></g><g><title>simulate.exe`core::iter::range::impl$5::spec_next&lt;usize&gt;(core::ops::range::Range (1 samples, 0.54%)</title><rect x="30.4348%" y="341" width="0.5435%" height="15" fill="rgb(251,222,45)" fg:x="56" fg:w="1"/><text x="30.6848%" y="351.50"></text></g><g><title>simulate.exe`bitvec::ptr::span::BitSpan&lt;wyz::comu::Mut,bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt;::tail&lt;wyz::comu::Mut,bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt; (1 samples, 0.54%)</title><rect x="30.9783%" y="309" width="0.5435%" height="15" fill="rgb(217,162,53)" fg:x="57" fg:w="1"/><text x="31.2283%" y="319.50"></text></g><g><title>simulate.exe`bitvec::index::BitIdx&lt;u8&gt;::span&lt;u8&gt;(bitvec::index::BitIdx (1 samples, 0.54%)</title><rect x="30.9783%" y="293" width="0.5435%" height="15" fill="rgb(229,93,14)" fg:x="57" fg:w="1"/><text x="31.2283%" y="303.50"></text></g><g><title>simulate.exe`bitvec::index::BitEnd&lt;u8&gt;::span&lt;u8&gt;(bitvec::index::BitEnd (1 samples, 0.54%)</title><rect x="30.9783%" y="277" width="0.5435%" height="15" fill="rgb(209,67,49)" fg:x="57" fg:w="1"/><text x="31.2283%" y="287.50"></text></g><g><title>simulate.exe`core::convert::impl$3::into&lt;ref_mut$&lt;bitvec::slice::BitSlice&lt;bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt; &gt;,bitvec::ptr::span::BitSpan&lt;wyz::comu::Mut,bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt; &gt;(ref_mut$&lt;bitvec::slice::BitSlice (1 samples, 0.54%)</title><rect x="31.5217%" y="309" width="0.5435%" height="15" fill="rgb(213,87,29)" fg:x="58" fg:w="1"/><text x="31.7717%" y="319.50"></text></g><g><title>simulate.exe`bitvec::ptr::span::impl$11::from&lt;bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt;(ref_mut$&lt;bitvec::slice::BitSlice (1 samples, 0.54%)</title><rect x="31.5217%" y="293" width="0.5435%" height="15" fill="rgb(205,151,52)" fg:x="58" fg:w="1"/><text x="31.7717%" y="303.50"></text></g><g><title>simulate.exe`bitvec::ptr::span::BitSpan&lt;wyz::comu::Mut,bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt;::from_bitslice_ptr_mut&lt;wyz::comu::Mut,bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt;(ptr_mut$&lt;bitvec::slice::BitSlice (1 samples, 0.54%)</title><rect x="31.5217%" y="277" width="0.5435%" height="15" fill="rgb(253,215,39)" fg:x="58" fg:w="1"/><text x="31.7717%" y="287.50"></text></g><g><title>simulate.exe`bitvec::ptr::span::BitSpan&lt;wyz::comu::Const,bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt;::from_bitslice_ptr&lt;bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt;(ptr_const$&lt;bitvec::slice::BitSlice (1 samples, 0.54%)</title><rect x="31.5217%" y="261" width="0.5435%" height="15" fill="rgb(221,220,41)" fg:x="58" fg:w="1"/><text x="31.7717%" y="271.50"></text></g><g><title>simulate.exe`bitvec::order::impl$0::mask&lt;u8,bitvec::index::BitIdx&lt;u8&gt;,bitvec::index::BitEnd&lt;u8&gt; &gt;(bitvec::index::BitIdx&lt;u8&gt;, bitvec::index::BitEnd (1 samples, 0.54%)</title><rect x="32.0652%" y="277" width="0.5435%" height="15" fill="rgb(218,133,21)" fg:x="59" fg:w="1"/><text x="32.3152%" y="287.50"></text></g><g><title>simulate.exe`enum2$&lt;core::option::Option&lt;bitvec::index::BitEnd&lt;u8&gt; &gt; &gt;::unwrap_or&lt;bitvec::index::BitEnd&lt;u8&gt; &gt;(enum2$&lt;core::option::Option&lt;bitvec::index::BitEnd&lt;u8&gt; &gt; &gt;, bitvec::index::BitEnd (1 samples, 0.54%)</title><rect x="32.0652%" y="261" width="0.5435%" height="15" fill="rgb(221,193,43)" fg:x="59" fg:w="1"/><text x="32.3152%" y="271.50"></text></g><g><title>simulate.exe`bitvec::domain::PartialElement&lt;wyz::comu::Mut,bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt;::new&lt;wyz::comu::Mut,bitvec::access::BitSafeU8,bitvec::order::Lsb0,enum2$&lt;core::option::Option&lt;bitvec::index::BitIdx&lt;u8&gt; &gt; &gt;,bitvec::index::BitEnd&lt;u8&gt; &gt;(wyz::comu::Address&lt;wyz::comu::Mut,bitvec::access::BitSafeU8&gt;, enum2$&lt;core::option::Option&lt;bitvec::index::BitIdx&lt;u8&gt; &gt; &gt;, bitvec::index::BitEnd (2 samples, 1.09%)</title><rect x="32.0652%" y="293" width="1.0870%" height="15" fill="rgb(240,128,52)" fg:x="59" fg:w="2"/><text x="32.3152%" y="303.50"></text></g><g><title>simulate.exe`core::convert::impl$3::into&lt;bitvec::index::BitEnd&lt;u8&gt;,enum2$&lt;core::option::Option&lt;bitvec::index::BitEnd&lt;u8&gt; &gt; &gt; &gt;(bitvec::index::BitEnd (1 samples, 0.54%)</title><rect x="32.6087%" y="277" width="0.5435%" height="15" fill="rgb(253,114,12)" fg:x="60" fg:w="1"/><text x="32.8587%" y="287.50"></text></g><g><title>simulate.exe`core::option::impl$10::from&lt;bitvec::index::BitEnd&lt;u8&gt; &gt;(bitvec::index::BitEnd (1 samples, 0.54%)</title><rect x="32.6087%" y="261" width="0.5435%" height="15" fill="rgb(215,223,47)" fg:x="60" fg:w="1"/><text x="32.8587%" y="271.50"></text></g><g><title>simulate.exe`bitvec::field::impl$0::store_le&lt;bitvec::access::BitSafeU8,u16&gt;(ref_mut$&lt;bitvec::slice::BitSlice (5 samples, 2.72%)</title><rect x="30.9783%" y="357" width="2.7174%" height="15" fill="rgb(248,225,23)" fg:x="57" fg:w="5"/><text x="31.2283%" y="367.50">si..</text></g><g><title>simulate.exe`bitvec::slice::BitSlice&lt;bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt;::domain_mut&lt;bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt;(ref_mut$&lt;bitvec::slice::BitSlice (5 samples, 2.72%)</title><rect x="30.9783%" y="341" width="2.7174%" height="15" fill="rgb(250,108,0)" fg:x="57" fg:w="5"/><text x="31.2283%" y="351.50">si..</text></g><g><title>simulate.exe`enum2$&lt;bitvec::domain::Domain&lt;wyz::comu::Mut,bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt; &gt;::new&lt;wyz::comu::Mut,bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt;(ref_mut$&lt;bitvec::slice::BitSlice (5 samples, 2.72%)</title><rect x="30.9783%" y="325" width="2.7174%" height="15" fill="rgb(228,208,7)" fg:x="57" fg:w="5"/><text x="31.2283%" y="335.50">si..</text></g><g><title>simulate.exe`enum2$&lt;bitvec::domain::Domain&lt;wyz::comu::Mut,bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt; &gt;::major&lt;wyz::comu::Mut,bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt;(wyz::comu::Address&lt;wyz::comu::Mut,bitvec::access::BitSafeU8&gt;, unsigned long long, bitvec::index::BitIdx&lt;u8&gt;, bitvec::index::BitEnd (3 samples, 1.63%)</title><rect x="32.0652%" y="309" width="1.6304%" height="15" fill="rgb(244,45,10)" fg:x="59" fg:w="3"/><text x="32.3152%" y="319.50"></text></g><g><title>simulate.exe`wyz::comu::Address&lt;wyz::comu::Mut,bitvec::access::BitSafeU8&gt;::add&lt;wyz::comu::Mut,bitvec::access::BitSafeU8&gt;(wyz::comu::Address (1 samples, 0.54%)</title><rect x="33.1522%" y="293" width="0.5435%" height="15" fill="rgb(207,125,25)" fg:x="61" fg:w="1"/><text x="33.4022%" y="303.50"></text></g><g><title>simulate.exe`wyz::comu::Address&lt;wyz::comu::Mut,bitvec::access::BitSafeU8&gt;::with_ptr&lt;wyz::comu::Mut,bitvec::access::BitSafeU8,bitvec::access::BitSafeU8,wyz::comu::impl$10::add::closure_env$0&lt;wyz::comu::Mut,bitvec::access::BitSafeU8&gt; &gt;(wyz::comu::Address&lt;wyz::comu::Mut,bitvec::access::BitSafeU8&gt;, wyz::comu::impl$10::add::closure_env$0 (1 samples, 0.54%)</title><rect x="33.1522%" y="277" width="0.5435%" height="15" fill="rgb(210,195,18)" fg:x="61" fg:w="1"/><text x="33.4022%" y="287.50"></text></g><g><title>simulate.exe`tap::pipe::Pipe::pipe(bitvec::access::BitSafeU8*, enum2$&lt;core::option::Option&lt;core::ptr::non_null::NonNull&lt;bitvec::access::BitSafeU8&gt; &gt; &gt; (*) (1 samples, 0.54%)</title><rect x="33.1522%" y="261" width="0.5435%" height="15" fill="rgb(249,80,12)" fg:x="61" fg:w="1"/><text x="33.4022%" y="271.50"></text></g><g><title>simulate.exe`kemkem::serialize::byte_encode&lt;10&gt;(kemkem::ring::Ring*, ref_mut$&lt;bitvec::slice::BitSlice (6 samples, 3.26%)</title><rect x="30.9783%" y="373" width="3.2609%" height="15" fill="rgb(221,65,9)" fg:x="57" fg:w="6"/><text x="31.2283%" y="383.50">sim..</text></g><g><title>simulate.exe`core::iter::adapters::zip::impl$1::next&lt;bitvec::slice::iter::ChunksMut&lt;bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt;,core::slice::iter::Iter&lt;u16&gt; &gt;(core::iter::adapters::zip::Zip&lt;bitvec::slice::iter::ChunksMut&lt;bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt;,core::slice::iter::Iter (1 samples, 0.54%)</title><rect x="33.6957%" y="357" width="0.5435%" height="15" fill="rgb(235,49,36)" fg:x="62" fg:w="1"/><text x="33.9457%" y="367.50"></text></g><g><title>simulate.exe`core::iter::adapters::zip::impl$3::next&lt;bitvec::slice::iter::ChunksMut&lt;bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt;,core::slice::iter::Iter&lt;u16&gt; &gt;(core::iter::adapters::zip::Zip&lt;bitvec::slice::iter::ChunksMut&lt;bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt;,core::slice::iter::Iter (1 samples, 0.54%)</title><rect x="33.6957%" y="341" width="0.5435%" height="15" fill="rgb(225,32,20)" fg:x="62" fg:w="1"/><text x="33.9457%" y="351.50"></text></g><g><title>simulate.exe`bitvec::slice::iter::impl$56::next&lt;bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt;(bitvec::slice::iter::ChunksMut (1 samples, 0.54%)</title><rect x="33.6957%" y="325" width="0.5435%" height="15" fill="rgb(215,141,46)" fg:x="62" fg:w="1"/><text x="33.9457%" y="335.50"></text></g><g><title>simulate.exe`bitvec::slice::BitSlice&lt;bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt;::split_at_unchecked_mut_noalias&lt;bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt;(ref_mut$&lt;bitvec::slice::BitSlice (1 samples, 0.54%)</title><rect x="33.6957%" y="309" width="0.5435%" height="15" fill="rgb(250,160,47)" fg:x="62" fg:w="1"/><text x="33.9457%" y="319.50"></text></g><g><title>simulate.exe`bitvec::slice::BitSlice&lt;bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt;::split_at_unchecked_mut&lt;bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt;(ref_mut$&lt;bitvec::slice::BitSlice (1 samples, 0.54%)</title><rect x="33.6957%" y="293" width="0.5435%" height="15" fill="rgb(216,222,40)" fg:x="62" fg:w="1"/><text x="33.9457%" y="303.50"></text></g><g><title>simulate.exe`bitvec::slice::BitSlice&lt;bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt;::len&lt;bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt;(ref$&lt;bitvec::slice::BitSlice (1 samples, 0.54%)</title><rect x="33.6957%" y="277" width="0.5435%" height="15" fill="rgb(234,217,39)" fg:x="62" fg:w="1"/><text x="33.9457%" y="287.50"></text></g><g><title>simulate.exe`bitvec::slice::BitSlice&lt;bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt;::as_bitspan&lt;bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt;(ref$&lt;bitvec::slice::BitSlice (1 samples, 0.54%)</title><rect x="33.6957%" y="261" width="0.5435%" height="15" fill="rgb(207,178,40)" fg:x="62" fg:w="1"/><text x="33.9457%" y="271.50"></text></g><g><title>simulate.exe`bitvec::ptr::span::BitSpan&lt;wyz::comu::Const,bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt;::from_bitslice_ptr&lt;bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt;(ptr_const$&lt;bitvec::slice::BitSlice (1 samples, 0.54%)</title><rect x="33.6957%" y="245" width="0.5435%" height="15" fill="rgb(221,136,13)" fg:x="62" fg:w="1"/><text x="33.9457%" y="255.50"></text></g><g><title>simulate.exe`core::ptr::non_null::NonNull&lt;slice2$&lt;tuple$&lt;&gt; &gt; &gt;::cast&lt;slice2$&lt;tuple$&lt;&gt; &gt;,tuple$&lt;&gt; &gt;(core::ptr::non_null::NonNull&lt;slice2$&lt;tuple$ (1 samples, 0.54%)</title><rect x="33.6957%" y="229" width="0.5435%" height="15" fill="rgb(249,199,10)" fg:x="62" fg:w="1"/><text x="33.9457%" y="239.50"></text></g><g><title>simulate.exe`bitvec::ptr::span::BitSpan&lt;wyz::comu::Mut,bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt;::elements&lt;wyz::comu::Mut,bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt; (1 samples, 0.54%)</title><rect x="34.2391%" y="309" width="0.5435%" height="15" fill="rgb(249,222,13)" fg:x="63" fg:w="1"/><text x="34.4891%" y="319.50"></text></g><g><title>simulate.exe`bitvec::ptr::span::BitSpan&lt;wyz::comu::Mut,bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt;::head&lt;wyz::comu::Mut,bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt; (1 samples, 0.54%)</title><rect x="34.2391%" y="293" width="0.5435%" height="15" fill="rgb(244,185,38)" fg:x="63" fg:w="1"/><text x="34.4891%" y="303.50"></text></g><g><title>simulate.exe`bitvec::index::BitIdx&lt;u8&gt;::new_unchecked&lt;u8&gt; (1 samples, 0.54%)</title><rect x="34.2391%" y="277" width="0.5435%" height="15" fill="rgb(236,202,9)" fg:x="63" fg:w="1"/><text x="34.4891%" y="287.50"></text></g><g><title>simulate.exe`bitvec::mem::bits_of&lt;u8&gt; (1 samples, 0.54%)</title><rect x="34.2391%" y="261" width="0.5435%" height="15" fill="rgb(250,229,37)" fg:x="63" fg:w="1"/><text x="34.4891%" y="271.50"></text></g><g><title>simulate.exe`core::num::impl$11::saturating_mul (1 samples, 0.54%)</title><rect x="34.2391%" y="245" width="0.5435%" height="15" fill="rgb(206,174,23)" fg:x="63" fg:w="1"/><text x="34.4891%" y="255.50"></text></g><g><title>simulate.exe`core::num::impl$11::checked_mul (1 samples, 0.54%)</title><rect x="34.2391%" y="229" width="0.5435%" height="15" fill="rgb(211,33,43)" fg:x="63" fg:w="1"/><text x="34.4891%" y="239.50"></text></g><g><title>simulate.exe`kemkem::serialize::impl$4::serialize&lt;2,10,4&gt;(tuple$&lt;kemkem::ring::Compressed&lt;10,kemkem::ring::Vector&lt;2&gt; &gt;,kemkem::ring::Compressed (8 samples, 4.35%)</title><rect x="30.9783%" y="389" width="4.3478%" height="15" fill="rgb(245,58,50)" fg:x="57" fg:w="8"/><text x="31.2283%" y="399.50">simul..</text></g><g><title>simulate.exe`kemkem::serialize::byte_encode&lt;4&gt;(kemkem::ring::Ring*, ref_mut$&lt;bitvec::slice::BitSlice (2 samples, 1.09%)</title><rect x="34.2391%" y="373" width="1.0870%" height="15" fill="rgb(244,68,36)" fg:x="63" fg:w="2"/><text x="34.4891%" y="383.50"></text></g><g><title>simulate.exe`bitvec::field::impl$0::store_le&lt;bitvec::access::BitSafeU8,u16&gt;(ref_mut$&lt;bitvec::slice::BitSlice (2 samples, 1.09%)</title><rect x="34.2391%" y="357" width="1.0870%" height="15" fill="rgb(232,229,15)" fg:x="63" fg:w="2"/><text x="34.4891%" y="367.50"></text></g><g><title>simulate.exe`bitvec::slice::BitSlice&lt;bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt;::domain_mut&lt;bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt;(ref_mut$&lt;bitvec::slice::BitSlice (2 samples, 1.09%)</title><rect x="34.2391%" y="341" width="1.0870%" height="15" fill="rgb(254,30,23)" fg:x="63" fg:w="2"/><text x="34.4891%" y="351.50"></text></g><g><title>simulate.exe`enum2$&lt;bitvec::domain::Domain&lt;wyz::comu::Mut,bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt; &gt;::new&lt;wyz::comu::Mut,bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt;(ref_mut$&lt;bitvec::slice::BitSlice (2 samples, 1.09%)</title><rect x="34.2391%" y="325" width="1.0870%" height="15" fill="rgb(235,160,14)" fg:x="63" fg:w="2"/><text x="34.4891%" y="335.50"></text></g><g><title>simulate.exe`enum2$&lt;bitvec::domain::Domain&lt;wyz::comu::Mut,bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt; &gt;::partial_head&lt;wyz::comu::Mut,bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt;(wyz::comu::Address&lt;wyz::comu::Mut,bitvec::access::BitSafeU8&gt;, unsigned long long, bitvec::index::BitIdx&lt;u8&gt;, bitvec::index::BitEnd (1 samples, 0.54%)</title><rect x="34.7826%" y="309" width="0.5435%" height="15" fill="rgb(212,155,44)" fg:x="64" fg:w="1"/><text x="35.0326%" y="319.50"></text></g><g><title>simulate.exe`bitvec::domain::PartialElement&lt;wyz::comu::Mut,bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt;::new&lt;wyz::comu::Mut,bitvec::access::BitSafeU8,bitvec::order::Lsb0,bitvec::index::BitIdx&lt;u8&gt;,enum2$&lt;core::option::Option&lt;bitvec::index::BitEnd&lt;u8&gt; &gt; &gt; &gt;(wyz::comu::Address&lt;wyz::comu::Mut,bitvec::access::BitSafeU8&gt;, bitvec::index::BitIdx&lt;u8&gt;, enum2$&lt;core::option::Option&lt;bitvec::index::BitEnd (1 samples, 0.54%)</title><rect x="34.7826%" y="293" width="0.5435%" height="15" fill="rgb(226,2,50)" fg:x="64" fg:w="1"/><text x="35.0326%" y="303.50"></text></g><g><title>simulate.exe`enum2$&lt;core::option::Option&lt;bitvec::index::BitIdx&lt;u8&gt; &gt; &gt;::unwrap_or&lt;bitvec::index::BitIdx&lt;u8&gt; &gt;(enum2$&lt;core::option::Option&lt;bitvec::index::BitIdx&lt;u8&gt; &gt; &gt;, bitvec::index::BitIdx (1 samples, 0.54%)</title><rect x="34.7826%" y="277" width="0.5435%" height="15" fill="rgb(234,177,6)" fg:x="64" fg:w="1"/><text x="35.0326%" y="287.50"></text></g><g><title>simulate.exe`kemkem::mlkem::decaps&lt;kemkem::params::MlKem512&gt;(tuple$&lt;kemkem::ring::Compressed&lt;10,kemkem::ring::Vector&lt;2&gt; &gt;,kemkem::ring::Compressed&lt;4,kemkem::ring::Ring&gt; &gt;, tuple$&lt;kemkem::ring::Vector&lt;2&gt;,tuple$&lt;kemkem::ring::Vector&lt;2&gt;,array$&lt;u8,32&gt; &gt;,array$&lt;u8,32&gt;,array$ (44 samples, 23.91%)</title><rect x="12.5000%" y="405" width="23.9130%" height="15" fill="rgb(217,24,9)" fg:x="23" fg:w="44"/><text x="12.7500%" y="415.50">simulate.exe`kemkem::mlkem::decaps&lt;kem..</text></g><g><title>simulate.exe`kemkem::serialize::impl$6::serialize(kemkem::ring::Compressed (2 samples, 1.09%)</title><rect x="35.3261%" y="389" width="1.0870%" height="15" fill="rgb(220,13,46)" fg:x="65" fg:w="2"/><text x="35.5761%" y="399.50"></text></g><g><title>simulate.exe`kemkem::serialize::byte_encode&lt;1&gt;(kemkem::ring::Ring*, ref_mut$&lt;bitvec::slice::BitSlice (2 samples, 1.09%)</title><rect x="35.3261%" y="373" width="1.0870%" height="15" fill="rgb(239,221,27)" fg:x="65" fg:w="2"/><text x="35.5761%" y="383.50"></text></g><g><title>simulate.exe`core::iter::adapters::zip::impl$1::next&lt;bitvec::slice::iter::ChunksMut&lt;bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt;,core::slice::iter::Iter&lt;u16&gt; &gt;(core::iter::adapters::zip::Zip&lt;bitvec::slice::iter::ChunksMut&lt;bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt;,core::slice::iter::Iter (2 samples, 1.09%)</title><rect x="35.3261%" y="357" width="1.0870%" height="15" fill="rgb(222,198,25)" fg:x="65" fg:w="2"/><text x="35.5761%" y="367.50"></text></g><g><title>simulate.exe`core::iter::adapters::zip::impl$3::next&lt;bitvec::slice::iter::ChunksMut&lt;bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt;,core::slice::iter::Iter&lt;u16&gt; &gt;(core::iter::adapters::zip::Zip&lt;bitvec::slice::iter::ChunksMut&lt;bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt;,core::slice::iter::Iter (2 samples, 1.09%)</title><rect x="35.3261%" y="341" width="1.0870%" height="15" fill="rgb(211,99,13)" fg:x="65" fg:w="2"/><text x="35.5761%" y="351.50"></text></g><g><title>simulate.exe`bitvec::slice::iter::impl$56::next&lt;bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt;(bitvec::slice::iter::ChunksMut (2 samples, 1.09%)</title><rect x="35.3261%" y="325" width="1.0870%" height="15" fill="rgb(232,111,31)" fg:x="65" fg:w="2"/><text x="35.5761%" y="335.50"></text></g><g><title>simulate.exe`bitvec::slice::BitSlice&lt;bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt;::split_at_unchecked_mut_noalias&lt;bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt;(ref_mut$&lt;bitvec::slice::BitSlice (1 samples, 0.54%)</title><rect x="35.8696%" y="309" width="0.5435%" height="15" fill="rgb(245,82,37)" fg:x="66" fg:w="1"/><text x="36.1196%" y="319.50"></text></g><g><title>simulate.exe`bitvec::slice::BitSlice&lt;bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt;::split_at_unchecked_mut&lt;bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt;(ref_mut$&lt;bitvec::slice::BitSlice (1 samples, 0.54%)</title><rect x="35.8696%" y="293" width="0.5435%" height="15" fill="rgb(227,149,46)" fg:x="66" fg:w="1"/><text x="36.1196%" y="303.50"></text></g><g><title>simulate.exe`bitvec::ptr::single::BitPtr&lt;wyz::comu::Mut,bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt;::span_unchecked&lt;wyz::comu::Mut,bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt;(bitvec::ptr::single::BitPtr (1 samples, 0.54%)</title><rect x="35.8696%" y="277" width="0.5435%" height="15" fill="rgb(218,36,50)" fg:x="66" fg:w="1"/><text x="36.1196%" y="287.50"></text></g><g><title>simulate.exe`bitvec::ptr::single::BitPtr&lt;wyz::comu::Mut,bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt;::get_addr&lt;wyz::comu::Mut,bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt; (1 samples, 0.54%)</title><rect x="35.8696%" y="261" width="0.5435%" height="15" fill="rgb(226,80,48)" fg:x="66" fg:w="1"/><text x="36.1196%" y="271.50"></text></g><g><title>simulate.exe`core::ptr::const_ptr::impl$0::read_unaligned&lt;wyz::comu::Address&lt;wyz::comu::Mut,bitvec::access::BitSafeU8&gt; &gt;(wyz::comu::Address (1 samples, 0.54%)</title><rect x="35.8696%" y="245" width="0.5435%" height="15" fill="rgb(238,224,15)" fg:x="66" fg:w="1"/><text x="36.1196%" y="255.50"></text></g><g><title>simulate.exe`core::ptr::read_unaligned&lt;wyz::comu::Address&lt;wyz::comu::Mut,bitvec::access::BitSafeU8&gt; &gt;(wyz::comu::Address (1 samples, 0.54%)</title><rect x="35.8696%" y="229" width="0.5435%" height="15" fill="rgb(241,136,10)" fg:x="66" fg:w="1"/><text x="36.1196%" y="239.50"></text></g><g><title>simulate.exe`core::mem::size_of (1 samples, 0.54%)</title><rect x="35.8696%" y="213" width="0.5435%" height="15" fill="rgb(208,32,45)" fg:x="66" fg:w="1"/><text x="36.1196%" y="223.50"></text></g><g><title>simulate.exe`core::intrinsics::copy_nonoverlapping::precondition_check(tuple$&lt;&gt;*, tuple$ (1 samples, 0.54%)</title><rect x="35.8696%" y="197" width="0.5435%" height="15" fill="rgb(207,135,9)" fg:x="66" fg:w="1"/><text x="36.1196%" y="207.50"></text></g><g><title>simulate.exe`core::ub_checks::is_aligned_and_not_null(tuple$ (1 samples, 0.54%)</title><rect x="35.8696%" y="181" width="0.5435%" height="15" fill="rgb(206,86,44)" fg:x="66" fg:w="1"/><text x="36.1196%" y="191.50"></text></g><g><title>simulate.exe`core::ptr::const_ptr::impl$0::is_null(tuple$ (1 samples, 0.54%)</title><rect x="35.8696%" y="165" width="0.5435%" height="15" fill="rgb(245,177,15)" fg:x="66" fg:w="1"/><text x="36.1196%" y="175.50"></text></g><g><title>simulate.exe`kemkem::crypt::g&lt;64&gt; (1 samples, 0.54%)</title><rect x="36.4130%" y="389" width="0.5435%" height="15" fill="rgb(206,64,50)" fg:x="67" fg:w="1"/><text x="36.6630%" y="399.50"></text></g><g><title>simulate.exe`digest::digest::impl$0::finalize&lt;digest::core_api::wrapper::CoreWrapper&lt;sha3::Sha3_512Core&gt; &gt;(digest::core_api::wrapper::CoreWrapper (1 samples, 0.54%)</title><rect x="36.4130%" y="373" width="0.5435%" height="15" fill="rgb(234,36,40)" fg:x="67" fg:w="1"/><text x="36.6630%" y="383.50"></text></g><g><title>simulate.exe`digest::FixedOutput::finalize_fixed&lt;digest::core_api::wrapper::CoreWrapper&lt;sha3::Sha3_512Core&gt; &gt;(digest::core_api::wrapper::CoreWrapper (1 samples, 0.54%)</title><rect x="36.4130%" y="357" width="0.5435%" height="15" fill="rgb(213,64,8)" fg:x="67" fg:w="1"/><text x="36.6630%" y="367.50"></text></g><g><title>simulate.exe`digest::core_api::wrapper::impl$9::finalize_into&lt;sha3::Sha3_512Core&gt;(digest::core_api::wrapper::CoreWrapper&lt;sha3::Sha3_512Core&gt;, generic_array::GenericArray&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt (1 samples, 0.54%)</title><rect x="36.4130%" y="341" width="0.5435%" height="15" fill="rgb(210,75,36)" fg:x="67" fg:w="1"/><text x="36.6630%" y="351.50"></text></g><g><title>simulate.exe`sha3::impl$93::finalize_fixed_core(sha3::Sha3_512Core*, block_buffer::BlockBuffer&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,block_buffer::Eager&gt;*, generic_array::GenericArray&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt (1 samples, 0.54%)</title><rect x="36.4130%" y="325" width="0.5435%" height="15" fill="rgb(229,88,21)" fg:x="67" fg:w="1"/><text x="36.6630%" y="335.50"></text></g><g><title>simulate.exe`sha3::state::Sha3State::absorb_block(ref$&lt;slice2$ (1 samples, 0.54%)</title><rect x="36.4130%" y="309" width="0.5435%" height="15" fill="rgb(252,204,47)" fg:x="67" fg:w="1"/><text x="36.6630%" y="319.50"></text></g><g><title>simulate.exe`keccak::p1600 (1 samples, 0.54%)</title><rect x="36.4130%" y="293" width="0.5435%" height="15" fill="rgb(208,77,27)" fg:x="67" fg:w="1"/><text x="36.6630%" y="303.50"></text></g><g><title>simulate.exe`keccak::keccak_p&lt;u64&gt; (1 samples, 0.54%)</title><rect x="36.4130%" y="277" width="0.5435%" height="15" fill="rgb(221,76,26)" fg:x="67" fg:w="1"/><text x="36.6630%" y="287.50"></text></g><g><title>simulate.exe`kemkem::crypt::h(alloc::vec::Vec (2 samples, 1.09%)</title><rect x="36.9565%" y="389" width="1.0870%" height="15" fill="rgb(225,139,18)" fg:x="68" fg:w="2"/><text x="37.2065%" y="399.50"></text></g><g><title>simulate.exe`digest::digest::impl$0::update&lt;digest::core_api::wrapper::CoreWrapper&lt;sha3::Sha3_256Core&gt;,ref$&lt;alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt; &gt; &gt;(digest::core_api::wrapper::CoreWrapper&lt;sha3::Sha3_256Core&gt;*, alloc::vec::Vec (2 samples, 1.09%)</title><rect x="36.9565%" y="373" width="1.0870%" height="15" fill="rgb(230,137,11)" fg:x="68" fg:w="2"/><text x="37.2065%" y="383.50"></text></g><g><title>simulate.exe`digest::core_api::wrapper::impl$7::update&lt;sha3::Sha3_256Core&gt;(digest::core_api::wrapper::CoreWrapper&lt;sha3::Sha3_256Core&gt;*, ref$&lt;slice2$ (2 samples, 1.09%)</title><rect x="36.9565%" y="357" width="1.0870%" height="15" fill="rgb(212,28,1)" fg:x="68" fg:w="2"/><text x="37.2065%" y="367.50"></text></g><g><title>simulate.exe`block_buffer::BlockBuffer&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,block_buffer::Eager&gt;::digest_blocks&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,block_buffer::Eager,digest::core_api::wrapper::impl$7::update::closure_env$0&lt;sha3::Sha3_256Core&gt; &gt;(ref$&lt;slice2$&lt;u8&gt; &gt;, digest::core_api::wrapper::impl$7::update::closure_env$0 (2 samples, 1.09%)</title><rect x="36.9565%" y="341" width="1.0870%" height="15" fill="rgb(248,164,17)" fg:x="68" fg:w="2"/><text x="37.2065%" y="351.50"></text></g><g><title>simulate.exe`digest::core_api::wrapper::impl$7::update::closure$0&lt;sha3::Sha3_256Core&gt;(digest::core_api::wrapper::impl$7::update::closure_env$0&lt;sha3::Sha3_256Core&gt;*, ref$&lt;slice2$&lt;generic_array::GenericArray&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt (2 samples, 1.09%)</title><rect x="36.9565%" y="325" width="1.0870%" height="15" fill="rgb(222,171,42)" fg:x="68" fg:w="2"/><text x="37.2065%" y="335.50"></text></g><g><title>simulate.exe`sha3::impl$70::update_blocks(sha3::Sha3_256Core*, ref$&lt;slice2$&lt;generic_array::GenericArray&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt (2 samples, 1.09%)</title><rect x="36.9565%" y="309" width="1.0870%" height="15" fill="rgb(243,84,45)" fg:x="68" fg:w="2"/><text x="37.2065%" y="319.50"></text></g><g><title>simulate.exe`keccak::p1600 (2 samples, 1.09%)</title><rect x="36.9565%" y="293" width="1.0870%" height="15" fill="rgb(252,49,23)" fg:x="68" fg:w="2"/><text x="37.2065%" y="303.50"></text></g><g><title>simulate.exe`keccak::keccak_p&lt;u64&gt; (2 samples, 1.09%)</title><rect x="36.9565%" y="277" width="1.0870%" height="15" fill="rgb(215,19,7)" fg:x="68" fg:w="2"/><text x="37.2065%" y="287.50"></text></g><g><title>`0x7FFAF0C02010 (1 samples, 0.54%)</title><rect x="37.5000%" y="261" width="0.5435%" height="15" fill="rgb(238,81,41)" fg:x="69" fg:w="1"/><text x="37.7500%" y="271.50"></text></g><g><title>simulate.exe`digest::core_api::wrapper::impl$11::finalize_xof&lt;sha3::Shake256Core&gt;(digest::core_api::wrapper::CoreWrapper (1 samples, 0.54%)</title><rect x="38.0435%" y="357" width="0.5435%" height="15" fill="rgb(210,199,37)" fg:x="70" fg:w="1"/><text x="38.2935%" y="367.50"></text></g><g><title>simulate.exe`sha3::impl$116::finalize_xof_core(sha3::Shake256Core*, block_buffer::BlockBuffer&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt (1 samples, 0.54%)</title><rect x="38.0435%" y="341" width="0.5435%" height="15" fill="rgb(244,192,49)" fg:x="70" fg:w="1"/><text x="38.2935%" y="351.50"></text></g><g><title>simulate.exe`sha3::state::Sha3State::absorb_block(ref$&lt;slice2$ (1 samples, 0.54%)</title><rect x="38.0435%" y="325" width="0.5435%" height="15" fill="rgb(226,211,11)" fg:x="70" fg:w="1"/><text x="38.2935%" y="335.50"></text></g><g><title>simulate.exe`keccak::p1600 (1 samples, 0.54%)</title><rect x="38.0435%" y="309" width="0.5435%" height="15" fill="rgb(236,162,54)" fg:x="70" fg:w="1"/><text x="38.2935%" y="319.50"></text></g><g><title>simulate.exe`keccak::keccak_p&lt;u64&gt; (1 samples, 0.54%)</title><rect x="38.0435%" y="293" width="0.5435%" height="15" fill="rgb(220,229,9)" fg:x="70" fg:w="1"/><text x="38.2935%" y="303.50"></text></g><g><title>simulate.exe`kemkem::crypt::prf&lt;3&gt; (2 samples, 1.09%)</title><rect x="38.0435%" y="373" width="1.0870%" height="15" fill="rgb(250,87,22)" fg:x="70" fg:w="2"/><text x="38.2935%" y="383.50"></text></g><g><title>simulate.exe`digest::core_api::xof_reader::impl$1::read&lt;sha3::Shake256ReaderCore&gt;(digest::core_api::xof_reader::XofReaderCoreWrapper&lt;sha3::Shake256ReaderCore&gt;*, ref_mut$&lt;slice2$ (1 samples, 0.54%)</title><rect x="38.5870%" y="357" width="0.5435%" height="15" fill="rgb(239,43,17)" fg:x="71" fg:w="1"/><text x="38.8370%" y="367.50"></text></g><g><title>simulate.exe`block_buffer::BlockBuffer&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,block_buffer::Eager&gt;::set_data&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,digest::core_api::xof_reader::impl$1::read::closure_env$0&lt;sha3::Shake256ReaderCore&gt; &gt;(ref_mut$&lt;slice2$&lt;u8&gt; &gt;, digest::core_api::xof_reader::impl$1::read::closure_env$0 (1 samples, 0.54%)</title><rect x="38.5870%" y="341" width="0.5435%" height="15" fill="rgb(231,177,25)" fg:x="71" fg:w="1"/><text x="38.8370%" y="351.50"></text></g><g><title>simulate.exe`generic_array::impls::impl$0::default (1 samples, 0.54%)</title><rect x="38.5870%" y="325" width="0.5435%" height="15" fill="rgb(219,179,1)" fg:x="71" fg:w="1"/><text x="38.8370%" y="335.50"></text></g><g><title>simulate.exe`generic_array::impl$18::generate&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,generic_array::impls::impl$0::default::closure_env$0&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt; &gt; &gt;(generic_array::impls::impl$0::default::closure_env$0&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt (1 samples, 0.54%)</title><rect x="38.5870%" y="309" width="0.5435%" height="15" fill="rgb(238,219,53)" fg:x="71" fg:w="1"/><text x="38.8370%" y="319.50"></text></g><g><title>simulate.exe`core::iter::traits::iterator::Iterator::for_each&lt;core::iter::adapters::enumerate::Enumerate&lt;core::slice::iter::IterMut&lt;u8&gt; &gt;,generic_array::impl$18::generate::closure_env$0&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,generic_array::impls::impl$0::default::closure_env$0&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt; &gt; &gt; &gt;(core::iter::adapters::enumerate::Enumerate&lt;core::slice::iter::IterMut&lt;u8&gt; &gt;, generic_array::impl$18::generate::closure_env$0&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,generic_array::impls::impl$0::default::closure_env$0&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt (1 samples, 0.54%)</title><rect x="38.5870%" y="293" width="0.5435%" height="15" fill="rgb(232,167,36)" fg:x="71" fg:w="1"/><text x="38.8370%" y="303.50"></text></g><g><title>simulate.exe`core::iter::adapters::enumerate::impl$1::fold&lt;core::slice::iter::IterMut&lt;u8&gt;,tuple$&lt;&gt;,core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;tuple$&lt;usize,ref_mut$&lt;u8&gt; &gt;,generic_array::impl$18::generate::closure_env$0&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,generic_array::impls::impl$0::default::closure_env$0&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt; &gt; &gt; &gt; &gt;(core::iter::adapters::enumerate::Enumerate&lt;core::slice::iter::IterMut&lt;u8&gt; &gt;, tuple$&lt;&gt;, core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;tuple$&lt;usize,ref_mut$&lt;u8&gt; &gt;,generic_array::impl$18::generate::closure_env$0&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,generic_array::impls::impl$0::default::closure_env$0&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt (1 samples, 0.54%)</title><rect x="38.5870%" y="277" width="0.5435%" height="15" fill="rgb(244,19,51)" fg:x="71" fg:w="1"/><text x="38.8370%" y="287.50"></text></g><g><title>simulate.exe`core::slice::iter::impl$189::fold&lt;u8,tuple$&lt;&gt;,core::iter::adapters::enumerate::impl$1::fold::enumerate::closure_env$0&lt;ref_mut$&lt;u8&gt;,tuple$&lt;&gt;,core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;tuple$&lt;usize,ref_mut$&lt;u8&gt; &gt;,generic_array::impl$18::generate::closure_env$0&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,generic_array::impls::impl$0::default::closure_env$0&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt; &gt; &gt; &gt; &gt; &gt;(core::slice::iter::IterMut&lt;u8&gt;, tuple$&lt;&gt;, core::iter::adapters::enumerate::impl$1::fold::enumerate::closure_env$0&lt;ref_mut$&lt;u8&gt;,tuple$&lt;&gt;,core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;tuple$&lt;usize,ref_mut$&lt;u8&gt; &gt;,generic_array::impl$18::generate::closure_env$0&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,generic_array::impls::impl$0::default::closure_env$0&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt (1 samples, 0.54%)</title><rect x="38.5870%" y="261" width="0.5435%" height="15" fill="rgb(224,6,22)" fg:x="71" fg:w="1"/><text x="38.8370%" y="271.50"></text></g><g><title>simulate.exe`core::iter::adapters::enumerate::impl$1::fold::enumerate::closure$0&lt;ref_mut$&lt;u8&gt;,tuple$&lt;&gt;,core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;tuple$&lt;usize,ref_mut$&lt;u8&gt; &gt;,generic_array::impl$18::generate::closure_env$0&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,generic_array::impls::impl$0::default::closure_env$0&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt; &gt; &gt; &gt; &gt;(core::iter::adapters::enumerate::impl$1::fold::enumerate::closure_env$0&lt;ref_mut$&lt;u8&gt;,tuple$&lt;&gt;,core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;tuple$&lt;usize,ref_mut$&lt;u8&gt; &gt;,generic_array::impl$18::generate::closure_env$0&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,generic_array::impls::impl$0::default::closure_env$0&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt; &gt; &gt; &gt; &gt;*, tuple$ (1 samples, 0.54%)</title><rect x="38.5870%" y="245" width="0.5435%" height="15" fill="rgb(224,145,5)" fg:x="71" fg:w="1"/><text x="38.8370%" y="255.50"></text></g><g><title>simulate.exe`core::iter::traits::iterator::Iterator::for_each::call::closure$0&lt;tuple$&lt;usize,ref_mut$&lt;u8&gt; &gt;,generic_array::impl$18::generate::closure_env$0&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,generic_array::impls::impl$0::default::closure_env$0&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt; &gt; &gt; &gt;(core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;tuple$&lt;usize,ref_mut$&lt;u8&gt; &gt;,generic_array::impl$18::generate::closure_env$0&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,generic_array::impls::impl$0::default::closure_env$0&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt; &gt; &gt; &gt;*, tuple$&lt;&gt;, tuple$&lt;usize,ref_mut$ (1 samples, 0.54%)</title><rect x="38.5870%" y="229" width="0.5435%" height="15" fill="rgb(234,130,49)" fg:x="71" fg:w="1"/><text x="38.8370%" y="239.50"></text></g><g><title>simulate.exe`kemkem::ring::Matrix&lt;2&gt;::left_vector_multiply&lt;2&gt;(kemkem::ring::Matrix&lt;2&gt;, kemkem::ring::Vector (1 samples, 0.54%)</title><rect x="39.1304%" y="373" width="0.5435%" height="15" fill="rgb(254,6,2)" fg:x="72" fg:w="1"/><text x="39.3804%" y="383.50"></text></g><g><title>simulate.exe`kemkem::ring::Ring::mult (1 samples, 0.54%)</title><rect x="39.1304%" y="357" width="0.5435%" height="15" fill="rgb(208,96,46)" fg:x="72" fg:w="1"/><text x="39.3804%" y="367.50"></text></g><g><title>simulate.exe`kemkem::ring::Vector&lt;2&gt;::inner_product&lt;2&gt;(kemkem::ring::Vector&lt;2&gt;, kemkem::ring::Vector (1 samples, 0.54%)</title><rect x="39.6739%" y="373" width="0.5435%" height="15" fill="rgb(239,3,39)" fg:x="73" fg:w="1"/><text x="39.9239%" y="383.50"></text></g><g><title>simulate.exe`kemkem::ring::Ring::mult (1 samples, 0.54%)</title><rect x="39.6739%" y="357" width="0.5435%" height="15" fill="rgb(233,210,1)" fg:x="73" fg:w="1"/><text x="39.9239%" y="367.50"></text></g><g><title>simulate.exe`kemkem::util::fastmodpow (1 samples, 0.54%)</title><rect x="39.6739%" y="341" width="0.5435%" height="15" fill="rgb(244,137,37)" fg:x="73" fg:w="1"/><text x="39.9239%" y="351.50"></text></g><g><title>simulate.exe`kemkem::ring::Vector&lt;2&gt;::inverse_ntt&lt;2&gt;(kemkem::ring::Vector (1 samples, 0.54%)</title><rect x="40.2174%" y="373" width="0.5435%" height="15" fill="rgb(240,136,2)" fg:x="74" fg:w="1"/><text x="40.4674%" y="383.50"></text></g><g><title>simulate.exe`kemkem::ring::Ring::inverse_ntt (1 samples, 0.54%)</title><rect x="40.2174%" y="357" width="0.5435%" height="15" fill="rgb(239,18,37)" fg:x="74" fg:w="1"/><text x="40.4674%" y="367.50"></text></g><g><title>simulate.exe`kemkem::ring::Ring::scalar_mul (1 samples, 0.54%)</title><rect x="40.2174%" y="341" width="0.5435%" height="15" fill="rgb(218,185,22)" fg:x="74" fg:w="1"/><text x="40.4674%" y="351.50"></text></g><g><title>simulate.exe`core::iter::range::impl$6::next&lt;usize&gt;(core::ops::range::Range (1 samples, 0.54%)</title><rect x="40.2174%" y="325" width="0.5435%" height="15" fill="rgb(225,218,4)" fg:x="74" fg:w="1"/><text x="40.4674%" y="335.50"></text></g><g><title>simulate.exe`core::iter::range::impl$5::spec_next&lt;usize&gt;(core::ops::range::Range (1 samples, 0.54%)</title><rect x="40.2174%" y="309" width="0.5435%" height="15" fill="rgb(230,182,32)" fg:x="74" fg:w="1"/><text x="40.4674%" y="319.50"></text></g><g><title>simulate.exe`kemkem::sample::sample_ntt (8 samples, 4.35%)</title><rect x="40.7609%" y="373" width="4.3478%" height="15" fill="rgb(242,56,43)" fg:x="75" fg:w="8"/><text x="41.0109%" y="383.50">simul..</text></g><g><title>simulate.exe`kemkem::crypt::XOF::get_3_bytes (8 samples, 4.35%)</title><rect x="40.7609%" y="357" width="4.3478%" height="15" fill="rgb(233,99,24)" fg:x="75" fg:w="8"/><text x="41.0109%" y="367.50">simul..</text></g><g><title>simulate.exe`digest::core_api::xof_reader::impl$1::read&lt;sha3::Shake128ReaderCore&gt;(digest::core_api::xof_reader::XofReaderCoreWrapper&lt;sha3::Shake128ReaderCore&gt;*, ref_mut$&lt;slice2$ (8 samples, 4.35%)</title><rect x="40.7609%" y="341" width="4.3478%" height="15" fill="rgb(234,209,42)" fg:x="75" fg:w="8"/><text x="41.0109%" y="351.50">simul..</text></g><g><title>simulate.exe`block_buffer::BlockBuffer&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,block_buffer::Eager&gt;::set_data&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,digest::core_api::xof_reader::impl$1::read::closure_env$0&lt;sha3::Shake128ReaderCore&gt; &gt;(ref_mut$&lt;slice2$&lt;u8&gt; &gt;, digest::core_api::xof_reader::impl$1::read::closure_env$0 (8 samples, 4.35%)</title><rect x="40.7609%" y="325" width="4.3478%" height="15" fill="rgb(227,7,12)" fg:x="75" fg:w="8"/><text x="41.0109%" y="335.50">simul..</text></g><g><title>simulate.exe`digest::core_api::xof_reader::impl$1::read::closure$0&lt;sha3::Shake128ReaderCore&gt;(digest::core_api::xof_reader::impl$1::read::closure_env$0&lt;sha3::Shake128ReaderCore&gt;*, ref_mut$&lt;slice2$&lt;generic_array::GenericArray&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt (8 samples, 4.35%)</title><rect x="40.7609%" y="309" width="4.3478%" height="15" fill="rgb(245,203,43)" fg:x="75" fg:w="8"/><text x="41.0109%" y="319.50">simul..</text></g><g><title>simulate.exe`sha3::impl$109::read_block (8 samples, 4.35%)</title><rect x="40.7609%" y="293" width="4.3478%" height="15" fill="rgb(238,205,33)" fg:x="75" fg:w="8"/><text x="41.0109%" y="303.50">simul..</text></g><g><title>simulate.exe`sha3::state::Sha3State::permute (8 samples, 4.35%)</title><rect x="40.7609%" y="277" width="4.3478%" height="15" fill="rgb(231,56,7)" fg:x="75" fg:w="8"/><text x="41.0109%" y="287.50">simul..</text></g><g><title>simulate.exe`keccak::p1600 (8 samples, 4.35%)</title><rect x="40.7609%" y="261" width="4.3478%" height="15" fill="rgb(244,186,29)" fg:x="75" fg:w="8"/><text x="41.0109%" y="271.50">simul..</text></g><g><title>simulate.exe`keccak::keccak_p&lt;u64&gt; (8 samples, 4.35%)</title><rect x="40.7609%" y="245" width="4.3478%" height="15" fill="rgb(234,111,31)" fg:x="75" fg:w="8"/><text x="41.0109%" y="255.50">simul..</text></g><g><title>`0x7FFAF0C01393 (1 samples, 0.54%)</title><rect x="44.5652%" y="229" width="0.5435%" height="15" fill="rgb(241,149,10)" fg:x="82" fg:w="1"/><text x="44.8152%" y="239.50"></text></g><g><title>simulate.exe`bitvec::slice::BitSlice&lt;u8,bitvec::order::Lsb0&gt;::len&lt;u8,bitvec::order::Lsb0&gt;(ref$&lt;bitvec::slice::BitSlice (1 samples, 0.54%)</title><rect x="45.1087%" y="309" width="0.5435%" height="15" fill="rgb(249,206,44)" fg:x="83" fg:w="1"/><text x="45.3587%" y="319.50"></text></g><g><title>simulate.exe`bitvec::slice::BitSlice&lt;u8,bitvec::order::Lsb0&gt;::as_bitspan&lt;u8,bitvec::order::Lsb0&gt;(ref$&lt;bitvec::slice::BitSlice (1 samples, 0.54%)</title><rect x="45.1087%" y="293" width="0.5435%" height="15" fill="rgb(251,153,30)" fg:x="83" fg:w="1"/><text x="45.3587%" y="303.50"></text></g><g><title>simulate.exe`bitvec::ptr::span::BitSpan&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt;::from_bitslice_ptr&lt;u8,bitvec::order::Lsb0&gt;(ptr_const$&lt;bitvec::slice::BitSlice (1 samples, 0.54%)</title><rect x="45.1087%" y="277" width="0.5435%" height="15" fill="rgb(239,152,38)" fg:x="83" fg:w="1"/><text x="45.3587%" y="287.50"></text></g><g><title>simulate.exe`core::ptr::non_null::NonNull&lt;slice2$&lt;tuple$&lt;&gt; &gt; &gt;::new&lt;slice2$&lt;tuple$&lt;&gt; &gt; &gt;(ptr_mut$&lt;slice2$&lt;tuple$ (1 samples, 0.54%)</title><rect x="45.1087%" y="261" width="0.5435%" height="15" fill="rgb(249,139,47)" fg:x="83" fg:w="1"/><text x="45.3587%" y="271.50"></text></g><g><title>simulate.exe`bitvec::ptr::single::BitPtr&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt;::new_unchecked&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt;(wyz::comu::Address&lt;wyz::comu::Const,u8&gt;, bitvec::index::BitIdx (1 samples, 0.54%)</title><rect x="45.6522%" y="261" width="0.5435%" height="15" fill="rgb(244,64,35)" fg:x="84" fg:w="1"/><text x="45.9022%" y="271.50"></text></g><g><title>simulate.exe`enum2$&lt;core::result::Result&lt;bitvec::ptr::single::BitPtr&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt;,bitvec::ptr::addr::MisalignError&lt;u8&gt; &gt; &gt;::unwrap(enum2$&lt;core::result::Result&lt;bitvec::ptr::single::BitPtr&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt;,bitvec::ptr::addr::MisalignError (1 samples, 0.54%)</title><rect x="45.6522%" y="245" width="0.5435%" height="15" fill="rgb(216,46,15)" fg:x="84" fg:w="1"/><text x="45.9022%" y="255.50"></text></g><g><title>simulate.exe`bitvec::ptr::single::BitPtr&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt;::new&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt;(wyz::comu::Address&lt;wyz::comu::Const,u8&gt;, bitvec::index::BitIdx (1 samples, 0.54%)</title><rect x="45.6522%" y="229" width="0.5435%" height="15" fill="rgb(250,74,19)" fg:x="84" fg:w="1"/><text x="45.9022%" y="239.50"></text></g><g><title>simulate.exe`bitvec::ptr::single::BitPtr&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt;::add&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt;(bitvec::ptr::single::BitPtr (2 samples, 1.09%)</title><rect x="45.6522%" y="293" width="1.0870%" height="15" fill="rgb(249,42,33)" fg:x="84" fg:w="2"/><text x="45.9022%" y="303.50"></text></g><g><title>simulate.exe`bitvec::ptr::single::BitPtr&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt;::offset&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt;(bitvec::ptr::single::BitPtr (2 samples, 1.09%)</title><rect x="45.6522%" y="277" width="1.0870%" height="15" fill="rgb(242,149,17)" fg:x="84" fg:w="2"/><text x="45.9022%" y="287.50"></text></g><g><title>simulate.exe`wyz::comu::Address&lt;wyz::comu::Const,u8&gt;::offset&lt;wyz::comu::Const,u8&gt;(wyz::comu::Address (1 samples, 0.54%)</title><rect x="46.1957%" y="261" width="0.5435%" height="15" fill="rgb(244,29,21)" fg:x="85" fg:w="1"/><text x="46.4457%" y="271.50"></text></g><g><title>simulate.exe`wyz::comu::Address&lt;wyz::comu::Const,u8&gt;::with_ptr&lt;wyz::comu::Const,u8,u8,wyz::comu::impl$10::offset::closure_env$0&lt;wyz::comu::Const,u8&gt; &gt;(wyz::comu::Address&lt;wyz::comu::Const,u8&gt;, wyz::comu::impl$10::offset::closure_env$0 (1 samples, 0.54%)</title><rect x="46.1957%" y="245" width="0.5435%" height="15" fill="rgb(220,130,37)" fg:x="85" fg:w="1"/><text x="46.4457%" y="255.50"></text></g><g><title>simulate.exe`tap::pipe::Pipe::pipe(unsigned char*, enum2$&lt;core::option::Option&lt;core::ptr::non_null::NonNull&lt;u8&gt; &gt; &gt; (*) (1 samples, 0.54%)</title><rect x="46.1957%" y="229" width="0.5435%" height="15" fill="rgb(211,67,2)" fg:x="85" fg:w="1"/><text x="46.4457%" y="239.50"></text></g><g><title>simulate.exe`bitvec::ptr::span::BitSpan&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt;::to_bitptr&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt;(bitvec::ptr::span::BitSpan (1 samples, 0.54%)</title><rect x="46.7391%" y="277" width="0.5435%" height="15" fill="rgb(235,68,52)" fg:x="86" fg:w="1"/><text x="46.9891%" y="287.50"></text></g><g><title>simulate.exe`bitvec::ptr::span::BitSpan&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt;::head&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt; (1 samples, 0.54%)</title><rect x="46.7391%" y="261" width="0.5435%" height="15" fill="rgb(246,142,3)" fg:x="86" fg:w="1"/><text x="46.9891%" y="271.50"></text></g><g><title>simulate.exe`bitvec::index::BitIdx&lt;u8&gt;::new_unchecked&lt;u8&gt; (1 samples, 0.54%)</title><rect x="46.7391%" y="245" width="0.5435%" height="15" fill="rgb(241,25,7)" fg:x="86" fg:w="1"/><text x="46.9891%" y="255.50"></text></g><g><title>simulate.exe`bitvec::slice::BitSlice&lt;u8,bitvec::order::Lsb0&gt;::as_bitptr&lt;u8,bitvec::order::Lsb0&gt;(ref$&lt;bitvec::slice::BitSlice (3 samples, 1.63%)</title><rect x="46.7391%" y="293" width="1.6304%" height="15" fill="rgb(242,119,39)" fg:x="86" fg:w="3"/><text x="46.9891%" y="303.50"></text></g><g><title>simulate.exe`bitvec::slice::BitSlice&lt;u8,bitvec::order::Lsb0&gt;::as_bitspan&lt;u8,bitvec::order::Lsb0&gt;(ref$&lt;bitvec::slice::BitSlice (2 samples, 1.09%)</title><rect x="47.2826%" y="277" width="1.0870%" height="15" fill="rgb(241,98,45)" fg:x="87" fg:w="2"/><text x="47.5326%" y="287.50"></text></g><g><title>simulate.exe`bitvec::ptr::span::BitSpan&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt;::from_bitslice_ptr&lt;u8,bitvec::order::Lsb0&gt;(ptr_const$&lt;bitvec::slice::BitSlice (2 samples, 1.09%)</title><rect x="47.2826%" y="261" width="1.0870%" height="15" fill="rgb(254,28,30)" fg:x="87" fg:w="2"/><text x="47.5326%" y="271.50"></text></g><g><title>simulate.exe`core::ptr::non_null::NonNull&lt;slice2$&lt;tuple$&lt;&gt; &gt; &gt;::new&lt;slice2$&lt;tuple$&lt;&gt; &gt; &gt;(ptr_mut$&lt;slice2$&lt;tuple$ (1 samples, 0.54%)</title><rect x="47.8261%" y="245" width="0.5435%" height="15" fill="rgb(241,142,54)" fg:x="88" fg:w="1"/><text x="48.0761%" y="255.50"></text></g><g><title>simulate.exe`bitvec::index::BitIdx&lt;u8&gt;::select&lt;u8,bitvec::order::Lsb0&gt;(bitvec::index::BitIdx (1 samples, 0.54%)</title><rect x="48.9130%" y="213" width="0.5435%" height="15" fill="rgb(222,85,15)" fg:x="90" fg:w="1"/><text x="49.1630%" y="223.50"></text></g><g><title>simulate.exe`bitvec::order::impl$0::select&lt;u8&gt;(bitvec::index::BitIdx (1 samples, 0.54%)</title><rect x="48.9130%" y="197" width="0.5435%" height="15" fill="rgb(210,85,47)" fg:x="90" fg:w="1"/><text x="49.1630%" y="207.50"></text></g><g><title>simulate.exe`bitvec::index::BitIdx&lt;u8&gt;::into_inner&lt;u8&gt;(bitvec::index::BitIdx (1 samples, 0.54%)</title><rect x="48.9130%" y="181" width="0.5435%" height="15" fill="rgb(224,206,25)" fg:x="90" fg:w="1"/><text x="49.1630%" y="191.50"></text></g><g><title>simulate.exe`kemkem::sample::sample_poly_cbd&lt;2&gt; (9 samples, 4.89%)</title><rect x="45.1087%" y="373" width="4.8913%" height="15" fill="rgb(243,201,19)" fg:x="83" fg:w="9"/><text x="45.3587%" y="383.50">simula..</text></g><g><title>simulate.exe`bitvec::slice::ops::impl$3::index&lt;u8,bitvec::order::Lsb0&gt;(ref$&lt;bitvec::slice::BitSlice (9 samples, 4.89%)</title><rect x="45.1087%" y="357" width="4.8913%" height="15" fill="rgb(236,59,4)" fg:x="83" fg:w="9"/><text x="45.3587%" y="367.50">simula..</text></g><g><title>simulate.exe`bitvec::slice::api::impl$2::index&lt;u8,bitvec::order::Lsb0&gt;(unsigned long long, ref$&lt;bitvec::slice::BitSlice (9 samples, 4.89%)</title><rect x="45.1087%" y="341" width="4.8913%" height="15" fill="rgb(254,179,45)" fg:x="83" fg:w="9"/><text x="45.3587%" y="351.50">simula..</text></g><g><title>simulate.exe`bitvec::slice::api::impl$2::get&lt;u8,bitvec::order::Lsb0&gt;(unsigned long long, ref$&lt;bitvec::slice::BitSlice (9 samples, 4.89%)</title><rect x="45.1087%" y="325" width="4.8913%" height="15" fill="rgb(226,14,10)" fg:x="83" fg:w="9"/><text x="45.3587%" y="335.50">simula..</text></g><g><title>simulate.exe`bitvec::slice::api::impl$2::get_unchecked&lt;u8,bitvec::order::Lsb0&gt;(unsigned long long, ref$&lt;bitvec::slice::BitSlice (8 samples, 4.35%)</title><rect x="45.6522%" y="309" width="4.3478%" height="15" fill="rgb(244,27,41)" fg:x="84" fg:w="8"/><text x="45.9022%" y="319.50">simul..</text></g><g><title>simulate.exe`enum2$&lt;core::option::Option&lt;bitvec::ptr::proxy::BitRef&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt; &gt; &gt;::unwrap(enum2$&lt;core::option::Option&lt;bitvec::ptr::proxy::BitRef (3 samples, 1.63%)</title><rect x="48.3696%" y="293" width="1.6304%" height="15" fill="rgb(235,35,32)" fg:x="89" fg:w="3"/><text x="48.6196%" y="303.50"></text></g><g><title>simulate.exe`bitvec::ptr::single::BitPtr&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt;::as_ref&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt;(bitvec::ptr::single::BitPtr (3 samples, 1.63%)</title><rect x="48.3696%" y="277" width="1.6304%" height="15" fill="rgb(218,68,31)" fg:x="89" fg:w="3"/><text x="48.6196%" y="287.50"></text></g><g><title>simulate.exe`bitvec::ptr::proxy::BitRef&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt;::from_bitptr&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt;(bitvec::ptr::single::BitPtr (2 samples, 1.09%)</title><rect x="48.9130%" y="261" width="1.0870%" height="15" fill="rgb(207,120,37)" fg:x="90" fg:w="2"/><text x="49.1630%" y="271.50"></text></g><g><title>simulate.exe`bitvec::ptr::single::BitPtr&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt;::read&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt;(bitvec::ptr::single::BitPtr (2 samples, 1.09%)</title><rect x="48.9130%" y="245" width="1.0870%" height="15" fill="rgb(227,98,0)" fg:x="90" fg:w="2"/><text x="49.1630%" y="255.50"></text></g><g><title>simulate.exe`bitvec::store::BitStore::get_bit&lt;u8,bitvec::order::Lsb0&gt;(unsigned char*, bitvec::index::BitIdx (2 samples, 1.09%)</title><rect x="48.9130%" y="229" width="1.0870%" height="15" fill="rgb(207,7,3)" fg:x="90" fg:w="2"/><text x="49.1630%" y="239.50"></text></g><g><title>simulate.exe`core::cmp::impls::impl$22::ne (1 samples, 0.54%)</title><rect x="49.4565%" y="213" width="0.5435%" height="15" fill="rgb(206,98,19)" fg:x="91" fg:w="1"/><text x="49.7065%" y="223.50"></text></g><g><title>simulate.exe`bitvec::ptr::addr::check_alignment&lt;wyz::comu::Const,u8&gt;(wyz::comu::Address (1 samples, 0.54%)</title><rect x="50.5435%" y="213" width="0.5435%" height="15" fill="rgb(217,5,26)" fg:x="93" fg:w="1"/><text x="50.7935%" y="223.50"></text></g><g><title>simulate.exe`bitvec::ptr::single::BitPtr&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt;::add&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt;(bitvec::ptr::single::BitPtr (2 samples, 1.09%)</title><rect x="50.5435%" y="293" width="1.0870%" height="15" fill="rgb(235,190,38)" fg:x="93" fg:w="2"/><text x="50.7935%" y="303.50"></text></g><g><title>simulate.exe`bitvec::ptr::single::BitPtr&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt;::offset&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt;(bitvec::ptr::single::BitPtr (2 samples, 1.09%)</title><rect x="50.5435%" y="277" width="1.0870%" height="15" fill="rgb(247,86,24)" fg:x="93" fg:w="2"/><text x="50.7935%" y="287.50"></text></g><g><title>simulate.exe`bitvec::ptr::single::BitPtr&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt;::new_unchecked&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt;(wyz::comu::Address&lt;wyz::comu::Const,u8&gt;, bitvec::index::BitIdx (2 samples, 1.09%)</title><rect x="50.5435%" y="261" width="1.0870%" height="15" fill="rgb(205,101,16)" fg:x="93" fg:w="2"/><text x="50.7935%" y="271.50"></text></g><g><title>simulate.exe`enum2$&lt;core::result::Result&lt;bitvec::ptr::single::BitPtr&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt;,bitvec::ptr::addr::MisalignError&lt;u8&gt; &gt; &gt;::unwrap(enum2$&lt;core::result::Result&lt;bitvec::ptr::single::BitPtr&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt;,bitvec::ptr::addr::MisalignError (2 samples, 1.09%)</title><rect x="50.5435%" y="245" width="1.0870%" height="15" fill="rgb(246,168,33)" fg:x="93" fg:w="2"/><text x="50.7935%" y="255.50"></text></g><g><title>simulate.exe`bitvec::ptr::single::BitPtr&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt;::new&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt;(wyz::comu::Address&lt;wyz::comu::Const,u8&gt;, bitvec::index::BitIdx (2 samples, 1.09%)</title><rect x="50.5435%" y="229" width="1.0870%" height="15" fill="rgb(231,114,1)" fg:x="93" fg:w="2"/><text x="50.7935%" y="239.50"></text></g><g><title>simulate.exe`core::result::impl$26::branch&lt;wyz::comu::Address&lt;wyz::comu::Const,u8&gt;,bitvec::ptr::addr::MisalignError&lt;u8&gt; &gt;(enum2$&lt;core::result::Result&lt;wyz::comu::Address&lt;wyz::comu::Const,u8&gt;,bitvec::ptr::addr::MisalignError (1 samples, 0.54%)</title><rect x="51.0870%" y="213" width="0.5435%" height="15" fill="rgb(207,184,53)" fg:x="94" fg:w="1"/><text x="51.3370%" y="223.50"></text></g><g><title>simulate.exe`bitvec::slice::BitSlice&lt;u8,bitvec::order::Lsb0&gt;::as_bitptr&lt;u8,bitvec::order::Lsb0&gt;(ref$&lt;bitvec::slice::BitSlice (2 samples, 1.09%)</title><rect x="51.6304%" y="293" width="1.0870%" height="15" fill="rgb(224,95,51)" fg:x="95" fg:w="2"/><text x="51.8804%" y="303.50"></text></g><g><title>simulate.exe`bitvec::ptr::span::BitSpan&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt;::to_bitptr&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt;(bitvec::ptr::span::BitSpan (1 samples, 0.54%)</title><rect x="52.1739%" y="277" width="0.5435%" height="15" fill="rgb(212,188,45)" fg:x="96" fg:w="1"/><text x="52.4239%" y="287.50"></text></g><g><title>simulate.exe`bitvec::ptr::span::BitSpan&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt;::head&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt; (1 samples, 0.54%)</title><rect x="52.1739%" y="261" width="0.5435%" height="15" fill="rgb(223,154,38)" fg:x="96" fg:w="1"/><text x="52.4239%" y="271.50"></text></g><g><title>simulate.exe`bitvec::slice::api::impl$2::get&lt;u8,bitvec::order::Lsb0&gt;(unsigned long long, ref$&lt;bitvec::slice::BitSlice (5 samples, 2.72%)</title><rect x="50.5435%" y="325" width="2.7174%" height="15" fill="rgb(251,22,52)" fg:x="93" fg:w="5"/><text x="50.7935%" y="335.50">si..</text></g><g><title>simulate.exe`bitvec::slice::api::impl$2::get_unchecked&lt;u8,bitvec::order::Lsb0&gt;(unsigned long long, ref$&lt;bitvec::slice::BitSlice (5 samples, 2.72%)</title><rect x="50.5435%" y="309" width="2.7174%" height="15" fill="rgb(229,209,22)" fg:x="93" fg:w="5"/><text x="50.7935%" y="319.50">si..</text></g><g><title>simulate.exe`enum2$&lt;core::option::Option&lt;bitvec::ptr::proxy::BitRef&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt; &gt; &gt;::unwrap(enum2$&lt;core::option::Option&lt;bitvec::ptr::proxy::BitRef (1 samples, 0.54%)</title><rect x="52.7174%" y="293" width="0.5435%" height="15" fill="rgb(234,138,34)" fg:x="97" fg:w="1"/><text x="52.9674%" y="303.50"></text></g><g><title>simulate.exe`bitvec::ptr::single::BitPtr&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt;::as_ref&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt;(bitvec::ptr::single::BitPtr (1 samples, 0.54%)</title><rect x="52.7174%" y="277" width="0.5435%" height="15" fill="rgb(212,95,11)" fg:x="97" fg:w="1"/><text x="52.9674%" y="287.50"></text></g><g><title>simulate.exe`kemkem::kpke::encrypt&lt;kemkem::params::MlKem512&gt;(tuple$&lt;kemkem::ring::Vector&lt;2&gt;,array$&lt;u8,32&gt; &gt;, kemkem::ring::Compressed (29 samples, 15.76%)</title><rect x="38.0435%" y="389" width="15.7609%" height="15" fill="rgb(240,179,47)" fg:x="70" fg:w="29"/><text x="38.2935%" y="399.50">simulate.exe`kemkem::kpk..</text></g><g><title>simulate.exe`kemkem::sample::sample_poly_cbd&lt;3&gt; (7 samples, 3.80%)</title><rect x="50.0000%" y="373" width="3.8043%" height="15" fill="rgb(240,163,11)" fg:x="92" fg:w="7"/><text x="50.2500%" y="383.50">simu..</text></g><g><title>simulate.exe`bitvec::slice::ops::impl$3::index&lt;u8,bitvec::order::Lsb0&gt;(ref$&lt;bitvec::slice::BitSlice (6 samples, 3.26%)</title><rect x="50.5435%" y="357" width="3.2609%" height="15" fill="rgb(236,37,12)" fg:x="93" fg:w="6"/><text x="50.7935%" y="367.50">sim..</text></g><g><title>simulate.exe`bitvec::slice::api::impl$2::index&lt;u8,bitvec::order::Lsb0&gt;(unsigned long long, ref$&lt;bitvec::slice::BitSlice (6 samples, 3.26%)</title><rect x="50.5435%" y="341" width="3.2609%" height="15" fill="rgb(232,164,16)" fg:x="93" fg:w="6"/><text x="50.7935%" y="351.50">sim..</text></g><g><title>simulate.exe`enum2$&lt;core::option::Option&lt;bitvec::ptr::proxy::BitRef&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt; &gt; &gt;::unwrap_or_else&lt;bitvec::ptr::proxy::BitRef&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt;,bitvec::slice::api::impl$2::index::closure_env$0&lt;u8,bitvec::order::Lsb0&gt; &gt;(enum2$&lt;core::option::Option&lt;bitvec::ptr::proxy::BitRef&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt; &gt; &gt;, bitvec::slice::api::impl$2::index::closure_env$0 (1 samples, 0.54%)</title><rect x="53.2609%" y="325" width="0.5435%" height="15" fill="rgb(244,205,15)" fg:x="98" fg:w="1"/><text x="53.5109%" y="335.50"></text></g><g><title>simulate.exe`bitvec::vec::BitVec&lt;u8,bitvec::order::Lsb0&gt;::repeat&lt;u8,bitvec::order::Lsb0&gt; (1 samples, 0.54%)</title><rect x="53.8043%" y="373" width="0.5435%" height="15" fill="rgb(223,117,47)" fg:x="99" fg:w="1"/><text x="54.0543%" y="383.50"></text></g><g><title>simulate.exe`core::slice::impl$0::fill_with&lt;u8,bitvec::vec::impl$0::repeat::closure_env$0&lt;u8,bitvec::order::Lsb0&gt; &gt;(ref_mut$&lt;slice2$&lt;u8&gt; &gt;, bitvec::vec::impl$0::repeat::closure_env$0 (1 samples, 0.54%)</title><rect x="53.8043%" y="357" width="0.5435%" height="15" fill="rgb(244,107,35)" fg:x="99" fg:w="1"/><text x="54.0543%" y="367.50"></text></g><g><title>simulate.exe`bitvec::vec::impl$0::repeat::closure$0&lt;u8,bitvec::order::Lsb0&gt;(bitvec::vec::impl$0::repeat::closure_env$0 (1 samples, 0.54%)</title><rect x="53.8043%" y="341" width="0.5435%" height="15" fill="rgb(205,140,8)" fg:x="99" fg:w="1"/><text x="54.0543%" y="351.50"></text></g><g><title>simulate.exe`bitvec::store::impl$0::new (1 samples, 0.54%)</title><rect x="53.8043%" y="325" width="0.5435%" height="15" fill="rgb(228,84,46)" fg:x="99" fg:w="1"/><text x="54.0543%" y="335.50"></text></g><g><title>simulate.exe`bitvec::field::resize&lt;u16,u8&gt; (1 samples, 0.54%)</title><rect x="54.3478%" y="341" width="0.5435%" height="15" fill="rgb(254,188,9)" fg:x="100" fg:w="1"/><text x="54.5978%" y="351.50"></text></g><g><title>simulate.exe`bitvec::field::resize_inner&lt;u16,u8&gt; (1 samples, 0.54%)</title><rect x="54.3478%" y="325" width="0.5435%" height="15" fill="rgb(206,112,54)" fg:x="100" fg:w="1"/><text x="54.5978%" y="335.50"></text></g><g><title>simulate.exe`core::cmp::Ord::min&lt;usize&gt; (1 samples, 0.54%)</title><rect x="54.3478%" y="309" width="0.5435%" height="15" fill="rgb(216,84,49)" fg:x="100" fg:w="1"/><text x="54.5978%" y="319.50"></text></g><g><title>simulate.exe`core::cmp::min_by&lt;usize,core::cmp::Ordering (*)(ref$&lt;usize&gt;,ref$&lt;usize&gt;)&gt;(unsigned long long, unsigned long long, core::cmp::Ordering (*) (1 samples, 0.54%)</title><rect x="54.3478%" y="293" width="0.5435%" height="15" fill="rgb(214,194,35)" fg:x="100" fg:w="1"/><text x="54.5978%" y="303.50"></text></g><g><title>simulate.exe`core::ops::function::FnOnce::call_once&lt;core::cmp::Ordering (*)(ref$&lt;usize&gt;,ref$&lt;usize&gt;),tuple$&lt;ref$&lt;usize&gt;,ref$&lt;usize&gt; &gt; &gt;(core::cmp::Ordering (*) (1 samples, 0.54%)</title><rect x="54.3478%" y="277" width="0.5435%" height="15" fill="rgb(249,28,3)" fg:x="100" fg:w="1"/><text x="54.5978%" y="287.50"></text></g><g><title>simulate.exe`bitvec::field::impl$0::store_le&lt;bitvec::access::BitSafeU8,u16&gt;(ref_mut$&lt;bitvec::slice::BitSlice (2 samples, 1.09%)</title><rect x="54.3478%" y="357" width="1.0870%" height="15" fill="rgb(222,56,52)" fg:x="100" fg:w="2"/><text x="54.5978%" y="367.50"></text></g><g><title>simulate.exe`bitvec::slice::BitSlice&lt;bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt;::domain_mut&lt;bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt;(ref_mut$&lt;bitvec::slice::BitSlice (1 samples, 0.54%)</title><rect x="54.8913%" y="341" width="0.5435%" height="15" fill="rgb(245,217,50)" fg:x="101" fg:w="1"/><text x="55.1413%" y="351.50"></text></g><g><title>simulate.exe`enum2$&lt;bitvec::domain::Domain&lt;wyz::comu::Mut,bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt; &gt;::new&lt;wyz::comu::Mut,bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt;(ref_mut$&lt;bitvec::slice::BitSlice (1 samples, 0.54%)</title><rect x="54.8913%" y="325" width="0.5435%" height="15" fill="rgb(213,201,24)" fg:x="101" fg:w="1"/><text x="55.1413%" y="335.50"></text></g><g><title>simulate.exe`bitvec::index::impl$53::eq&lt;u8&gt;(bitvec::index::BitEnd&lt;u8&gt;*, bitvec::index::BitEnd (1 samples, 0.54%)</title><rect x="54.8913%" y="309" width="0.5435%" height="15" fill="rgb(248,116,28)" fg:x="101" fg:w="1"/><text x="55.1413%" y="319.50"></text></g><g><title>simulate.exe`bitvec::ptr::single::BitPtr&lt;wyz::comu::Mut,bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt;::add&lt;wyz::comu::Mut,bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt;(bitvec::ptr::single::BitPtr (1 samples, 0.54%)</title><rect x="55.4348%" y="277" width="0.5435%" height="15" fill="rgb(219,72,43)" fg:x="102" fg:w="1"/><text x="55.6848%" y="287.50"></text></g><g><title>simulate.exe`bitvec::ptr::single::BitPtr&lt;wyz::comu::Mut,bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt;::offset&lt;wyz::comu::Mut,bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt;(bitvec::ptr::single::BitPtr (1 samples, 0.54%)</title><rect x="55.4348%" y="261" width="0.5435%" height="15" fill="rgb(209,138,14)" fg:x="102" fg:w="1"/><text x="55.6848%" y="271.50"></text></g><g><title>simulate.exe`wyz::comu::Address&lt;wyz::comu::Mut,bitvec::access::BitSafeU8&gt;::offset&lt;wyz::comu::Mut,bitvec::access::BitSafeU8&gt;(wyz::comu::Address (1 samples, 0.54%)</title><rect x="55.4348%" y="245" width="0.5435%" height="15" fill="rgb(222,18,33)" fg:x="102" fg:w="1"/><text x="55.6848%" y="255.50"></text></g><g><title>simulate.exe`wyz::comu::Address&lt;wyz::comu::Mut,bitvec::access::BitSafeU8&gt;::with_ptr&lt;wyz::comu::Mut,bitvec::access::BitSafeU8,bitvec::access::BitSafeU8,wyz::comu::impl$10::offset::closure_env$0&lt;wyz::comu::Mut,bitvec::access::BitSafeU8&gt; &gt;(wyz::comu::Address&lt;wyz::comu::Mut,bitvec::access::BitSafeU8&gt;, wyz::comu::impl$10::offset::closure_env$0 (1 samples, 0.54%)</title><rect x="55.4348%" y="229" width="0.5435%" height="15" fill="rgb(213,199,7)" fg:x="102" fg:w="1"/><text x="55.6848%" y="239.50"></text></g><g><title>simulate.exe`enum2$&lt;core::option::Option&lt;core::ptr::non_null::NonNull&lt;bitvec::access::BitSafeU8&gt; &gt; &gt;::unwrap(enum2$&lt;core::option::Option&lt;core::ptr::non_null::NonNull (1 samples, 0.54%)</title><rect x="55.4348%" y="213" width="0.5435%" height="15" fill="rgb(250,110,10)" fg:x="102" fg:w="1"/><text x="55.6848%" y="223.50"></text></g><g><title>simulate.exe`bitvec::slice::iter::impl$56::next&lt;bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt;(bitvec::slice::iter::ChunksMut (2 samples, 1.09%)</title><rect x="55.4348%" y="325" width="1.0870%" height="15" fill="rgb(248,123,6)" fg:x="102" fg:w="2"/><text x="55.6848%" y="335.50"></text></g><g><title>simulate.exe`bitvec::slice::BitSlice&lt;bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt;::split_at_unchecked_mut_noalias&lt;bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt;(ref_mut$&lt;bitvec::slice::BitSlice (2 samples, 1.09%)</title><rect x="55.4348%" y="309" width="1.0870%" height="15" fill="rgb(206,91,31)" fg:x="102" fg:w="2"/><text x="55.6848%" y="319.50"></text></g><g><title>simulate.exe`bitvec::slice::BitSlice&lt;bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt;::split_at_unchecked_mut&lt;bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt;(ref_mut$&lt;bitvec::slice::BitSlice (2 samples, 1.09%)</title><rect x="55.4348%" y="293" width="1.0870%" height="15" fill="rgb(211,154,13)" fg:x="102" fg:w="2"/><text x="55.6848%" y="303.50"></text></g><g><title>simulate.exe`bitvec::slice::BitSlice&lt;bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt;::alias_mut&lt;bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt;(ref_mut$&lt;bitvec::slice::BitSlice (1 samples, 0.54%)</title><rect x="55.9783%" y="277" width="0.5435%" height="15" fill="rgb(225,148,7)" fg:x="103" fg:w="1"/><text x="56.2283%" y="287.50"></text></g><g><title>simulate.exe`bitvec::slice::BitSlice&lt;bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt;::as_mut_bitspan&lt;bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt;(ref_mut$&lt;bitvec::slice::BitSlice (1 samples, 0.54%)</title><rect x="55.9783%" y="261" width="0.5435%" height="15" fill="rgb(220,160,43)" fg:x="103" fg:w="1"/><text x="56.2283%" y="271.50"></text></g><g><title>simulate.exe`bitvec::ptr::span::BitSpan&lt;wyz::comu::Mut,bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt;::from_bitslice_ptr_mut&lt;wyz::comu::Mut,bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt;(ptr_mut$&lt;bitvec::slice::BitSlice (1 samples, 0.54%)</title><rect x="55.9783%" y="245" width="0.5435%" height="15" fill="rgb(213,52,39)" fg:x="103" fg:w="1"/><text x="56.2283%" y="255.50"></text></g><g><title>simulate.exe`bitvec::ptr::span::BitSpan&lt;wyz::comu::Const,bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt;::from_bitslice_ptr&lt;bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt;(ptr_const$&lt;bitvec::slice::BitSlice (1 samples, 0.54%)</title><rect x="55.9783%" y="229" width="0.5435%" height="15" fill="rgb(243,137,7)" fg:x="103" fg:w="1"/><text x="56.2283%" y="239.50"></text></g><g><title>simulate.exe`core::ptr::non_null::NonNull&lt;slice2$&lt;tuple$&lt;&gt; &gt; &gt;::new&lt;slice2$&lt;tuple$&lt;&gt; &gt; &gt;(ptr_mut$&lt;slice2$&lt;tuple$ (1 samples, 0.54%)</title><rect x="55.9783%" y="213" width="0.5435%" height="15" fill="rgb(230,79,13)" fg:x="103" fg:w="1"/><text x="56.2283%" y="223.50"></text></g><g><title>simulate.exe`kemkem::serialize::impl$0::serialize&lt;2&gt;(tuple$&lt;kemkem::ring::Vector&lt;2&gt;,array$ (6 samples, 3.26%)</title><rect x="53.8043%" y="389" width="3.2609%" height="15" fill="rgb(247,105,23)" fg:x="99" fg:w="6"/><text x="54.0543%" y="399.50">sim..</text></g><g><title>simulate.exe`kemkem::serialize::byte_encode&lt;12&gt;(kemkem::ring::Ring*, ref_mut$&lt;bitvec::slice::BitSlice (5 samples, 2.72%)</title><rect x="54.3478%" y="373" width="2.7174%" height="15" fill="rgb(223,179,41)" fg:x="100" fg:w="5"/><text x="54.5978%" y="383.50">si..</text></g><g><title>simulate.exe`core::iter::adapters::zip::impl$1::next&lt;bitvec::slice::iter::ChunksMut&lt;bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt;,core::slice::iter::Iter&lt;u16&gt; &gt;(core::iter::adapters::zip::Zip&lt;bitvec::slice::iter::ChunksMut&lt;bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt;,core::slice::iter::Iter (3 samples, 1.63%)</title><rect x="55.4348%" y="357" width="1.6304%" height="15" fill="rgb(218,9,34)" fg:x="102" fg:w="3"/><text x="55.6848%" y="367.50"></text></g><g><title>simulate.exe`core::iter::adapters::zip::impl$3::next&lt;bitvec::slice::iter::ChunksMut&lt;bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt;,core::slice::iter::Iter&lt;u16&gt; &gt;(core::iter::adapters::zip::Zip&lt;bitvec::slice::iter::ChunksMut&lt;bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt;,core::slice::iter::Iter (3 samples, 1.63%)</title><rect x="55.4348%" y="341" width="1.6304%" height="15" fill="rgb(222,106,8)" fg:x="102" fg:w="3"/><text x="55.6848%" y="351.50"></text></g><g><title>simulate.exe`core::slice::iter::impl$181::next&lt;u16&gt;(core::slice::iter::Iter (1 samples, 0.54%)</title><rect x="56.5217%" y="325" width="0.5435%" height="15" fill="rgb(211,220,0)" fg:x="104" fg:w="1"/><text x="56.7717%" y="335.50"></text></g><g><title>simulate.exe`bitvec::slice::BitSlice&lt;u8,bitvec::order::Lsb0&gt;::domain&lt;u8,bitvec::order::Lsb0&gt;(ref$&lt;bitvec::slice::BitSlice (1 samples, 0.54%)</title><rect x="57.0652%" y="341" width="0.5435%" height="15" fill="rgb(229,52,16)" fg:x="105" fg:w="1"/><text x="57.3152%" y="351.50"></text></g><g><title>simulate.exe`enum2$&lt;bitvec::domain::Domain&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt; &gt;::new&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt;(ref$&lt;bitvec::slice::BitSlice (1 samples, 0.54%)</title><rect x="57.0652%" y="325" width="0.5435%" height="15" fill="rgb(212,155,18)" fg:x="105" fg:w="1"/><text x="57.3152%" y="335.50"></text></g><g><title>simulate.exe`enum2$&lt;bitvec::domain::Domain&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt; &gt;::minor&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt;(wyz::comu::Address&lt;wyz::comu::Const,u8&gt;, unsigned long long, bitvec::index::BitIdx&lt;u8&gt;, bitvec::index::BitEnd (1 samples, 0.54%)</title><rect x="57.0652%" y="309" width="0.5435%" height="15" fill="rgb(242,21,14)" fg:x="105" fg:w="1"/><text x="57.3152%" y="319.50"></text></g><g><title>simulate.exe`bitvec::domain::PartialElement&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt;::new&lt;wyz::comu::Const,u8,bitvec::order::Lsb0,bitvec::index::BitIdx&lt;u8&gt;,bitvec::index::BitEnd&lt;u8&gt; &gt;(wyz::comu::Address&lt;wyz::comu::Const,u8&gt;, bitvec::index::BitIdx&lt;u8&gt;, bitvec::index::BitEnd (1 samples, 0.54%)</title><rect x="57.0652%" y="293" width="0.5435%" height="15" fill="rgb(222,19,48)" fg:x="105" fg:w="1"/><text x="57.3152%" y="303.50"></text></g><g><title>simulate.exe`bitvec::order::impl$0::mask&lt;u8,bitvec::index::BitIdx&lt;u8&gt;,bitvec::index::BitEnd&lt;u8&gt; &gt;(bitvec::index::BitIdx&lt;u8&gt;, bitvec::index::BitEnd (1 samples, 0.54%)</title><rect x="57.0652%" y="277" width="0.5435%" height="15" fill="rgb(232,45,27)" fg:x="105" fg:w="1"/><text x="57.3152%" y="287.50"></text></g><g><title>simulate.exe`kemkem::mlkem::encaps&lt;kemkem::params::MlKem512&gt;(tuple$&lt;kemkem::ring::Vector&lt;2&gt;,array$ (40 samples, 21.74%)</title><rect x="36.4130%" y="405" width="21.7391%" height="15" fill="rgb(249,103,42)" fg:x="67" fg:w="40"/><text x="36.6630%" y="415.50">simulate.exe`kemkem::mlkem::encaps..</text></g><g><title>simulate.exe`kemkem::serialize::impl$7::deserialize(bitvec::vec::BitVec (2 samples, 1.09%)</title><rect x="57.0652%" y="389" width="1.0870%" height="15" fill="rgb(246,81,33)" fg:x="105" fg:w="2"/><text x="57.3152%" y="399.50"></text></g><g><title>simulate.exe`kemkem::serialize::byte_decode&lt;1&gt;(ref$&lt;bitvec::slice::BitSlice (2 samples, 1.09%)</title><rect x="57.0652%" y="373" width="1.0870%" height="15" fill="rgb(252,33,42)" fg:x="105" fg:w="2"/><text x="57.3152%" y="383.50"></text></g><g><title>simulate.exe`bitvec::field::impl$0::load_le&lt;u8,u16&gt;(ref$&lt;bitvec::slice::BitSlice (2 samples, 1.09%)</title><rect x="57.0652%" y="357" width="1.0870%" height="15" fill="rgb(209,212,41)" fg:x="105" fg:w="2"/><text x="57.3152%" y="367.50"></text></g><g><title>simulate.exe`core::iter::adapters::map::impl$2::next&lt;u8,core::iter::adapters::rev::Rev&lt;core::slice::iter::Iter&lt;u8&gt; &gt;,u8 (*)(ref$&lt;u8&gt;)&gt;(core::iter::adapters::map::Map&lt;core::iter::adapters::rev::Rev&lt;core::slice::iter::Iter&lt;u8&gt; &gt;,u8 (*)(ref$ (1 samples, 0.54%)</title><rect x="57.6087%" y="341" width="0.5435%" height="15" fill="rgb(207,154,6)" fg:x="106" fg:w="1"/><text x="57.8587%" y="351.50"></text></g><g><title>simulate.exe`core::iter::adapters::rev::impl$1::next&lt;core::slice::iter::Iter&lt;u8&gt; &gt;(core::iter::adapters::rev::Rev&lt;core::slice::iter::Iter (1 samples, 0.54%)</title><rect x="57.6087%" y="325" width="0.5435%" height="15" fill="rgb(223,64,47)" fg:x="106" fg:w="1"/><text x="57.8587%" y="335.50"></text></g><g><title>simulate.exe`core::slice::iter::impl$182::next_back&lt;u8&gt;(core::slice::iter::Iter (1 samples, 0.54%)</title><rect x="57.6087%" y="309" width="0.5435%" height="15" fill="rgb(211,161,38)" fg:x="106" fg:w="1"/><text x="57.8587%" y="319.50"></text></g><g><title>simulate.exe`kemkem::crypt::h(alloc::vec::Vec (2 samples, 1.09%)</title><rect x="58.1522%" y="389" width="1.0870%" height="15" fill="rgb(219,138,40)" fg:x="107" fg:w="2"/><text x="58.4022%" y="399.50"></text></g><g><title>simulate.exe`digest::digest::impl$0::update&lt;digest::core_api::wrapper::CoreWrapper&lt;sha3::Sha3_256Core&gt;,ref$&lt;alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt; &gt; &gt;(digest::core_api::wrapper::CoreWrapper&lt;sha3::Sha3_256Core&gt;*, alloc::vec::Vec (2 samples, 1.09%)</title><rect x="58.1522%" y="373" width="1.0870%" height="15" fill="rgb(241,228,46)" fg:x="107" fg:w="2"/><text x="58.4022%" y="383.50"></text></g><g><title>simulate.exe`digest::core_api::wrapper::impl$7::update&lt;sha3::Sha3_256Core&gt;(digest::core_api::wrapper::CoreWrapper&lt;sha3::Sha3_256Core&gt;*, ref$&lt;slice2$ (2 samples, 1.09%)</title><rect x="58.1522%" y="357" width="1.0870%" height="15" fill="rgb(223,209,38)" fg:x="107" fg:w="2"/><text x="58.4022%" y="367.50"></text></g><g><title>simulate.exe`block_buffer::BlockBuffer&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,block_buffer::Eager&gt;::digest_blocks&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,block_buffer::Eager,digest::core_api::wrapper::impl$7::update::closure_env$0&lt;sha3::Sha3_256Core&gt; &gt;(ref$&lt;slice2$&lt;u8&gt; &gt;, digest::core_api::wrapper::impl$7::update::closure_env$0 (2 samples, 1.09%)</title><rect x="58.1522%" y="341" width="1.0870%" height="15" fill="rgb(236,164,45)" fg:x="107" fg:w="2"/><text x="58.4022%" y="351.50"></text></g><g><title>simulate.exe`digest::core_api::wrapper::impl$7::update::closure$0&lt;sha3::Sha3_256Core&gt;(digest::core_api::wrapper::impl$7::update::closure_env$0&lt;sha3::Sha3_256Core&gt;*, ref$&lt;slice2$&lt;generic_array::GenericArray&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt (2 samples, 1.09%)</title><rect x="58.1522%" y="325" width="1.0870%" height="15" fill="rgb(231,15,5)" fg:x="107" fg:w="2"/><text x="58.4022%" y="335.50"></text></g><g><title>simulate.exe`sha3::impl$70::update_blocks(sha3::Sha3_256Core*, ref$&lt;slice2$&lt;generic_array::GenericArray&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt (2 samples, 1.09%)</title><rect x="58.1522%" y="309" width="1.0870%" height="15" fill="rgb(252,35,15)" fg:x="107" fg:w="2"/><text x="58.4022%" y="319.50"></text></g><g><title>simulate.exe`keccak::p1600 (2 samples, 1.09%)</title><rect x="58.1522%" y="293" width="1.0870%" height="15" fill="rgb(248,181,18)" fg:x="107" fg:w="2"/><text x="58.4022%" y="303.50"></text></g><g><title>simulate.exe`keccak::keccak_p&lt;u64&gt; (2 samples, 1.09%)</title><rect x="58.1522%" y="277" width="1.0870%" height="15" fill="rgb(233,39,42)" fg:x="107" fg:w="2"/><text x="58.4022%" y="287.50"></text></g><g><title>`0x7FFAF0C01371 (1 samples, 0.54%)</title><rect x="58.6957%" y="261" width="0.5435%" height="15" fill="rgb(238,110,33)" fg:x="108" fg:w="1"/><text x="58.9457%" y="271.50"></text></g><g><title>simulate.exe`rand::rngs::std::impl$0::fill_bytes(rand::rngs::std::StdRng*, ref_mut$&lt;slice2$ (1 samples, 0.54%)</title><rect x="59.2391%" y="373" width="0.5435%" height="15" fill="rgb(233,195,10)" fg:x="109" fg:w="1"/><text x="59.4891%" y="383.50"></text></g><g><title>simulate.exe`rand_chacha::chacha::impl$27::fill_bytes(rand_chacha::chacha::ChaCha12Rng*, ref_mut$&lt;slice2$ (1 samples, 0.54%)</title><rect x="59.2391%" y="357" width="0.5435%" height="15" fill="rgb(254,105,3)" fg:x="109" fg:w="1"/><text x="59.4891%" y="367.50"></text></g><g><title>simulate.exe`rand_core::block::impl$2::fill_bytes&lt;rand_chacha::chacha::ChaCha12Core&gt;(rand_core::block::BlockRng&lt;rand_chacha::chacha::ChaCha12Core&gt;*, ref_mut$&lt;slice2$ (1 samples, 0.54%)</title><rect x="59.2391%" y="341" width="0.5435%" height="15" fill="rgb(221,225,9)" fg:x="109" fg:w="1"/><text x="59.4891%" y="351.50"></text></g><g><title>simulate.exe`rand_core::block::BlockRng&lt;rand_chacha::chacha::ChaCha12Core&gt;::generate_and_set&lt;rand_chacha::chacha::ChaCha12Core&gt; (1 samples, 0.54%)</title><rect x="59.2391%" y="325" width="0.5435%" height="15" fill="rgb(224,227,45)" fg:x="109" fg:w="1"/><text x="59.4891%" y="335.50"></text></g><g><title>simulate.exe`rand_chacha::chacha::impl$23::generate(rand_chacha::chacha::ChaCha12Core*, rand_chacha::chacha::Array64 (1 samples, 0.54%)</title><rect x="59.2391%" y="309" width="0.5435%" height="15" fill="rgb(229,198,43)" fg:x="109" fg:w="1"/><text x="59.4891%" y="319.50"></text></g><g><title>simulate.exe`rand_chacha::guts::ChaCha::refill4 (1 samples, 0.54%)</title><rect x="59.2391%" y="293" width="0.5435%" height="15" fill="rgb(206,209,35)" fg:x="109" fg:w="1"/><text x="59.4891%" y="303.50"></text></g><g><title>simulate.exe`rand_chacha::guts::refill_wide (1 samples, 0.54%)</title><rect x="59.2391%" y="277" width="0.5435%" height="15" fill="rgb(245,195,53)" fg:x="109" fg:w="1"/><text x="59.4891%" y="287.50"></text></g><g><title>simulate.exe`rand_chacha::guts::refill_wide::impl_avx2 (1 samples, 0.54%)</title><rect x="59.2391%" y="261" width="0.5435%" height="15" fill="rgb(240,92,26)" fg:x="109" fg:w="1"/><text x="59.4891%" y="271.50"></text></g><g><title>simulate.exe`rand_chacha::guts::refill_wide::fn_impl(ppv_lite86::x86_64::Avx2Machine (1 samples, 0.54%)</title><rect x="59.2391%" y="245" width="0.5435%" height="15" fill="rgb(207,40,23)" fg:x="109" fg:w="1"/><text x="59.4891%" y="255.50"></text></g><g><title>simulate.exe`rand_chacha::guts::refill_wide_impl(ppv_lite86::x86_64::Avx2Machine (1 samples, 0.54%)</title><rect x="59.2391%" y="229" width="0.5435%" height="15" fill="rgb(223,111,35)" fg:x="109" fg:w="1"/><text x="59.4891%" y="239.50"></text></g><g><title>`0x7FFB0FD3360A (1 samples, 0.54%)</title><rect x="59.7826%" y="293" width="0.5435%" height="15" fill="rgb(229,147,28)" fg:x="110" fg:w="1"/><text x="60.0326%" y="303.50"></text></g><g><title>`0x7FFB0FD351DE (1 samples, 0.54%)</title><rect x="59.7826%" y="277" width="0.5435%" height="15" fill="rgb(211,29,28)" fg:x="110" fg:w="1"/><text x="60.0326%" y="287.50"></text></g><g><title>`0x7FFB0FD34F88 (1 samples, 0.54%)</title><rect x="59.7826%" y="261" width="0.5435%" height="15" fill="rgb(228,72,33)" fg:x="110" fg:w="1"/><text x="60.0326%" y="271.50"></text></g><g><title>`0x7FFB0FD36F25 (1 samples, 0.54%)</title><rect x="59.7826%" y="245" width="0.5435%" height="15" fill="rgb(205,214,31)" fg:x="110" fg:w="1"/><text x="60.0326%" y="255.50"></text></g><g><title>`0x7FFB1212D0C4 (1 samples, 0.54%)</title><rect x="59.7826%" y="229" width="0.5435%" height="15" fill="rgb(224,111,15)" fg:x="110" fg:w="1"/><text x="60.0326%" y="239.50"></text></g><g><title>`0x7FFB120A4AAA (1 samples, 0.54%)</title><rect x="60.3261%" y="133" width="0.5435%" height="15" fill="rgb(253,21,26)" fg:x="111" fg:w="1"/><text x="60.5761%" y="143.50"></text></g><g><title>`0x7FFB120A4D42 (1 samples, 0.54%)</title><rect x="60.3261%" y="117" width="0.5435%" height="15" fill="rgb(245,139,43)" fg:x="111" fg:w="1"/><text x="60.5761%" y="127.50"></text></g><g><title>`0x7FFB1212D4E4 (1 samples, 0.54%)</title><rect x="60.3261%" y="101" width="0.5435%" height="15" fill="rgb(252,170,7)" fg:x="111" fg:w="1"/><text x="60.5761%" y="111.50"></text></g><g><title>`0x7FFB120AFB31 (2 samples, 1.09%)</title><rect x="60.3261%" y="181" width="1.0870%" height="15" fill="rgb(231,118,14)" fg:x="111" fg:w="2"/><text x="60.5761%" y="191.50"></text></g><g><title>`0x7FFB120FB2BD (2 samples, 1.09%)</title><rect x="60.3261%" y="165" width="1.0870%" height="15" fill="rgb(238,83,0)" fg:x="111" fg:w="2"/><text x="60.5761%" y="175.50"></text></g><g><title>`0x7FFB120A4479 (2 samples, 1.09%)</title><rect x="60.3261%" y="149" width="1.0870%" height="15" fill="rgb(221,39,39)" fg:x="111" fg:w="2"/><text x="60.5761%" y="159.50"></text></g><g><title>`0x7FFB120A4C14 (1 samples, 0.54%)</title><rect x="60.8696%" y="133" width="0.5435%" height="15" fill="rgb(222,119,46)" fg:x="112" fg:w="1"/><text x="61.1196%" y="143.50"></text></g><g><title>`0x7FFB120A7BC4 (1 samples, 0.54%)</title><rect x="60.8696%" y="117" width="0.5435%" height="15" fill="rgb(222,165,49)" fg:x="112" fg:w="1"/><text x="61.1196%" y="127.50"></text></g><g><title>`0x7FFB120C27DA (1 samples, 0.54%)</title><rect x="60.8696%" y="101" width="0.5435%" height="15" fill="rgb(219,113,52)" fg:x="112" fg:w="1"/><text x="61.1196%" y="111.50"></text></g><g><title>`0x7FFB120C3432 (1 samples, 0.54%)</title><rect x="60.8696%" y="85" width="0.5435%" height="15" fill="rgb(214,7,15)" fg:x="112" fg:w="1"/><text x="61.1196%" y="95.50"></text></g><g><title>`0x7FFB120C22F6 (1 samples, 0.54%)</title><rect x="60.8696%" y="69" width="0.5435%" height="15" fill="rgb(235,32,4)" fg:x="112" fg:w="1"/><text x="61.1196%" y="79.50"></text></g><g><title>simulate.exe`kemkem::crypt::random_bytes&lt;32&gt; (5 samples, 2.72%)</title><rect x="59.2391%" y="389" width="2.7174%" height="15" fill="rgb(238,90,54)" fg:x="109" fg:w="5"/><text x="59.4891%" y="399.50">si..</text></g><g><title>simulate.exe`rand_core::SeedableRng::from_entropy&lt;rand::rngs::std::StdRng&gt; (4 samples, 2.17%)</title><rect x="59.7826%" y="373" width="2.1739%" height="15" fill="rgb(213,208,19)" fg:x="110" fg:w="4"/><text x="60.0326%" y="383.50">s..</text></g><g><title>simulate.exe`getrandom::getrandom(ref_mut$&lt;slice2$ (4 samples, 2.17%)</title><rect x="59.7826%" y="357" width="2.1739%" height="15" fill="rgb(233,156,4)" fg:x="110" fg:w="4"/><text x="60.0326%" y="367.50">s..</text></g><g><title>simulate.exe`getrandom::getrandom_uninit(ref_mut$&lt;slice2$&lt;core::mem::maybe_uninit::MaybeUninit (4 samples, 2.17%)</title><rect x="59.7826%" y="341" width="2.1739%" height="15" fill="rgb(207,194,5)" fg:x="110" fg:w="4"/><text x="60.0326%" y="351.50">s..</text></g><g><title>simulate.exe`getrandom::imp::getrandom_inner(ref_mut$&lt;slice2$&lt;core::mem::maybe_uninit::MaybeUninit (4 samples, 2.17%)</title><rect x="59.7826%" y="325" width="2.1739%" height="15" fill="rgb(206,111,30)" fg:x="110" fg:w="4"/><text x="60.0326%" y="335.50">s..</text></g><g><title>`0x7FFB0FD33559 (4 samples, 2.17%)</title><rect x="59.7826%" y="309" width="2.1739%" height="15" fill="rgb(243,70,54)" fg:x="110" fg:w="4"/><text x="60.0326%" y="319.50">`..</text></g><g><title>`0x7FFB0FD33642 (3 samples, 1.63%)</title><rect x="60.3261%" y="293" width="1.6304%" height="15" fill="rgb(242,28,8)" fg:x="111" fg:w="3"/><text x="60.5761%" y="303.50"></text></g><g><title>`0x7FFB0FD36435 (3 samples, 1.63%)</title><rect x="60.3261%" y="277" width="1.6304%" height="15" fill="rgb(219,106,18)" fg:x="111" fg:w="3"/><text x="60.5761%" y="287.50"></text></g><g><title>`0x7FFB0FD31E98 (3 samples, 1.63%)</title><rect x="60.3261%" y="261" width="1.6304%" height="15" fill="rgb(244,222,10)" fg:x="111" fg:w="3"/><text x="60.5761%" y="271.50"></text></g><g><title>`0x7FFB0FD32199 (3 samples, 1.63%)</title><rect x="60.3261%" y="245" width="1.6304%" height="15" fill="rgb(236,179,52)" fg:x="111" fg:w="3"/><text x="60.5761%" y="255.50"></text></g><g><title>`0x7FFB0FA63322 (3 samples, 1.63%)</title><rect x="60.3261%" y="229" width="1.6304%" height="15" fill="rgb(213,23,39)" fg:x="111" fg:w="3"/><text x="60.5761%" y="239.50"></text></g><g><title>`0x7FFB120A6AF4 (3 samples, 1.63%)</title><rect x="60.3261%" y="213" width="1.6304%" height="15" fill="rgb(238,48,10)" fg:x="111" fg:w="3"/><text x="60.5761%" y="223.50"></text></g><g><title>`0x7FFB120A73E4 (3 samples, 1.63%)</title><rect x="60.3261%" y="197" width="1.6304%" height="15" fill="rgb(251,196,23)" fg:x="111" fg:w="3"/><text x="60.5761%" y="207.50"></text></g><g><title>`0x7FFB120AFBAE (1 samples, 0.54%)</title><rect x="61.4130%" y="181" width="0.5435%" height="15" fill="rgb(250,152,24)" fg:x="113" fg:w="1"/><text x="61.6630%" y="191.50"></text></g><g><title>`0x7FFB120CD947 (1 samples, 0.54%)</title><rect x="61.4130%" y="165" width="0.5435%" height="15" fill="rgb(209,150,17)" fg:x="113" fg:w="1"/><text x="61.6630%" y="175.50"></text></g><g><title>`0x7FFB120FC05A (1 samples, 0.54%)</title><rect x="61.4130%" y="149" width="0.5435%" height="15" fill="rgb(234,202,34)" fg:x="113" fg:w="1"/><text x="61.6630%" y="159.50"></text></g><g><title>`0x7FFB120FC2C7 (1 samples, 0.54%)</title><rect x="61.4130%" y="133" width="0.5435%" height="15" fill="rgb(253,148,53)" fg:x="113" fg:w="1"/><text x="61.6630%" y="143.50"></text></g><g><title>`0x7FFB120A9A1D (1 samples, 0.54%)</title><rect x="61.4130%" y="117" width="0.5435%" height="15" fill="rgb(218,129,16)" fg:x="113" fg:w="1"/><text x="61.6630%" y="127.50"></text></g><g><title>`0x7FFB0F8B8C5E (1 samples, 0.54%)</title><rect x="61.4130%" y="101" width="0.5435%" height="15" fill="rgb(216,85,19)" fg:x="113" fg:w="1"/><text x="61.6630%" y="111.50"></text></g><g><title>`0x7FFB0F8985E2 (1 samples, 0.54%)</title><rect x="61.4130%" y="85" width="0.5435%" height="15" fill="rgb(235,228,7)" fg:x="113" fg:w="1"/><text x="61.6630%" y="95.50"></text></g><g><title>`0x7FFB0F8983A4 (1 samples, 0.54%)</title><rect x="61.4130%" y="69" width="0.5435%" height="15" fill="rgb(245,175,0)" fg:x="113" fg:w="1"/><text x="61.6630%" y="79.50"></text></g><g><title>`0x7FFB0F89F10D (1 samples, 0.54%)</title><rect x="61.4130%" y="53" width="0.5435%" height="15" fill="rgb(208,168,36)" fg:x="113" fg:w="1"/><text x="61.6630%" y="63.50"></text></g><g><title>`0x7FFB11FA58A5 (1 samples, 0.54%)</title><rect x="61.4130%" y="37" width="0.5435%" height="15" fill="rgb(246,171,24)" fg:x="113" fg:w="1"/><text x="61.6630%" y="47.50"></text></g><g><title>simulate.exe`kemkem::crypt::XOF::new(ref$&lt;slice2$ (4 samples, 2.17%)</title><rect x="61.9565%" y="373" width="2.1739%" height="15" fill="rgb(215,142,24)" fg:x="114" fg:w="4"/><text x="62.2065%" y="383.50">s..</text></g><g><title>simulate.exe`digest::core_api::wrapper::impl$11::finalize_xof&lt;sha3::Shake128Core&gt;(digest::core_api::wrapper::CoreWrapper (4 samples, 2.17%)</title><rect x="61.9565%" y="357" width="2.1739%" height="15" fill="rgb(250,187,7)" fg:x="114" fg:w="4"/><text x="62.2065%" y="367.50">s..</text></g><g><title>simulate.exe`sha3::impl$103::finalize_xof_core(sha3::Shake128Core*, block_buffer::BlockBuffer&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt (4 samples, 2.17%)</title><rect x="61.9565%" y="341" width="2.1739%" height="15" fill="rgb(228,66,33)" fg:x="114" fg:w="4"/><text x="62.2065%" y="351.50">s..</text></g><g><title>simulate.exe`sha3::state::Sha3State::absorb_block(ref$&lt;slice2$ (4 samples, 2.17%)</title><rect x="61.9565%" y="325" width="2.1739%" height="15" fill="rgb(234,215,21)" fg:x="114" fg:w="4"/><text x="62.2065%" y="335.50">s..</text></g><g><title>simulate.exe`keccak::p1600 (4 samples, 2.17%)</title><rect x="61.9565%" y="309" width="2.1739%" height="15" fill="rgb(222,191,20)" fg:x="114" fg:w="4"/><text x="62.2065%" y="319.50">s..</text></g><g><title>simulate.exe`keccak::keccak_p&lt;u64&gt; (4 samples, 2.17%)</title><rect x="61.9565%" y="293" width="2.1739%" height="15" fill="rgb(245,79,54)" fg:x="114" fg:w="4"/><text x="62.2065%" y="303.50">s..</text></g><g><title>simulate.exe`core::ops::bit::impl$136::bitxor (1 samples, 0.54%)</title><rect x="63.5870%" y="277" width="0.5435%" height="15" fill="rgb(240,10,37)" fg:x="117" fg:w="1"/><text x="63.8370%" y="287.50"></text></g><g><title>simulate.exe`digest::digest::impl$0::finalize&lt;digest::core_api::wrapper::CoreWrapper&lt;sha3::Sha3_512Core&gt; &gt;(digest::core_api::wrapper::CoreWrapper (1 samples, 0.54%)</title><rect x="64.1304%" y="357" width="0.5435%" height="15" fill="rgb(214,192,32)" fg:x="118" fg:w="1"/><text x="64.3804%" y="367.50"></text></g><g><title>simulate.exe`digest::FixedOutput::finalize_fixed&lt;digest::core_api::wrapper::CoreWrapper&lt;sha3::Sha3_512Core&gt; &gt;(digest::core_api::wrapper::CoreWrapper (1 samples, 0.54%)</title><rect x="64.1304%" y="341" width="0.5435%" height="15" fill="rgb(209,36,54)" fg:x="118" fg:w="1"/><text x="64.3804%" y="351.50"></text></g><g><title>simulate.exe`digest::core_api::wrapper::impl$9::finalize_into&lt;sha3::Sha3_512Core&gt;(digest::core_api::wrapper::CoreWrapper&lt;sha3::Sha3_512Core&gt;, generic_array::GenericArray&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt (1 samples, 0.54%)</title><rect x="64.1304%" y="325" width="0.5435%" height="15" fill="rgb(220,10,11)" fg:x="118" fg:w="1"/><text x="64.3804%" y="335.50"></text></g><g><title>simulate.exe`sha3::impl$93::finalize_fixed_core(sha3::Sha3_512Core*, block_buffer::BlockBuffer&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,block_buffer::Eager&gt;*, generic_array::GenericArray&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt (1 samples, 0.54%)</title><rect x="64.1304%" y="309" width="0.5435%" height="15" fill="rgb(221,106,17)" fg:x="118" fg:w="1"/><text x="64.3804%" y="319.50"></text></g><g><title>simulate.exe`sha3::state::Sha3State::absorb_block(ref$&lt;slice2$ (1 samples, 0.54%)</title><rect x="64.1304%" y="293" width="0.5435%" height="15" fill="rgb(251,142,44)" fg:x="118" fg:w="1"/><text x="64.3804%" y="303.50"></text></g><g><title>simulate.exe`keccak::p1600 (1 samples, 0.54%)</title><rect x="64.1304%" y="277" width="0.5435%" height="15" fill="rgb(238,13,15)" fg:x="118" fg:w="1"/><text x="64.3804%" y="287.50"></text></g><g><title>simulate.exe`keccak::keccak_p&lt;u64&gt; (1 samples, 0.54%)</title><rect x="64.1304%" y="261" width="0.5435%" height="15" fill="rgb(208,107,27)" fg:x="118" fg:w="1"/><text x="64.3804%" y="271.50"></text></g><g><title>simulate.exe`kemkem::crypt::g&lt;32&gt; (2 samples, 1.09%)</title><rect x="64.1304%" y="373" width="1.0870%" height="15" fill="rgb(205,136,37)" fg:x="118" fg:w="2"/><text x="64.3804%" y="383.50"></text></g><g><title>simulate.exe`digest::digest::impl$0::new&lt;digest::core_api::wrapper::CoreWrapper&lt;sha3::Sha3_512Core&gt; &gt; (1 samples, 0.54%)</title><rect x="64.6739%" y="357" width="0.5435%" height="15" fill="rgb(250,205,27)" fg:x="119" fg:w="1"/><text x="64.9239%" y="367.50"></text></g><g><title>simulate.exe`digest::core_api::wrapper::impl$17::default&lt;sha3::Sha3_512Core&gt; (1 samples, 0.54%)</title><rect x="64.6739%" y="341" width="0.5435%" height="15" fill="rgb(210,80,43)" fg:x="119" fg:w="1"/><text x="64.9239%" y="351.50"></text></g><g><title>simulate.exe`sha3::impl$94::default (1 samples, 0.54%)</title><rect x="64.6739%" y="325" width="0.5435%" height="15" fill="rgb(247,160,36)" fg:x="119" fg:w="1"/><text x="64.9239%" y="335.50"></text></g><g><title>simulate.exe`sha3::state::impl$0::default (1 samples, 0.54%)</title><rect x="64.6739%" y="309" width="0.5435%" height="15" fill="rgb(234,13,49)" fg:x="119" fg:w="1"/><text x="64.9239%" y="319.50"></text></g><g><title>simulate.exe`block_buffer::impl$3::default&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,block_buffer::Eager&gt; (1 samples, 0.54%)</title><rect x="65.2174%" y="341" width="0.5435%" height="15" fill="rgb(234,122,0)" fg:x="120" fg:w="1"/><text x="65.4674%" y="351.50"></text></g><g><title>simulate.exe`generic_array::impls::impl$0::default (1 samples, 0.54%)</title><rect x="65.2174%" y="325" width="0.5435%" height="15" fill="rgb(207,146,38)" fg:x="120" fg:w="1"/><text x="65.4674%" y="335.50"></text></g><g><title>simulate.exe`generic_array::impl$18::generate&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,generic_array::impls::impl$0::default::closure_env$0&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt; &gt; &gt;(generic_array::impls::impl$0::default::closure_env$0&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt (1 samples, 0.54%)</title><rect x="65.2174%" y="309" width="0.5435%" height="15" fill="rgb(207,177,25)" fg:x="120" fg:w="1"/><text x="65.4674%" y="319.50"></text></g><g><title>simulate.exe`generic_array::ArrayBuilder&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt; &gt;::iter_position&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt; &gt; (1 samples, 0.54%)</title><rect x="65.2174%" y="293" width="0.5435%" height="15" fill="rgb(211,178,42)" fg:x="120" fg:w="1"/><text x="65.4674%" y="303.50"></text></g><g><title>simulate.exe`generic_array::impl$10::deref_mut(generic_array::GenericArray&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt (1 samples, 0.54%)</title><rect x="65.2174%" y="277" width="0.5435%" height="15" fill="rgb(230,69,54)" fg:x="120" fg:w="1"/><text x="65.4674%" y="287.50"></text></g><g><title>simulate.exe`core::slice::raw::from_raw_parts_mut&lt;u8&gt; (1 samples, 0.54%)</title><rect x="65.2174%" y="261" width="0.5435%" height="15" fill="rgb(214,135,41)" fg:x="120" fg:w="1"/><text x="65.4674%" y="271.50"></text></g><g><title>simulate.exe`core::ptr::slice_from_raw_parts_mut (1 samples, 0.54%)</title><rect x="65.2174%" y="245" width="0.5435%" height="15" fill="rgb(237,67,25)" fg:x="120" fg:w="1"/><text x="65.4674%" y="255.50"></text></g><g><title>simulate.exe`core::ptr::mut_ptr::impl$0::cast (1 samples, 0.54%)</title><rect x="65.2174%" y="229" width="0.5435%" height="15" fill="rgb(222,189,50)" fg:x="120" fg:w="1"/><text x="65.4674%" y="239.50"></text></g><g><title>simulate.exe`core::slice::raw::from_raw_parts_mut::precondition_check(tuple$ (1 samples, 0.54%)</title><rect x="65.2174%" y="213" width="0.5435%" height="15" fill="rgb(245,148,34)" fg:x="120" fg:w="1"/><text x="65.4674%" y="223.50"></text></g><g><title>simulate.exe`core::ub_checks::is_valid_allocation_size (1 samples, 0.54%)</title><rect x="65.2174%" y="197" width="0.5435%" height="15" fill="rgb(222,29,6)" fg:x="120" fg:w="1"/><text x="65.4674%" y="207.50"></text></g><g><title>simulate.exe`digest::core_api::wrapper::impl$11::finalize_xof&lt;sha3::Shake256Core&gt;(digest::core_api::wrapper::CoreWrapper (2 samples, 1.09%)</title><rect x="65.2174%" y="357" width="1.0870%" height="15" fill="rgb(221,189,43)" fg:x="120" fg:w="2"/><text x="65.4674%" y="367.50"></text></g><g><title>simulate.exe`sha3::impl$116::finalize_xof_core(sha3::Shake256Core*, block_buffer::BlockBuffer&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt (1 samples, 0.54%)</title><rect x="65.7609%" y="341" width="0.5435%" height="15" fill="rgb(207,36,27)" fg:x="121" fg:w="1"/><text x="66.0109%" y="351.50"></text></g><g><title>simulate.exe`sha3::state::Sha3State::absorb_block(ref$&lt;slice2$ (1 samples, 0.54%)</title><rect x="65.7609%" y="325" width="0.5435%" height="15" fill="rgb(217,90,24)" fg:x="121" fg:w="1"/><text x="66.0109%" y="335.50"></text></g><g><title>simulate.exe`keccak::p1600 (1 samples, 0.54%)</title><rect x="65.7609%" y="309" width="0.5435%" height="15" fill="rgb(224,66,35)" fg:x="121" fg:w="1"/><text x="66.0109%" y="319.50"></text></g><g><title>simulate.exe`keccak::keccak_p&lt;u64&gt; (1 samples, 0.54%)</title><rect x="65.7609%" y="293" width="0.5435%" height="15" fill="rgb(221,13,50)" fg:x="121" fg:w="1"/><text x="66.0109%" y="303.50"></text></g><g><title>simulate.exe`generic_array::impls::impl$0::default (2 samples, 1.09%)</title><rect x="66.3043%" y="293" width="1.0870%" height="15" fill="rgb(236,68,49)" fg:x="122" fg:w="2"/><text x="66.5543%" y="303.50"></text></g><g><title>simulate.exe`generic_array::impl$18::generate&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,generic_array::impls::impl$0::default::closure_env$0&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt; &gt; &gt;(generic_array::impls::impl$0::default::closure_env$0&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt (2 samples, 1.09%)</title><rect x="66.3043%" y="277" width="1.0870%" height="15" fill="rgb(229,146,28)" fg:x="122" fg:w="2"/><text x="66.5543%" y="287.50"></text></g><g><title>simulate.exe`core::iter::traits::iterator::Iterator::for_each&lt;core::iter::adapters::enumerate::Enumerate&lt;core::slice::iter::IterMut&lt;u8&gt; &gt;,generic_array::impl$18::generate::closure_env$0&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,generic_array::impls::impl$0::default::closure_env$0&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt; &gt; &gt; &gt;(core::iter::adapters::enumerate::Enumerate&lt;core::slice::iter::IterMut&lt;u8&gt; &gt;, generic_array::impl$18::generate::closure_env$0&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,generic_array::impls::impl$0::default::closure_env$0&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt (2 samples, 1.09%)</title><rect x="66.3043%" y="261" width="1.0870%" height="15" fill="rgb(225,31,38)" fg:x="122" fg:w="2"/><text x="66.5543%" y="271.50"></text></g><g><title>simulate.exe`core::iter::adapters::enumerate::impl$1::fold&lt;core::slice::iter::IterMut&lt;u8&gt;,tuple$&lt;&gt;,core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;tuple$&lt;usize,ref_mut$&lt;u8&gt; &gt;,generic_array::impl$18::generate::closure_env$0&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,generic_array::impls::impl$0::default::closure_env$0&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt; &gt; &gt; &gt; &gt;(core::iter::adapters::enumerate::Enumerate&lt;core::slice::iter::IterMut&lt;u8&gt; &gt;, tuple$&lt;&gt;, core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;tuple$&lt;usize,ref_mut$&lt;u8&gt; &gt;,generic_array::impl$18::generate::closure_env$0&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,generic_array::impls::impl$0::default::closure_env$0&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt (2 samples, 1.09%)</title><rect x="66.3043%" y="245" width="1.0870%" height="15" fill="rgb(250,208,3)" fg:x="122" fg:w="2"/><text x="66.5543%" y="255.50"></text></g><g><title>simulate.exe`core::slice::iter::impl$189::fold&lt;u8,tuple$&lt;&gt;,core::iter::adapters::enumerate::impl$1::fold::enumerate::closure_env$0&lt;ref_mut$&lt;u8&gt;,tuple$&lt;&gt;,core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;tuple$&lt;usize,ref_mut$&lt;u8&gt; &gt;,generic_array::impl$18::generate::closure_env$0&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,generic_array::impls::impl$0::default::closure_env$0&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt; &gt; &gt; &gt; &gt; &gt;(core::slice::iter::IterMut&lt;u8&gt;, tuple$&lt;&gt;, core::iter::adapters::enumerate::impl$1::fold::enumerate::closure_env$0&lt;ref_mut$&lt;u8&gt;,tuple$&lt;&gt;,core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;tuple$&lt;usize,ref_mut$&lt;u8&gt; &gt;,generic_array::impl$18::generate::closure_env$0&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,generic_array::impls::impl$0::default::closure_env$0&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt (2 samples, 1.09%)</title><rect x="66.3043%" y="229" width="1.0870%" height="15" fill="rgb(246,54,23)" fg:x="122" fg:w="2"/><text x="66.5543%" y="239.50"></text></g><g><title>simulate.exe`core::iter::adapters::enumerate::impl$1::fold::enumerate::closure$0&lt;ref_mut$&lt;u8&gt;,tuple$&lt;&gt;,core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;tuple$&lt;usize,ref_mut$&lt;u8&gt; &gt;,generic_array::impl$18::generate::closure_env$0&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,generic_array::impls::impl$0::default::closure_env$0&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt; &gt; &gt; &gt; &gt;(core::iter::adapters::enumerate::impl$1::fold::enumerate::closure_env$0&lt;ref_mut$&lt;u8&gt;,tuple$&lt;&gt;,core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;tuple$&lt;usize,ref_mut$&lt;u8&gt; &gt;,generic_array::impl$18::generate::closure_env$0&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,generic_array::impls::impl$0::default::closure_env$0&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt; &gt; &gt; &gt; &gt;*, tuple$ (2 samples, 1.09%)</title><rect x="66.3043%" y="213" width="1.0870%" height="15" fill="rgb(243,76,11)" fg:x="122" fg:w="2"/><text x="66.5543%" y="223.50"></text></g><g><title>simulate.exe`core::iter::traits::iterator::Iterator::for_each::call::closure$0&lt;tuple$&lt;usize,ref_mut$&lt;u8&gt; &gt;,generic_array::impl$18::generate::closure_env$0&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,generic_array::impls::impl$0::default::closure_env$0&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt; &gt; &gt; &gt;(core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;tuple$&lt;usize,ref_mut$&lt;u8&gt; &gt;,generic_array::impl$18::generate::closure_env$0&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,generic_array::impls::impl$0::default::closure_env$0&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt; &gt; &gt; &gt;*, tuple$&lt;&gt;, tuple$&lt;usize,ref_mut$ (1 samples, 0.54%)</title><rect x="66.8478%" y="197" width="0.5435%" height="15" fill="rgb(245,21,50)" fg:x="123" fg:w="1"/><text x="67.0978%" y="207.50"></text></g><g><title>simulate.exe`generic_array::impl$18::generate::closure$0&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,generic_array::impls::impl$0::default::closure_env$0&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt; &gt; &gt;(generic_array::impl$18::generate::closure_env$0&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,generic_array::impls::impl$0::default::closure_env$0&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt; &gt; &gt;*, tuple$&lt;usize,ref_mut$ (1 samples, 0.54%)</title><rect x="66.8478%" y="181" width="0.5435%" height="15" fill="rgb(228,9,43)" fg:x="123" fg:w="1"/><text x="67.0978%" y="191.50"></text></g><g><title>simulate.exe`core::ptr::write&lt;u8&gt; (1 samples, 0.54%)</title><rect x="66.8478%" y="165" width="0.5435%" height="15" fill="rgb(208,100,47)" fg:x="123" fg:w="1"/><text x="67.0978%" y="175.50"></text></g><g><title>simulate.exe`kemkem::crypt::prf&lt;3&gt; (5 samples, 2.72%)</title><rect x="65.2174%" y="373" width="2.7174%" height="15" fill="rgb(232,26,8)" fg:x="120" fg:w="5"/><text x="65.4674%" y="383.50">si..</text></g><g><title>simulate.exe`digest::core_api::xof_reader::impl$1::read&lt;sha3::Shake256ReaderCore&gt;(digest::core_api::xof_reader::XofReaderCoreWrapper&lt;sha3::Shake256ReaderCore&gt;*, ref_mut$&lt;slice2$ (3 samples, 1.63%)</title><rect x="66.3043%" y="357" width="1.6304%" height="15" fill="rgb(216,166,38)" fg:x="122" fg:w="3"/><text x="66.5543%" y="367.50"></text></g><g><title>simulate.exe`block_buffer::BlockBuffer&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,block_buffer::Eager&gt;::set_data&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,digest::core_api::xof_reader::impl$1::read::closure_env$0&lt;sha3::Shake256ReaderCore&gt; &gt;(ref_mut$&lt;slice2$&lt;u8&gt; &gt;, digest::core_api::xof_reader::impl$1::read::closure_env$0 (3 samples, 1.63%)</title><rect x="66.3043%" y="341" width="1.6304%" height="15" fill="rgb(251,202,51)" fg:x="122" fg:w="3"/><text x="66.5543%" y="351.50"></text></g><g><title>simulate.exe`digest::core_api::xof_reader::impl$1::read::closure$0&lt;sha3::Shake256ReaderCore&gt;(digest::core_api::xof_reader::impl$1::read::closure_env$0&lt;sha3::Shake256ReaderCore&gt;*, ref_mut$&lt;slice2$&lt;generic_array::GenericArray&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt (3 samples, 1.63%)</title><rect x="66.3043%" y="325" width="1.6304%" height="15" fill="rgb(254,216,34)" fg:x="122" fg:w="3"/><text x="66.5543%" y="335.50"></text></g><g><title>simulate.exe`sha3::impl$122::read_block (3 samples, 1.63%)</title><rect x="66.3043%" y="309" width="1.6304%" height="15" fill="rgb(251,32,27)" fg:x="122" fg:w="3"/><text x="66.5543%" y="319.50"></text></g><g><title>simulate.exe`sha3::state::Sha3State::permute (1 samples, 0.54%)</title><rect x="67.3913%" y="293" width="0.5435%" height="15" fill="rgb(208,127,28)" fg:x="124" fg:w="1"/><text x="67.6413%" y="303.50"></text></g><g><title>simulate.exe`keccak::p1600 (1 samples, 0.54%)</title><rect x="67.3913%" y="277" width="0.5435%" height="15" fill="rgb(224,137,22)" fg:x="124" fg:w="1"/><text x="67.6413%" y="287.50"></text></g><g><title>simulate.exe`keccak::keccak_p&lt;u64&gt; (1 samples, 0.54%)</title><rect x="67.3913%" y="261" width="0.5435%" height="15" fill="rgb(254,70,32)" fg:x="124" fg:w="1"/><text x="67.6413%" y="271.50"></text></g><g><title>simulate.exe`kemkem::ring::Matrix&lt;2&gt;::right_vector_multiply&lt;2&gt;(kemkem::ring::Matrix&lt;2&gt;, kemkem::ring::Vector (1 samples, 0.54%)</title><rect x="67.9348%" y="373" width="0.5435%" height="15" fill="rgb(229,75,37)" fg:x="125" fg:w="1"/><text x="68.1848%" y="383.50"></text></g><g><title>simulate.exe`kemkem::ring::Ring::add (1 samples, 0.54%)</title><rect x="67.9348%" y="357" width="0.5435%" height="15" fill="rgb(252,64,23)" fg:x="125" fg:w="1"/><text x="68.1848%" y="367.50"></text></g><g><title>simulate.exe`kemkem::ring::Vector&lt;2&gt;::ntt&lt;2&gt;(kemkem::ring::Vector (1 samples, 0.54%)</title><rect x="68.4783%" y="373" width="0.5435%" height="15" fill="rgb(232,162,48)" fg:x="126" fg:w="1"/><text x="68.7283%" y="383.50"></text></g><g><title>simulate.exe`kemkem::ring::Ring::ntt (1 samples, 0.54%)</title><rect x="68.4783%" y="357" width="0.5435%" height="15" fill="rgb(246,160,12)" fg:x="126" fg:w="1"/><text x="68.7283%" y="367.50"></text></g><g><title>simulate.exe`kemkem::util::fastmodpow (1 samples, 0.54%)</title><rect x="68.4783%" y="341" width="0.5435%" height="15" fill="rgb(247,166,0)" fg:x="126" fg:w="1"/><text x="68.7283%" y="351.50"></text></g><g><title>`0x7FFAF0C013A8 (1 samples, 0.54%)</title><rect x="70.1087%" y="229" width="0.5435%" height="15" fill="rgb(249,219,21)" fg:x="129" fg:w="1"/><text x="70.3587%" y="239.50"></text></g><g><title>simulate.exe`kemkem::sample::sample_ntt (4 samples, 2.17%)</title><rect x="69.0217%" y="373" width="2.1739%" height="15" fill="rgb(205,209,3)" fg:x="127" fg:w="4"/><text x="69.2717%" y="383.50">s..</text></g><g><title>simulate.exe`kemkem::crypt::XOF::get_3_bytes (4 samples, 2.17%)</title><rect x="69.0217%" y="357" width="2.1739%" height="15" fill="rgb(243,44,1)" fg:x="127" fg:w="4"/><text x="69.2717%" y="367.50">s..</text></g><g><title>simulate.exe`digest::core_api::xof_reader::impl$1::read&lt;sha3::Shake128ReaderCore&gt;(digest::core_api::xof_reader::XofReaderCoreWrapper&lt;sha3::Shake128ReaderCore&gt;*, ref_mut$&lt;slice2$ (4 samples, 2.17%)</title><rect x="69.0217%" y="341" width="2.1739%" height="15" fill="rgb(206,159,16)" fg:x="127" fg:w="4"/><text x="69.2717%" y="351.50">s..</text></g><g><title>simulate.exe`block_buffer::BlockBuffer&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,block_buffer::Eager&gt;::set_data&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,digest::core_api::xof_reader::impl$1::read::closure_env$0&lt;sha3::Shake128ReaderCore&gt; &gt;(ref_mut$&lt;slice2$&lt;u8&gt; &gt;, digest::core_api::xof_reader::impl$1::read::closure_env$0 (4 samples, 2.17%)</title><rect x="69.0217%" y="325" width="2.1739%" height="15" fill="rgb(244,77,30)" fg:x="127" fg:w="4"/><text x="69.2717%" y="335.50">s..</text></g><g><title>simulate.exe`digest::core_api::xof_reader::impl$1::read::closure$0&lt;sha3::Shake128ReaderCore&gt;(digest::core_api::xof_reader::impl$1::read::closure_env$0&lt;sha3::Shake128ReaderCore&gt;*, ref_mut$&lt;slice2$&lt;generic_array::GenericArray&lt;u8,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt (4 samples, 2.17%)</title><rect x="69.0217%" y="309" width="2.1739%" height="15" fill="rgb(218,69,12)" fg:x="127" fg:w="4"/><text x="69.2717%" y="319.50">s..</text></g><g><title>simulate.exe`sha3::impl$109::read_block (4 samples, 2.17%)</title><rect x="69.0217%" y="293" width="2.1739%" height="15" fill="rgb(212,87,7)" fg:x="127" fg:w="4"/><text x="69.2717%" y="303.50">s..</text></g><g><title>simulate.exe`sha3::state::Sha3State::permute (4 samples, 2.17%)</title><rect x="69.0217%" y="277" width="2.1739%" height="15" fill="rgb(245,114,25)" fg:x="127" fg:w="4"/><text x="69.2717%" y="287.50">s..</text></g><g><title>simulate.exe`keccak::p1600 (4 samples, 2.17%)</title><rect x="69.0217%" y="261" width="2.1739%" height="15" fill="rgb(210,61,42)" fg:x="127" fg:w="4"/><text x="69.2717%" y="271.50">s..</text></g><g><title>simulate.exe`keccak::keccak_p&lt;u64&gt; (4 samples, 2.17%)</title><rect x="69.0217%" y="245" width="2.1739%" height="15" fill="rgb(211,52,33)" fg:x="127" fg:w="4"/><text x="69.2717%" y="255.50">s..</text></g><g><title>simulate.exe`keccak::impl$3::rotate_left (1 samples, 0.54%)</title><rect x="70.6522%" y="229" width="0.5435%" height="15" fill="rgb(234,58,33)" fg:x="130" fg:w="1"/><text x="70.9022%" y="239.50"></text></g><g><title>simulate.exe`bitvec::index::BitIdx&lt;u8&gt;::offset&lt;u8&gt;(bitvec::index::BitIdx (2 samples, 1.09%)</title><rect x="71.1957%" y="261" width="1.0870%" height="15" fill="rgb(220,115,36)" fg:x="131" fg:w="2"/><text x="71.4457%" y="271.50"></text></g><g><title>simulate.exe`bitvec::index::BitIdx&lt;u8&gt;::into_inner&lt;u8&gt;(bitvec::index::BitIdx (1 samples, 0.54%)</title><rect x="71.7391%" y="245" width="0.5435%" height="15" fill="rgb(243,153,54)" fg:x="132" fg:w="1"/><text x="71.9891%" y="255.50"></text></g><g><title>simulate.exe`bitvec::ptr::single::BitPtr&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt;::new_unchecked&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt;(wyz::comu::Address&lt;wyz::comu::Const,u8&gt;, bitvec::index::BitIdx (1 samples, 0.54%)</title><rect x="72.2826%" y="261" width="0.5435%" height="15" fill="rgb(251,47,18)" fg:x="133" fg:w="1"/><text x="72.5326%" y="271.50"></text></g><g><title>simulate.exe`enum2$&lt;core::result::Result&lt;bitvec::ptr::single::BitPtr&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt;,bitvec::ptr::addr::MisalignError&lt;u8&gt; &gt; &gt;::unwrap(enum2$&lt;core::result::Result&lt;bitvec::ptr::single::BitPtr&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt;,bitvec::ptr::addr::MisalignError (1 samples, 0.54%)</title><rect x="72.2826%" y="245" width="0.5435%" height="15" fill="rgb(242,102,42)" fg:x="133" fg:w="1"/><text x="72.5326%" y="255.50"></text></g><g><title>simulate.exe`bitvec::ptr::single::BitPtr&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt;::new&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt;(wyz::comu::Address&lt;wyz::comu::Const,u8&gt;, bitvec::index::BitIdx (1 samples, 0.54%)</title><rect x="72.2826%" y="229" width="0.5435%" height="15" fill="rgb(234,31,38)" fg:x="133" fg:w="1"/><text x="72.5326%" y="239.50"></text></g><g><title>simulate.exe`bitvec::ptr::single::BitPtr&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt;::add&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt;(bitvec::ptr::single::BitPtr (4 samples, 2.17%)</title><rect x="71.1957%" y="293" width="2.1739%" height="15" fill="rgb(221,117,51)" fg:x="131" fg:w="4"/><text x="71.4457%" y="303.50">s..</text></g><g><title>simulate.exe`bitvec::ptr::single::BitPtr&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt;::offset&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt;(bitvec::ptr::single::BitPtr (4 samples, 2.17%)</title><rect x="71.1957%" y="277" width="2.1739%" height="15" fill="rgb(212,20,18)" fg:x="131" fg:w="4"/><text x="71.4457%" y="287.50">s..</text></g><g><title>simulate.exe`wyz::comu::Address&lt;wyz::comu::Const,u8&gt;::offset&lt;wyz::comu::Const,u8&gt;(wyz::comu::Address (1 samples, 0.54%)</title><rect x="72.8261%" y="261" width="0.5435%" height="15" fill="rgb(245,133,36)" fg:x="134" fg:w="1"/><text x="73.0761%" y="271.50"></text></g><g><title>simulate.exe`wyz::comu::Address&lt;wyz::comu::Const,u8&gt;::with_ptr&lt;wyz::comu::Const,u8,u8,wyz::comu::impl$10::offset::closure_env$0&lt;wyz::comu::Const,u8&gt; &gt;(wyz::comu::Address&lt;wyz::comu::Const,u8&gt;, wyz::comu::impl$10::offset::closure_env$0 (1 samples, 0.54%)</title><rect x="72.8261%" y="245" width="0.5435%" height="15" fill="rgb(212,6,19)" fg:x="134" fg:w="1"/><text x="73.0761%" y="255.50"></text></g><g><title>simulate.exe`tap::pipe::Pipe::pipe(unsigned char*, wyz::comu::impl$10::offset::closure_env$0 (1 samples, 0.54%)</title><rect x="72.8261%" y="229" width="0.5435%" height="15" fill="rgb(218,1,36)" fg:x="134" fg:w="1"/><text x="73.0761%" y="239.50"></text></g><g><title>simulate.exe`bitvec::ptr::single::BitPtr&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt;::new_unchecked&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt;(wyz::comu::Address&lt;wyz::comu::Const,u8&gt;, bitvec::index::BitIdx (1 samples, 0.54%)</title><rect x="73.9130%" y="261" width="0.5435%" height="15" fill="rgb(246,84,54)" fg:x="136" fg:w="1"/><text x="74.1630%" y="271.50"></text></g><g><title>simulate.exe`enum2$&lt;core::result::Result&lt;bitvec::ptr::single::BitPtr&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt;,bitvec::ptr::addr::MisalignError&lt;u8&gt; &gt; &gt;::unwrap(enum2$&lt;core::result::Result&lt;bitvec::ptr::single::BitPtr&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt;,bitvec::ptr::addr::MisalignError (1 samples, 0.54%)</title><rect x="73.9130%" y="245" width="0.5435%" height="15" fill="rgb(242,110,6)" fg:x="136" fg:w="1"/><text x="74.1630%" y="255.50"></text></g><g><title>simulate.exe`bitvec::ptr::single::BitPtr&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt;::new&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt;(wyz::comu::Address&lt;wyz::comu::Const,u8&gt;, bitvec::index::BitIdx (1 samples, 0.54%)</title><rect x="73.9130%" y="229" width="0.5435%" height="15" fill="rgb(214,47,5)" fg:x="136" fg:w="1"/><text x="74.1630%" y="239.50"></text></g><g><title>simulate.exe`core::result::impl$26::branch&lt;wyz::comu::Address&lt;wyz::comu::Const,u8&gt;,bitvec::ptr::addr::MisalignError&lt;u8&gt; &gt;(enum2$&lt;core::result::Result&lt;wyz::comu::Address&lt;wyz::comu::Const,u8&gt;,bitvec::ptr::addr::MisalignError (1 samples, 0.54%)</title><rect x="73.9130%" y="213" width="0.5435%" height="15" fill="rgb(218,159,25)" fg:x="136" fg:w="1"/><text x="74.1630%" y="223.50"></text></g><g><title>simulate.exe`bitvec::ptr::span::BitSpan&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt;::to_bitptr&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt;(bitvec::ptr::span::BitSpan (3 samples, 1.63%)</title><rect x="73.3696%" y="277" width="1.6304%" height="15" fill="rgb(215,211,28)" fg:x="135" fg:w="3"/><text x="73.6196%" y="287.50"></text></g><g><title>simulate.exe`bitvec::ptr::span::BitSpan&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt;::address&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt; (1 samples, 0.54%)</title><rect x="74.4565%" y="261" width="0.5435%" height="15" fill="rgb(238,59,32)" fg:x="137" fg:w="1"/><text x="74.7065%" y="271.50"></text></g><g><title>simulate.exe`bitvec::slice::BitSlice&lt;u8,bitvec::order::Lsb0&gt;::as_bitptr&lt;u8,bitvec::order::Lsb0&gt;(ref$&lt;bitvec::slice::BitSlice (5 samples, 2.72%)</title><rect x="73.3696%" y="293" width="2.7174%" height="15" fill="rgb(226,82,3)" fg:x="135" fg:w="5"/><text x="73.6196%" y="303.50">si..</text></g><g><title>simulate.exe`bitvec::slice::BitSlice&lt;u8,bitvec::order::Lsb0&gt;::as_bitspan&lt;u8,bitvec::order::Lsb0&gt;(ref$&lt;bitvec::slice::BitSlice (2 samples, 1.09%)</title><rect x="75.0000%" y="277" width="1.0870%" height="15" fill="rgb(240,164,32)" fg:x="138" fg:w="2"/><text x="75.2500%" y="287.50"></text></g><g><title>simulate.exe`bitvec::ptr::span::BitSpan&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt;::from_bitslice_ptr&lt;u8,bitvec::order::Lsb0&gt;(ptr_const$&lt;bitvec::slice::BitSlice (2 samples, 1.09%)</title><rect x="75.0000%" y="261" width="1.0870%" height="15" fill="rgb(232,46,7)" fg:x="138" fg:w="2"/><text x="75.2500%" y="271.50"></text></g><g><title>simulate.exe`core::ptr::non_null::NonNull&lt;slice2$&lt;tuple$&lt;&gt; &gt; &gt;::new&lt;slice2$&lt;tuple$&lt;&gt; &gt; &gt;(ptr_mut$&lt;slice2$&lt;tuple$ (1 samples, 0.54%)</title><rect x="75.5435%" y="245" width="0.5435%" height="15" fill="rgb(229,129,53)" fg:x="139" fg:w="1"/><text x="75.7935%" y="255.50"></text></g><g><title>simulate.exe`core::ptr::mut_ptr::impl$0::is_null(ptr_mut$&lt;slice2$&lt;tuple$ (1 samples, 0.54%)</title><rect x="75.5435%" y="229" width="0.5435%" height="15" fill="rgb(234,188,29)" fg:x="139" fg:w="1"/><text x="75.7935%" y="239.50"></text></g><g><title>simulate.exe`bitvec::store::BitStore::get_bit&lt;u8,bitvec::order::Lsb0&gt;(unsigned char*, bitvec::index::BitIdx (1 samples, 0.54%)</title><rect x="77.1739%" y="229" width="0.5435%" height="15" fill="rgb(246,141,4)" fg:x="142" fg:w="1"/><text x="77.4239%" y="239.50"></text></g><g><title>simulate.exe`bitvec::index::BitIdx&lt;u8&gt;::select&lt;u8,bitvec::order::Lsb0&gt;(bitvec::index::BitIdx (1 samples, 0.54%)</title><rect x="77.1739%" y="213" width="0.5435%" height="15" fill="rgb(229,23,39)" fg:x="142" fg:w="1"/><text x="77.4239%" y="223.50"></text></g><g><title>simulate.exe`bitvec::order::impl$0::select&lt;u8&gt;(bitvec::index::BitIdx (1 samples, 0.54%)</title><rect x="77.1739%" y="197" width="0.5435%" height="15" fill="rgb(206,12,3)" fg:x="142" fg:w="1"/><text x="77.4239%" y="207.50"></text></g><g><title>simulate.exe`bitvec::index::BitIdx&lt;u8&gt;::into_inner&lt;u8&gt;(bitvec::index::BitIdx (1 samples, 0.54%)</title><rect x="77.1739%" y="181" width="0.5435%" height="15" fill="rgb(252,226,20)" fg:x="142" fg:w="1"/><text x="77.4239%" y="191.50"></text></g><g><title>simulate.exe`kemkem::kpke::key_gen&lt;kemkem::params::MlKem512&gt; (31 samples, 16.85%)</title><rect x="61.9565%" y="389" width="16.8478%" height="15" fill="rgb(216,123,35)" fg:x="114" fg:w="31"/><text x="62.2065%" y="399.50">simulate.exe`kemkem::kpke:..</text></g><g><title>simulate.exe`kemkem::sample::sample_poly_cbd&lt;3&gt; (14 samples, 7.61%)</title><rect x="71.1957%" y="373" width="7.6087%" height="15" fill="rgb(212,68,40)" fg:x="131" fg:w="14"/><text x="71.4457%" y="383.50">simulate.e..</text></g><g><title>simulate.exe`bitvec::slice::ops::impl$3::index&lt;u8,bitvec::order::Lsb0&gt;(ref$&lt;bitvec::slice::BitSlice (14 samples, 7.61%)</title><rect x="71.1957%" y="357" width="7.6087%" height="15" fill="rgb(254,125,32)" fg:x="131" fg:w="14"/><text x="71.4457%" y="367.50">simulate.e..</text></g><g><title>simulate.exe`bitvec::slice::api::impl$2::index&lt;u8,bitvec::order::Lsb0&gt;(unsigned long long, ref$&lt;bitvec::slice::BitSlice (14 samples, 7.61%)</title><rect x="71.1957%" y="341" width="7.6087%" height="15" fill="rgb(253,97,22)" fg:x="131" fg:w="14"/><text x="71.4457%" y="351.50">simulate.e..</text></g><g><title>simulate.exe`bitvec::slice::api::impl$2::get&lt;u8,bitvec::order::Lsb0&gt;(unsigned long long, ref$&lt;bitvec::slice::BitSlice (14 samples, 7.61%)</title><rect x="71.1957%" y="325" width="7.6087%" height="15" fill="rgb(241,101,14)" fg:x="131" fg:w="14"/><text x="71.4457%" y="335.50">simulate.e..</text></g><g><title>simulate.exe`bitvec::slice::api::impl$2::get_unchecked&lt;u8,bitvec::order::Lsb0&gt;(unsigned long long, ref$&lt;bitvec::slice::BitSlice (14 samples, 7.61%)</title><rect x="71.1957%" y="309" width="7.6087%" height="15" fill="rgb(238,103,29)" fg:x="131" fg:w="14"/><text x="71.4457%" y="319.50">simulate.e..</text></g><g><title>simulate.exe`enum2$&lt;core::option::Option&lt;bitvec::ptr::proxy::BitRef&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt; &gt; &gt;::unwrap(enum2$&lt;core::option::Option&lt;bitvec::ptr::proxy::BitRef (5 samples, 2.72%)</title><rect x="76.0870%" y="293" width="2.7174%" height="15" fill="rgb(233,195,47)" fg:x="140" fg:w="5"/><text x="76.3370%" y="303.50">si..</text></g><g><title>simulate.exe`bitvec::ptr::single::BitPtr&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt;::as_ref&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt;(bitvec::ptr::single::BitPtr (4 samples, 2.17%)</title><rect x="76.6304%" y="277" width="2.1739%" height="15" fill="rgb(246,218,30)" fg:x="141" fg:w="4"/><text x="76.8804%" y="287.50">s..</text></g><g><title>simulate.exe`bitvec::ptr::proxy::BitRef&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt;::from_bitptr&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt;(bitvec::ptr::single::BitPtr (3 samples, 1.63%)</title><rect x="77.1739%" y="261" width="1.6304%" height="15" fill="rgb(219,145,47)" fg:x="142" fg:w="3"/><text x="77.4239%" y="271.50"></text></g><g><title>simulate.exe`bitvec::ptr::single::BitPtr&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt;::read&lt;wyz::comu::Const,u8,bitvec::order::Lsb0&gt;(bitvec::ptr::single::BitPtr (3 samples, 1.63%)</title><rect x="77.1739%" y="245" width="1.6304%" height="15" fill="rgb(243,12,26)" fg:x="142" fg:w="3"/><text x="77.4239%" y="255.50"></text></g><g><title>simulate.exe`bitvec::store::impl$0::load_value (2 samples, 1.09%)</title><rect x="77.7174%" y="229" width="1.0870%" height="15" fill="rgb(214,87,16)" fg:x="143" fg:w="2"/><text x="77.9674%" y="239.50"></text></g><g><title>simulate.exe`bitvec::field::impl$0::store_le&lt;bitvec::access::BitSafeU8,u8&gt;(ref_mut$&lt;bitvec::slice::BitSlice (1 samples, 0.54%)</title><rect x="78.8043%" y="373" width="0.5435%" height="15" fill="rgb(208,99,42)" fg:x="145" fg:w="1"/><text x="79.0543%" y="383.50"></text></g><g><title>simulate.exe`bitvec::field::resize&lt;u8,u8&gt; (1 samples, 0.54%)</title><rect x="78.8043%" y="357" width="0.5435%" height="15" fill="rgb(253,99,2)" fg:x="145" fg:w="1"/><text x="79.0543%" y="367.50"></text></g><g><title>simulate.exe`bitvec::field::resize_inner&lt;u8,u8&gt; (1 samples, 0.54%)</title><rect x="78.8043%" y="341" width="0.5435%" height="15" fill="rgb(220,168,23)" fg:x="145" fg:w="1"/><text x="79.0543%" y="351.50"></text></g><g><title>simulate.exe`core::intrinsics::copy_nonoverlapping (1 samples, 0.54%)</title><rect x="78.8043%" y="325" width="0.5435%" height="15" fill="rgb(242,38,24)" fg:x="145" fg:w="1"/><text x="79.0543%" y="335.50"></text></g><g><title>simulate.exe`core::intrinsics::copy_nonoverlapping::precondition_check(tuple$&lt;&gt;*, tuple$ (1 samples, 0.54%)</title><rect x="78.8043%" y="309" width="0.5435%" height="15" fill="rgb(225,182,9)" fg:x="145" fg:w="1"/><text x="79.0543%" y="319.50"></text></g><g><title>simulate.exe`core::ub_checks::is_aligned_and_not_null(tuple$ (1 samples, 0.54%)</title><rect x="78.8043%" y="293" width="0.5435%" height="15" fill="rgb(243,178,37)" fg:x="145" fg:w="1"/><text x="79.0543%" y="303.50"></text></g><g><title>simulate.exe`core::ptr::const_ptr::impl$0::is_null(tuple$ (1 samples, 0.54%)</title><rect x="78.8043%" y="277" width="0.5435%" height="15" fill="rgb(232,139,19)" fg:x="145" fg:w="1"/><text x="79.0543%" y="287.50"></text></g><g><title>simulate.exe`core::ptr::const_ptr::impl$0::is_aligned_to::runtime_impl(tuple$ (1 samples, 0.54%)</title><rect x="78.8043%" y="261" width="0.5435%" height="15" fill="rgb(225,201,24)" fg:x="145" fg:w="1"/><text x="79.0543%" y="271.50"></text></g><g><title>simulate.exe`bitvec::field::impl$0::store_le&lt;bitvec::access::BitSafeU8,u16&gt;(ref_mut$&lt;bitvec::slice::BitSlice (1 samples, 0.54%)</title><rect x="79.3478%" y="357" width="0.5435%" height="15" fill="rgb(221,47,46)" fg:x="146" fg:w="1"/><text x="79.5978%" y="367.50"></text></g><g><title>simulate.exe`bitvec::slice::BitSlice&lt;bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt;::domain_mut&lt;bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt;(ref_mut$&lt;bitvec::slice::BitSlice (1 samples, 0.54%)</title><rect x="79.3478%" y="341" width="0.5435%" height="15" fill="rgb(249,23,13)" fg:x="146" fg:w="1"/><text x="79.5978%" y="351.50"></text></g><g><title>simulate.exe`enum2$&lt;bitvec::domain::Domain&lt;wyz::comu::Mut,bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt; &gt;::new&lt;wyz::comu::Mut,bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt;(ref_mut$&lt;bitvec::slice::BitSlice (1 samples, 0.54%)</title><rect x="79.3478%" y="325" width="0.5435%" height="15" fill="rgb(219,9,5)" fg:x="146" fg:w="1"/><text x="79.5978%" y="335.50"></text></g><g><title>simulate.exe`enum2$&lt;bitvec::domain::Domain&lt;wyz::comu::Mut,bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt; &gt;::partial_head&lt;wyz::comu::Mut,bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt;(wyz::comu::Address&lt;wyz::comu::Mut,bitvec::access::BitSafeU8&gt;, unsigned long long, bitvec::index::BitIdx&lt;u8&gt;, bitvec::index::BitEnd (1 samples, 0.54%)</title><rect x="79.3478%" y="309" width="0.5435%" height="15" fill="rgb(254,171,16)" fg:x="146" fg:w="1"/><text x="79.5978%" y="319.50"></text></g><g><title>simulate.exe`wyz::comu::Address&lt;wyz::comu::Mut,bitvec::access::BitSafeU8&gt;::cast&lt;wyz::comu::Mut,bitvec::access::BitSafeU8,u8&gt;(wyz::comu::Address (1 samples, 0.54%)</title><rect x="79.3478%" y="293" width="0.5435%" height="15" fill="rgb(230,171,20)" fg:x="146" fg:w="1"/><text x="79.5978%" y="303.50"></text></g><g><title>simulate.exe`wyz::comu::Address&lt;wyz::comu::Mut,bitvec::access::BitSafeU8&gt;::with_ptr&lt;wyz::comu::Mut,bitvec::access::BitSafeU8,u8,wyz::comu::impl$10::cast::closure_env$0&lt;wyz::comu::Mut,bitvec::access::BitSafeU8,u8&gt; &gt;(wyz::comu::Address&lt;wyz::comu::Mut,bitvec::access::BitSafeU8&gt;, wyz::comu::impl$10::cast::closure_env$0 (1 samples, 0.54%)</title><rect x="79.3478%" y="277" width="0.5435%" height="15" fill="rgb(210,71,41)" fg:x="146" fg:w="1"/><text x="79.5978%" y="287.50"></text></g><g><title>simulate.exe`tap::pipe::Pipe::pipe(core::ptr::non_null::NonNull&lt;u8&gt;, wyz::comu::Address&lt;wyz::comu::Mut,u8&gt; (*)(core::ptr::non_null::NonNull (1 samples, 0.54%)</title><rect x="79.3478%" y="261" width="0.5435%" height="15" fill="rgb(206,173,20)" fg:x="146" fg:w="1"/><text x="79.5978%" y="271.50"></text></g><g><title>simulate.exe`bitvec::ptr::span::BitSpan&lt;wyz::comu::Mut,bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt;::to_bitptr&lt;wyz::comu::Mut,bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt;(bitvec::ptr::span::BitSpan (1 samples, 0.54%)</title><rect x="79.8913%" y="261" width="0.5435%" height="15" fill="rgb(233,88,34)" fg:x="147" fg:w="1"/><text x="80.1413%" y="271.50"></text></g><g><title>simulate.exe`bitvec::ptr::single::BitPtr&lt;wyz::comu::Mut,bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt;::new_unchecked&lt;wyz::comu::Mut,bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt;(wyz::comu::Address&lt;wyz::comu::Mut,bitvec::access::BitSafeU8&gt;, bitvec::index::BitIdx (1 samples, 0.54%)</title><rect x="79.8913%" y="245" width="0.5435%" height="15" fill="rgb(223,209,46)" fg:x="147" fg:w="1"/><text x="80.1413%" y="255.50"></text></g><g><title>simulate.exe`enum2$&lt;core::result::Result&lt;bitvec::ptr::single::BitPtr&lt;wyz::comu::Mut,bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt;,bitvec::ptr::addr::MisalignError&lt;bitvec::access::BitSafeU8&gt; &gt; &gt;::unwrap(enum2$&lt;core::result::Result&lt;bitvec::ptr::single::BitPtr&lt;wyz::comu::Mut,bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt;,bitvec::ptr::addr::MisalignError (1 samples, 0.54%)</title><rect x="79.8913%" y="229" width="0.5435%" height="15" fill="rgb(250,43,18)" fg:x="147" fg:w="1"/><text x="80.1413%" y="239.50"></text></g><g><title>simulate.exe`bitvec::ptr::single::BitPtr&lt;wyz::comu::Mut,bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt;::new&lt;wyz::comu::Mut,bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt;(wyz::comu::Address&lt;wyz::comu::Mut,bitvec::access::BitSafeU8&gt;, bitvec::index::BitIdx (1 samples, 0.54%)</title><rect x="79.8913%" y="213" width="0.5435%" height="15" fill="rgb(208,13,10)" fg:x="147" fg:w="1"/><text x="80.1413%" y="223.50"></text></g><g><title>simulate.exe`bitvec::slice::BitSlice&lt;bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt;::split_at_unchecked_mut&lt;bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt;(ref_mut$&lt;bitvec::slice::BitSlice (2 samples, 1.09%)</title><rect x="79.8913%" y="293" width="1.0870%" height="15" fill="rgb(212,200,36)" fg:x="147" fg:w="2"/><text x="80.1413%" y="303.50"></text></g><g><title>simulate.exe`bitvec::slice::BitSlice&lt;bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt;::as_mut_bitptr&lt;bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt;(ref_mut$&lt;bitvec::slice::BitSlice (2 samples, 1.09%)</title><rect x="79.8913%" y="277" width="1.0870%" height="15" fill="rgb(225,90,30)" fg:x="147" fg:w="2"/><text x="80.1413%" y="287.50"></text></g><g><title>simulate.exe`bitvec::slice::BitSlice&lt;bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt;::as_mut_bitspan&lt;bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt;(ref_mut$&lt;bitvec::slice::BitSlice (1 samples, 0.54%)</title><rect x="80.4348%" y="261" width="0.5435%" height="15" fill="rgb(236,182,39)" fg:x="148" fg:w="1"/><text x="80.6848%" y="271.50"></text></g><g><title>simulate.exe`bitvec::ptr::span::BitSpan&lt;wyz::comu::Mut,bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt;::from_bitslice_ptr_mut&lt;wyz::comu::Mut,bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt;(ptr_mut$&lt;bitvec::slice::BitSlice (1 samples, 0.54%)</title><rect x="80.4348%" y="245" width="0.5435%" height="15" fill="rgb(212,144,35)" fg:x="148" fg:w="1"/><text x="80.6848%" y="255.50"></text></g><g><title>simulate.exe`bitvec::ptr::span::BitSpan&lt;wyz::comu::Const,bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt;::from_bitslice_ptr&lt;bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt;(ptr_const$&lt;bitvec::slice::BitSlice (1 samples, 0.54%)</title><rect x="80.4348%" y="229" width="0.5435%" height="15" fill="rgb(228,63,44)" fg:x="148" fg:w="1"/><text x="80.6848%" y="239.50"></text></g><g><title>simulate.exe`bitvec::ptr::span::BitSpan&lt;wyz::comu::Mut,bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt;::cast&lt;wyz::comu::Mut,bitvec::access::BitSafeU8,bitvec::order::Lsb0,bitvec::access::BitSafeU8&gt;(bitvec::ptr::span::BitSpan (1 samples, 0.54%)</title><rect x="80.9783%" y="277" width="0.5435%" height="15" fill="rgb(228,109,6)" fg:x="149" fg:w="1"/><text x="81.2283%" y="287.50"></text></g><g><title>simulate.exe`kemkem::mlkem::key_gen&lt;kemkem::params::MlKem512&gt; (44 samples, 23.91%)</title><rect x="58.1522%" y="405" width="23.9130%" height="15" fill="rgb(238,117,24)" fg:x="107" fg:w="44"/><text x="58.4022%" y="415.50">simulate.exe`kemkem::mlkem::key_gen&lt;ke..</text></g><g><title>simulate.exe`kemkem::serialize::impl$0::serialize&lt;2&gt;(tuple$&lt;kemkem::ring::Vector&lt;2&gt;,array$ (6 samples, 3.26%)</title><rect x="78.8043%" y="389" width="3.2609%" height="15" fill="rgb(242,26,26)" fg:x="145" fg:w="6"/><text x="79.0543%" y="399.50">sim..</text></g><g><title>simulate.exe`kemkem::serialize::byte_encode&lt;12&gt;(kemkem::ring::Ring*, ref_mut$&lt;bitvec::slice::BitSlice (5 samples, 2.72%)</title><rect x="79.3478%" y="373" width="2.7174%" height="15" fill="rgb(221,92,48)" fg:x="146" fg:w="5"/><text x="79.5978%" y="383.50">si..</text></g><g><title>simulate.exe`core::iter::adapters::zip::impl$1::next&lt;bitvec::slice::iter::ChunksMut&lt;bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt;,core::slice::iter::Iter&lt;u16&gt; &gt;(core::iter::adapters::zip::Zip&lt;bitvec::slice::iter::ChunksMut&lt;bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt;,core::slice::iter::Iter (4 samples, 2.17%)</title><rect x="79.8913%" y="357" width="2.1739%" height="15" fill="rgb(209,209,32)" fg:x="147" fg:w="4"/><text x="80.1413%" y="367.50">s..</text></g><g><title>simulate.exe`core::iter::adapters::zip::impl$3::next&lt;bitvec::slice::iter::ChunksMut&lt;bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt;,core::slice::iter::Iter&lt;u16&gt; &gt;(core::iter::adapters::zip::Zip&lt;bitvec::slice::iter::ChunksMut&lt;bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt;,core::slice::iter::Iter (4 samples, 2.17%)</title><rect x="79.8913%" y="341" width="2.1739%" height="15" fill="rgb(221,70,22)" fg:x="147" fg:w="4"/><text x="80.1413%" y="351.50">s..</text></g><g><title>simulate.exe`bitvec::slice::iter::impl$56::next&lt;bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt;(bitvec::slice::iter::ChunksMut (4 samples, 2.17%)</title><rect x="79.8913%" y="325" width="2.1739%" height="15" fill="rgb(248,145,5)" fg:x="147" fg:w="4"/><text x="80.1413%" y="335.50">s..</text></g><g><title>simulate.exe`bitvec::slice::BitSlice&lt;bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt;::split_at_unchecked_mut_noalias&lt;bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt;(ref_mut$&lt;bitvec::slice::BitSlice (4 samples, 2.17%)</title><rect x="79.8913%" y="309" width="2.1739%" height="15" fill="rgb(226,116,26)" fg:x="147" fg:w="4"/><text x="80.1413%" y="319.50">s..</text></g><g><title>simulate.exe`bitvec::slice::BitSlice&lt;bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt;::unalias_mut&lt;bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt;(ref_mut$&lt;bitvec::slice::BitSlice (2 samples, 1.09%)</title><rect x="80.9783%" y="293" width="1.0870%" height="15" fill="rgb(244,5,17)" fg:x="149" fg:w="2"/><text x="81.2283%" y="303.50"></text></g><g><title>simulate.exe`bitvec::slice::BitSlice&lt;bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt;::as_mut_bitspan&lt;bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt;(ref_mut$&lt;bitvec::slice::BitSlice (1 samples, 0.54%)</title><rect x="81.5217%" y="277" width="0.5435%" height="15" fill="rgb(252,159,33)" fg:x="150" fg:w="1"/><text x="81.7717%" y="287.50"></text></g><g><title>simulate.exe`bitvec::ptr::span::BitSpan&lt;wyz::comu::Mut,bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt;::from_bitslice_ptr_mut&lt;wyz::comu::Mut,bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt;(ptr_mut$&lt;bitvec::slice::BitSlice (1 samples, 0.54%)</title><rect x="81.5217%" y="261" width="0.5435%" height="15" fill="rgb(206,71,0)" fg:x="150" fg:w="1"/><text x="81.7717%" y="271.50"></text></g><g><title>simulate.exe`bitvec::ptr::span::BitSpan&lt;wyz::comu::Const,bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt;::from_bitslice_ptr&lt;bitvec::access::BitSafeU8,bitvec::order::Lsb0&gt;(ptr_const$&lt;bitvec::slice::BitSlice (1 samples, 0.54%)</title><rect x="81.5217%" y="245" width="0.5435%" height="15" fill="rgb(233,118,54)" fg:x="150" fg:w="1"/><text x="81.7717%" y="255.50"></text></g><g><title>simulate.exe`core::ptr::non_null::NonNull&lt;slice2$&lt;tuple$&lt;&gt; &gt; &gt;::new&lt;slice2$&lt;tuple$&lt;&gt; &gt; &gt;(ptr_mut$&lt;slice2$&lt;tuple$ (1 samples, 0.54%)</title><rect x="81.5217%" y="229" width="0.5435%" height="15" fill="rgb(234,83,48)" fg:x="150" fg:w="1"/><text x="81.7717%" y="239.50"></text></g><g><title>`0x7FFB120E26B1 (150 samples, 81.52%)</title><rect x="1.0870%" y="677" width="81.5217%" height="15" fill="rgb(228,3,54)" fg:x="2" fg:w="150"/><text x="1.3370%" y="687.50">`0x7FFB120E26B1</text></g><g><title>`0x7FFB11FA7344 (150 samples, 81.52%)</title><rect x="1.0870%" y="661" width="81.5217%" height="15" fill="rgb(226,155,13)" fg:x="2" fg:w="150"/><text x="1.3370%" y="671.50">`0x7FFB11FA7344</text></g><g><title>simulate.exe`__scrt_common_main_seh() (138 samples, 75.00%)</title><rect x="7.6087%" y="645" width="75.0000%" height="15" fill="rgb(241,28,37)" fg:x="14" fg:w="138"/><text x="7.8587%" y="655.50">simulate.exe`__scrt_common_main_seh()</text></g><g><title>simulate.exe`invoke_main() (131 samples, 71.20%)</title><rect x="11.4130%" y="629" width="71.1957%" height="15" fill="rgb(233,93,10)" fg:x="21" fg:w="131"/><text x="11.6630%" y="639.50">simulate.exe`invoke_main()</text></g><g><title>simulate.exe`main (131 samples, 71.20%)</title><rect x="11.4130%" y="613" width="71.1957%" height="15" fill="rgb(225,113,19)" fg:x="21" fg:w="131"/><text x="11.6630%" y="623.50">simulate.exe`main</text></g><g><title>simulate.exe`std::rt::lang_start&lt;tuple$&lt;&gt; &gt;(void (*) (131 samples, 71.20%)</title><rect x="11.4130%" y="597" width="71.1957%" height="15" fill="rgb(241,2,18)" fg:x="21" fg:w="131"/><text x="11.6630%" y="607.50">simulate.exe`std::rt::lang_start&lt;tuple$&lt;&gt; &gt;(void (*)</text></g><g><title>simulate.exe`std::rt::lang_start_internal (131 samples, 71.20%)</title><rect x="11.4130%" y="581" width="71.1957%" height="15" fill="rgb(228,207,21)" fg:x="21" fg:w="131"/><text x="11.6630%" y="591.50">simulate.exe`std::rt::lang_start_internal</text></g><g><title>simulate.exe`std::panic::catch_unwind (131 samples, 71.20%)</title><rect x="11.4130%" y="565" width="71.1957%" height="15" fill="rgb(213,211,35)" fg:x="21" fg:w="131"/><text x="11.6630%" y="575.50">simulate.exe`std::panic::catch_unwind</text></g><g><title>simulate.exe`std::panicking::try (131 samples, 71.20%)</title><rect x="11.4130%" y="549" width="71.1957%" height="15" fill="rgb(209,83,10)" fg:x="21" fg:w="131"/><text x="11.6630%" y="559.50">simulate.exe`std::panicking::try</text></g><g><title>simulate.exe`std::panicking::try::do_call (131 samples, 71.20%)</title><rect x="11.4130%" y="533" width="71.1957%" height="15" fill="rgb(209,164,1)" fg:x="21" fg:w="131"/><text x="11.6630%" y="543.50">simulate.exe`std::panicking::try::do_call</text></g><g><title>simulate.exe`std::rt::lang_start_internal::closure$2 (130 samples, 70.65%)</title><rect x="11.9565%" y="517" width="70.6522%" height="15" fill="rgb(213,184,43)" fg:x="22" fg:w="130"/><text x="12.2065%" y="527.50">simulate.exe`std::rt::lang_start_internal::closure$2</text></g><g><title>simulate.exe`std::panic::catch_unwind (130 samples, 70.65%)</title><rect x="11.9565%" y="501" width="70.6522%" height="15" fill="rgb(231,61,34)" fg:x="22" fg:w="130"/><text x="12.2065%" y="511.50">simulate.exe`std::panic::catch_unwind</text></g><g><title>simulate.exe`std::rt::lang_start::closure$0&lt;tuple$&lt;&gt; &gt;(std::rt::lang_start::closure_env$0&lt;tuple$ (130 samples, 70.65%)</title><rect x="11.9565%" y="485" width="70.6522%" height="15" fill="rgb(235,75,3)" fg:x="22" fg:w="130"/><text x="12.2065%" y="495.50">simulate.exe`std::rt::lang_start::closure$0&lt;tuple$&lt;&gt; &gt;(std::rt::lang_start::closure_env$0&lt;tuple$</text></g><g><title>simulate.exe`std::sys_common::backtrace::__rust_begin_short_backtrace&lt;void (*)(),tuple$&lt;&gt; &gt;(void (*) (130 samples, 70.65%)</title><rect x="11.9565%" y="469" width="70.6522%" height="15" fill="rgb(220,106,47)" fg:x="22" fg:w="130"/><text x="12.2065%" y="479.50">simulate.exe`std::sys_common::backtrace::__rust_begin_short_backtrace&lt;void (*)(),tuple$&lt;&gt; &gt;(void (*)</text></g><g><title>simulate.exe`core::ops::function::FnOnce::call_once&lt;void (*)(),tuple$&lt;&gt; &gt;(void (*) (130 samples, 70.65%)</title><rect x="11.9565%" y="453" width="70.6522%" height="15" fill="rgb(210,196,33)" fg:x="22" fg:w="130"/><text x="12.2065%" y="463.50">simulate.exe`core::ops::function::FnOnce::call_once&lt;void (*)(),tuple$&lt;&gt; &gt;(void (*)</text></g><g><title>simulate.exe`simulate::main (130 samples, 70.65%)</title><rect x="11.9565%" y="437" width="70.6522%" height="15" fill="rgb(229,154,42)" fg:x="22" fg:w="130"/><text x="12.2065%" y="447.50">simulate.exe`simulate::main</text></g><g><title>simulate.exe`simulate::simulate&lt;kemkem::params::MlKem512&gt; (129 samples, 70.11%)</title><rect x="12.5000%" y="421" width="70.1087%" height="15" fill="rgb(228,114,26)" fg:x="23" fg:w="129"/><text x="12.7500%" y="431.50">simulate.exe`simulate::simulate&lt;kemkem::params::MlKem512&gt;</text></g><g><title>simulate.exe`std::io::stdio::_print (1 samples, 0.54%)</title><rect x="82.0652%" y="405" width="0.5435%" height="15" fill="rgb(208,144,1)" fg:x="151" fg:w="1"/><text x="82.3152%" y="415.50"></text></g><g><title>simulate.exe`std::io::stdio::print_to (1 samples, 0.54%)</title><rect x="82.0652%" y="389" width="0.5435%" height="15" fill="rgb(239,112,37)" fg:x="151" fg:w="1"/><text x="82.3152%" y="399.50"></text></g><g><title>simulate.exe`std::io::stdio::impl$16::write_fmt (1 samples, 0.54%)</title><rect x="82.0652%" y="373" width="0.5435%" height="15" fill="rgb(210,96,50)" fg:x="151" fg:w="1"/><text x="82.3152%" y="383.50"></text></g><g><title>simulate.exe`std::io::Write::write_fmt (1 samples, 0.54%)</title><rect x="82.0652%" y="357" width="0.5435%" height="15" fill="rgb(222,178,2)" fg:x="151" fg:w="1"/><text x="82.3152%" y="367.50"></text></g><g><title>simulate.exe`core::fmt::write (1 samples, 0.54%)</title><rect x="82.0652%" y="341" width="0.5435%" height="15" fill="rgb(226,74,18)" fg:x="151" fg:w="1"/><text x="82.3152%" y="351.50"></text></g><g><title>simulate.exe`core::result::impl$26::branch (1 samples, 0.54%)</title><rect x="82.0652%" y="325" width="0.5435%" height="15" fill="rgb(225,67,54)" fg:x="151" fg:w="1"/><text x="82.3152%" y="335.50"></text></g><g><title>simulate.exe`std::io::Write::write_fmt::impl$0::write_str&lt;std::io::stdio::StdoutLock&gt; (1 samples, 0.54%)</title><rect x="82.0652%" y="309" width="0.5435%" height="15" fill="rgb(251,92,32)" fg:x="151" fg:w="1"/><text x="82.3152%" y="319.50"></text></g><g><title>simulate.exe`std::io::stdio::impl$19::write_all (1 samples, 0.54%)</title><rect x="82.0652%" y="293" width="0.5435%" height="15" fill="rgb(228,149,22)" fg:x="151" fg:w="1"/><text x="82.3152%" y="303.50"></text></g><g><title>simulate.exe`std::sync::reentrant_lock::impl$10::deref (1 samples, 0.54%)</title><rect x="82.0652%" y="277" width="0.5435%" height="15" fill="rgb(243,54,13)" fg:x="151" fg:w="1"/><text x="82.3152%" y="287.50"></text></g><g><title>simulate.exe`std::io::buffered::linewritershim::impl$1::write_all (1 samples, 0.54%)</title><rect x="82.0652%" y="261" width="0.5435%" height="15" fill="rgb(243,180,28)" fg:x="151" fg:w="1"/><text x="82.3152%" y="271.50"></text></g><g><title>simulate.exe`std::io::stdio::impl$1::write_all (1 samples, 0.54%)</title><rect x="82.0652%" y="245" width="0.5435%" height="15" fill="rgb(208,167,24)" fg:x="151" fg:w="1"/><text x="82.3152%" y="255.50"></text></g><g><title>simulate.exe`std::io::stdio::handle_ebadf (1 samples, 0.54%)</title><rect x="82.0652%" y="229" width="0.5435%" height="15" fill="rgb(245,73,45)" fg:x="151" fg:w="1"/><text x="82.3152%" y="239.50"></text></g><g><title>simulate.exe`std::io::Write::write_all&lt;std::sys::pal::windows::stdio::Stdout&gt; (1 samples, 0.54%)</title><rect x="82.0652%" y="213" width="0.5435%" height="15" fill="rgb(237,203,48)" fg:x="151" fg:w="1"/><text x="82.3152%" y="223.50"></text></g><g><title>simulate.exe`std::sys::pal::windows::stdio::write (1 samples, 0.54%)</title><rect x="82.0652%" y="197" width="0.5435%" height="15" fill="rgb(211,197,16)" fg:x="151" fg:w="1"/><text x="82.3152%" y="207.50"></text></g><g><title>simulate.exe`std::sys::pal::windows::stdio::is_console (1 samples, 0.54%)</title><rect x="82.0652%" y="181" width="0.5435%" height="15" fill="rgb(243,99,51)" fg:x="151" fg:w="1"/><text x="82.3152%" y="191.50"></text></g><g><title>`0x7FFB0FA916B0 (1 samples, 0.54%)</title><rect x="82.0652%" y="165" width="0.5435%" height="15" fill="rgb(215,123,29)" fg:x="151" fg:w="1"/><text x="82.3152%" y="175.50"></text></g><g><title>`0x7FFB1212D0C4 (1 samples, 0.54%)</title><rect x="82.0652%" y="149" width="0.5435%" height="15" fill="rgb(239,186,37)" fg:x="151" fg:w="1"/><text x="82.3152%" y="159.50"></text></g><g><title>`0x7FFB12104BE0 (1 samples, 0.54%)</title><rect x="82.6087%" y="677" width="0.5435%" height="15" fill="rgb(252,136,39)" fg:x="152" fg:w="1"/><text x="82.8587%" y="687.50"></text></g><g><title>`0x7FFB12162112 (1 samples, 0.54%)</title><rect x="83.1522%" y="629" width="0.5435%" height="15" fill="rgb(223,213,32)" fg:x="153" fg:w="1"/><text x="83.4022%" y="639.50"></text></g><g><title>`0x7FFB12160F36 (1 samples, 0.54%)</title><rect x="83.1522%" y="613" width="0.5435%" height="15" fill="rgb(233,115,5)" fg:x="153" fg:w="1"/><text x="83.4022%" y="623.50"></text></g><g><title>`0x7FFB12160E2D (1 samples, 0.54%)</title><rect x="83.1522%" y="597" width="0.5435%" height="15" fill="rgb(207,226,44)" fg:x="153" fg:w="1"/><text x="83.4022%" y="607.50"></text></g><g><title>`0x7FFB1212D224 (1 samples, 0.54%)</title><rect x="83.1522%" y="581" width="0.5435%" height="15" fill="rgb(208,126,0)" fg:x="153" fg:w="1"/><text x="83.4022%" y="591.50"></text></g><g><title>`0x7FFB1216264C (1 samples, 0.54%)</title><rect x="83.6957%" y="629" width="0.5435%" height="15" fill="rgb(244,66,21)" fg:x="154" fg:w="1"/><text x="83.9457%" y="639.50"></text></g><g><title>`0x7FFB121824D7 (1 samples, 0.54%)</title><rect x="83.6957%" y="613" width="0.5435%" height="15" fill="rgb(222,97,12)" fg:x="154" fg:w="1"/><text x="83.9457%" y="623.50"></text></g><g><title>`0x7FFB1209A07E (1 samples, 0.54%)</title><rect x="83.6957%" y="597" width="0.5435%" height="15" fill="rgb(219,213,19)" fg:x="154" fg:w="1"/><text x="83.9457%" y="607.50"></text></g><g><title>`0x7FFB1209A4EB (1 samples, 0.54%)</title><rect x="83.6957%" y="581" width="0.5435%" height="15" fill="rgb(252,169,30)" fg:x="154" fg:w="1"/><text x="83.9457%" y="591.50"></text></g><g><title>`0x7FFB12162808 (1 samples, 0.54%)</title><rect x="84.2391%" y="629" width="0.5435%" height="15" fill="rgb(206,32,51)" fg:x="155" fg:w="1"/><text x="84.4891%" y="639.50"></text></g><g><title>`0x7FFB120D2EA0 (1 samples, 0.54%)</title><rect x="84.2391%" y="613" width="0.5435%" height="15" fill="rgb(250,172,42)" fg:x="155" fg:w="1"/><text x="84.4891%" y="623.50"></text></g><g><title>`0x7FFB120D30E5 (1 samples, 0.54%)</title><rect x="84.2391%" y="597" width="0.5435%" height="15" fill="rgb(209,34,43)" fg:x="155" fg:w="1"/><text x="84.4891%" y="607.50"></text></g><g><title>`0x7FFB120D2F43 (1 samples, 0.54%)</title><rect x="84.2391%" y="581" width="0.5435%" height="15" fill="rgb(223,11,35)" fg:x="155" fg:w="1"/><text x="84.4891%" y="591.50"></text></g><g><title>`0x7FFB120D38C0 (1 samples, 0.54%)</title><rect x="84.2391%" y="565" width="0.5435%" height="15" fill="rgb(251,219,26)" fg:x="155" fg:w="1"/><text x="84.4891%" y="575.50"></text></g><g><title>`0x7FFB1210DA7E (1 samples, 0.54%)</title><rect x="84.2391%" y="549" width="0.5435%" height="15" fill="rgb(231,119,3)" fg:x="155" fg:w="1"/><text x="84.4891%" y="559.50"></text></g><g><title>`0x7FFB1209DFFA (1 samples, 0.54%)</title><rect x="84.2391%" y="533" width="0.5435%" height="15" fill="rgb(216,97,11)" fg:x="155" fg:w="1"/><text x="84.4891%" y="543.50"></text></g><g><title>`0x7FFB1212E914 (1 samples, 0.54%)</title><rect x="84.2391%" y="517" width="0.5435%" height="15" fill="rgb(223,59,9)" fg:x="155" fg:w="1"/><text x="84.4891%" y="527.50"></text></g><g><title>`0x7FFB1216285C (1 samples, 0.54%)</title><rect x="84.7826%" y="629" width="0.5435%" height="15" fill="rgb(233,93,31)" fg:x="156" fg:w="1"/><text x="85.0326%" y="639.50"></text></g><g><title>`0x7FFB120DDCE6 (1 samples, 0.54%)</title><rect x="84.7826%" y="613" width="0.5435%" height="15" fill="rgb(239,81,33)" fg:x="156" fg:w="1"/><text x="85.0326%" y="623.50"></text></g><g><title>`0x7FFB120DEADB (1 samples, 0.54%)</title><rect x="84.7826%" y="597" width="0.5435%" height="15" fill="rgb(213,120,34)" fg:x="156" fg:w="1"/><text x="85.0326%" y="607.50"></text></g><g><title>`0x7FFB121632DC (2 samples, 1.09%)</title><rect x="85.3261%" y="629" width="1.0870%" height="15" fill="rgb(243,49,53)" fg:x="157" fg:w="2"/><text x="85.5761%" y="639.50"></text></g><g><title>`0x7FFB120EE7D2 (2 samples, 1.09%)</title><rect x="85.3261%" y="613" width="1.0870%" height="15" fill="rgb(247,216,33)" fg:x="157" fg:w="2"/><text x="85.5761%" y="623.50"></text></g><g><title>`0x7FFB120EE8A8 (2 samples, 1.09%)</title><rect x="85.3261%" y="597" width="1.0870%" height="15" fill="rgb(226,26,14)" fg:x="157" fg:w="2"/><text x="85.5761%" y="607.50"></text></g><g><title>`0x7FFB1212D644 (2 samples, 1.09%)</title><rect x="85.3261%" y="581" width="1.0870%" height="15" fill="rgb(215,49,53)" fg:x="157" fg:w="2"/><text x="85.5761%" y="591.50"></text></g><g><title>`0x7FFB120A4AAA (1 samples, 0.54%)</title><rect x="86.4130%" y="533" width="0.5435%" height="15" fill="rgb(245,162,40)" fg:x="159" fg:w="1"/><text x="86.6630%" y="543.50"></text></g><g><title>`0x7FFB120A4D42 (1 samples, 0.54%)</title><rect x="86.4130%" y="517" width="0.5435%" height="15" fill="rgb(229,68,17)" fg:x="159" fg:w="1"/><text x="86.6630%" y="527.50"></text></g><g><title>`0x7FFB1212D4E4 (1 samples, 0.54%)</title><rect x="86.4130%" y="501" width="0.5435%" height="15" fill="rgb(213,182,10)" fg:x="159" fg:w="1"/><text x="86.6630%" y="511.50"></text></g><g><title>`0x7FFB120A7EC7 (1 samples, 0.54%)</title><rect x="86.9565%" y="501" width="0.5435%" height="15" fill="rgb(245,125,30)" fg:x="160" fg:w="1"/><text x="87.2065%" y="511.50"></text></g><g><title>`0x7FFB120AA7DD (1 samples, 0.54%)</title><rect x="86.9565%" y="485" width="0.5435%" height="15" fill="rgb(232,202,2)" fg:x="160" fg:w="1"/><text x="87.2065%" y="495.50"></text></g><g><title>`0x7FFB120AD781 (1 samples, 0.54%)</title><rect x="86.9565%" y="469" width="0.5435%" height="15" fill="rgb(237,140,51)" fg:x="160" fg:w="1"/><text x="87.2065%" y="479.50"></text></g><g><title>`0x7FFB120A7B29 (2 samples, 1.09%)</title><rect x="86.9565%" y="517" width="1.0870%" height="15" fill="rgb(236,157,25)" fg:x="160" fg:w="2"/><text x="87.2065%" y="527.50"></text></g><g><title>`0x7FFB120A88A8 (1 samples, 0.54%)</title><rect x="87.5000%" y="501" width="0.5435%" height="15" fill="rgb(219,209,0)" fg:x="161" fg:w="1"/><text x="87.7500%" y="511.50"></text></g><g><title>`0x7FFB120A4479 (1 samples, 0.54%)</title><rect x="87.5000%" y="485" width="0.5435%" height="15" fill="rgb(240,116,54)" fg:x="161" fg:w="1"/><text x="87.7500%" y="495.50"></text></g><g><title>`0x7FFB120A4AAA (1 samples, 0.54%)</title><rect x="87.5000%" y="469" width="0.5435%" height="15" fill="rgb(216,10,36)" fg:x="161" fg:w="1"/><text x="87.7500%" y="479.50"></text></g><g><title>`0x7FFB120A4D42 (1 samples, 0.54%)</title><rect x="87.5000%" y="453" width="0.5435%" height="15" fill="rgb(222,72,44)" fg:x="161" fg:w="1"/><text x="87.7500%" y="463.50"></text></g><g><title>`0x7FFB1212D4E4 (1 samples, 0.54%)</title><rect x="87.5000%" y="437" width="0.5435%" height="15" fill="rgb(232,159,9)" fg:x="161" fg:w="1"/><text x="87.7500%" y="447.50"></text></g><g><title>`0x7FFB120C263D (1 samples, 0.54%)</title><rect x="88.0435%" y="501" width="0.5435%" height="15" fill="rgb(210,39,32)" fg:x="162" fg:w="1"/><text x="88.2935%" y="511.50"></text></g><g><title>`0x7FFB120C26C3 (1 samples, 0.54%)</title><rect x="88.5870%" y="501" width="0.5435%" height="15" fill="rgb(216,194,45)" fg:x="163" fg:w="1"/><text x="88.8370%" y="511.50"></text></g><g><title>`0x7FFB120AFB31 (6 samples, 3.26%)</title><rect x="86.4130%" y="581" width="3.2609%" height="15" fill="rgb(218,18,35)" fg:x="159" fg:w="6"/><text x="86.6630%" y="591.50">`0x..</text></g><g><title>`0x7FFB120FB2BD (6 samples, 3.26%)</title><rect x="86.4130%" y="565" width="3.2609%" height="15" fill="rgb(207,83,51)" fg:x="159" fg:w="6"/><text x="86.6630%" y="575.50">`0x..</text></g><g><title>`0x7FFB120A4479 (6 samples, 3.26%)</title><rect x="86.4130%" y="549" width="3.2609%" height="15" fill="rgb(225,63,43)" fg:x="159" fg:w="6"/><text x="86.6630%" y="559.50">`0x..</text></g><g><title>`0x7FFB120A4C14 (5 samples, 2.72%)</title><rect x="86.9565%" y="533" width="2.7174%" height="15" fill="rgb(207,57,36)" fg:x="160" fg:w="5"/><text x="87.2065%" y="543.50">`0..</text></g><g><title>`0x7FFB120A7BC4 (3 samples, 1.63%)</title><rect x="88.0435%" y="517" width="1.6304%" height="15" fill="rgb(216,99,33)" fg:x="162" fg:w="3"/><text x="88.2935%" y="527.50"></text></g><g><title>`0x7FFB120C26C6 (1 samples, 0.54%)</title><rect x="89.1304%" y="501" width="0.5435%" height="15" fill="rgb(225,42,16)" fg:x="164" fg:w="1"/><text x="89.3804%" y="511.50"></text></g><g><title>`0x7FFB120FC295 (1 samples, 0.54%)</title><rect x="89.6739%" y="517" width="0.5435%" height="15" fill="rgb(220,201,45)" fg:x="165" fg:w="1"/><text x="89.9239%" y="527.50"></text></g><g><title>`0x7FFB120A9AC8 (1 samples, 0.54%)</title><rect x="89.6739%" y="501" width="0.5435%" height="15" fill="rgb(225,33,4)" fg:x="165" fg:w="1"/><text x="89.9239%" y="511.50"></text></g><g><title>`0x7FFB0FA8189D (1 samples, 0.54%)</title><rect x="90.2174%" y="485" width="0.5435%" height="15" fill="rgb(224,33,50)" fg:x="166" fg:w="1"/><text x="90.4674%" y="495.50"></text></g><g><title>`0x7FFB0FA81C17 (1 samples, 0.54%)</title><rect x="90.2174%" y="469" width="0.5435%" height="15" fill="rgb(246,198,51)" fg:x="166" fg:w="1"/><text x="90.4674%" y="479.50"></text></g><g><title>`0x7FFB0FA83466 (1 samples, 0.54%)</title><rect x="90.2174%" y="453" width="0.5435%" height="15" fill="rgb(205,22,4)" fg:x="166" fg:w="1"/><text x="90.4674%" y="463.50"></text></g><g><title>`0x7FFB12098EF2 (1 samples, 0.54%)</title><rect x="90.2174%" y="437" width="0.5435%" height="15" fill="rgb(206,3,8)" fg:x="166" fg:w="1"/><text x="90.4674%" y="447.50"></text></g><g><title>`0x7FFB1209935C (1 samples, 0.54%)</title><rect x="90.2174%" y="421" width="0.5435%" height="15" fill="rgb(251,23,15)" fg:x="166" fg:w="1"/><text x="90.4674%" y="431.50"></text></g><g><title>`0x7FFB1209ADBA (1 samples, 0.54%)</title><rect x="90.2174%" y="405" width="0.5435%" height="15" fill="rgb(252,88,28)" fg:x="166" fg:w="1"/><text x="90.4674%" y="415.50"></text></g><g><title>`0x7FFB12099FF8 (1 samples, 0.54%)</title><rect x="90.2174%" y="389" width="0.5435%" height="15" fill="rgb(212,127,14)" fg:x="166" fg:w="1"/><text x="90.4674%" y="399.50"></text></g><g><title>`0x7FFB1209A073 (1 samples, 0.54%)</title><rect x="90.2174%" y="373" width="0.5435%" height="15" fill="rgb(247,145,37)" fg:x="166" fg:w="1"/><text x="90.4674%" y="383.50"></text></g><g><title>`0x7FFB1209A4DC (1 samples, 0.54%)</title><rect x="90.2174%" y="357" width="0.5435%" height="15" fill="rgb(209,117,53)" fg:x="166" fg:w="1"/><text x="90.4674%" y="367.50"></text></g><g><title>`0x7FFB0FA818C7 (1 samples, 0.54%)</title><rect x="90.7609%" y="485" width="0.5435%" height="15" fill="rgb(212,90,42)" fg:x="167" fg:w="1"/><text x="91.0109%" y="495.50"></text></g><g><title>`0x7FFB0FACC337 (1 samples, 0.54%)</title><rect x="90.7609%" y="469" width="0.5435%" height="15" fill="rgb(218,164,37)" fg:x="167" fg:w="1"/><text x="91.0109%" y="479.50"></text></g><g><title>`0x7FFB0FACB82E (1 samples, 0.54%)</title><rect x="90.7609%" y="453" width="0.5435%" height="15" fill="rgb(246,65,34)" fg:x="167" fg:w="1"/><text x="91.0109%" y="463.50"></text></g><g><title>`0x7FFB0FAC9CEF (1 samples, 0.54%)</title><rect x="90.7609%" y="437" width="0.5435%" height="15" fill="rgb(231,100,33)" fg:x="167" fg:w="1"/><text x="91.0109%" y="447.50"></text></g><g><title>`0x7FFB0FAC988C (1 samples, 0.54%)</title><rect x="90.7609%" y="421" width="0.5435%" height="15" fill="rgb(228,126,14)" fg:x="167" fg:w="1"/><text x="91.0109%" y="431.50"></text></g><g><title>`0x7FFB0FA5C9E8 (1 samples, 0.54%)</title><rect x="90.7609%" y="405" width="0.5435%" height="15" fill="rgb(215,173,21)" fg:x="167" fg:w="1"/><text x="91.0109%" y="415.50"></text></g><g><title>`0x7FFB1212E654 (1 samples, 0.54%)</title><rect x="90.7609%" y="389" width="0.5435%" height="15" fill="rgb(210,6,40)" fg:x="167" fg:w="1"/><text x="91.0109%" y="399.50"></text></g><g><title>`0x7FFB1216375E (10 samples, 5.43%)</title><rect x="86.4130%" y="629" width="5.4348%" height="15" fill="rgb(212,48,18)" fg:x="159" fg:w="10"/><text x="86.6630%" y="639.50">`0x7FFB..</text></g><g><title>`0x7FFB120A6AF4 (10 samples, 5.43%)</title><rect x="86.4130%" y="613" width="5.4348%" height="15" fill="rgb(230,214,11)" fg:x="159" fg:w="10"/><text x="86.6630%" y="623.50">`0x7FFB..</text></g><g><title>`0x7FFB120A73E4 (10 samples, 5.43%)</title><rect x="86.4130%" y="597" width="5.4348%" height="15" fill="rgb(254,105,39)" fg:x="159" fg:w="10"/><text x="86.6630%" y="607.50">`0x7FFB..</text></g><g><title>`0x7FFB120AFBAE (4 samples, 2.17%)</title><rect x="89.6739%" y="581" width="2.1739%" height="15" fill="rgb(245,158,5)" fg:x="165" fg:w="4"/><text x="89.9239%" y="591.50">`..</text></g><g><title>`0x7FFB120CD947 (4 samples, 2.17%)</title><rect x="89.6739%" y="565" width="2.1739%" height="15" fill="rgb(249,208,11)" fg:x="165" fg:w="4"/><text x="89.9239%" y="575.50">`..</text></g><g><title>`0x7FFB120FC0E0 (4 samples, 2.17%)</title><rect x="89.6739%" y="549" width="2.1739%" height="15" fill="rgb(210,39,28)" fg:x="165" fg:w="4"/><text x="89.9239%" y="559.50">`..</text></g><g><title>`0x7FFB120FC05A (4 samples, 2.17%)</title><rect x="89.6739%" y="533" width="2.1739%" height="15" fill="rgb(211,56,53)" fg:x="165" fg:w="4"/><text x="89.9239%" y="543.50">`..</text></g><g><title>`0x7FFB120FC2C7 (3 samples, 1.63%)</title><rect x="90.2174%" y="517" width="1.6304%" height="15" fill="rgb(226,201,30)" fg:x="166" fg:w="3"/><text x="90.4674%" y="527.50"></text></g><g><title>`0x7FFB120A9A1D (3 samples, 1.63%)</title><rect x="90.2174%" y="501" width="1.6304%" height="15" fill="rgb(239,101,34)" fg:x="166" fg:w="3"/><text x="90.4674%" y="511.50"></text></g><g><title>`0x7FFB0FA818CE (1 samples, 0.54%)</title><rect x="91.3043%" y="485" width="0.5435%" height="15" fill="rgb(226,209,5)" fg:x="168" fg:w="1"/><text x="91.5543%" y="495.50"></text></g><g><title>`0x7FFB0FACD47B (1 samples, 0.54%)</title><rect x="91.3043%" y="469" width="0.5435%" height="15" fill="rgb(250,105,47)" fg:x="168" fg:w="1"/><text x="91.5543%" y="479.50"></text></g><g><title>`0x7FFB0FAE32A3 (1 samples, 0.54%)</title><rect x="91.3043%" y="453" width="0.5435%" height="15" fill="rgb(230,72,3)" fg:x="168" fg:w="1"/><text x="91.5543%" y="463.50"></text></g><g><title>`0x7FFB0FACECFC (1 samples, 0.54%)</title><rect x="91.3043%" y="437" width="0.5435%" height="15" fill="rgb(232,218,39)" fg:x="168" fg:w="1"/><text x="91.5543%" y="447.50"></text></g><g><title>`0x7FFB0FADABAE (1 samples, 0.54%)</title><rect x="91.3043%" y="421" width="0.5435%" height="15" fill="rgb(248,166,6)" fg:x="168" fg:w="1"/><text x="91.5543%" y="431.50"></text></g><g><title>`0x7FFB0FADADD4 (1 samples, 0.54%)</title><rect x="91.3043%" y="405" width="0.5435%" height="15" fill="rgb(247,89,20)" fg:x="168" fg:w="1"/><text x="91.5543%" y="415.50"></text></g><g><title>`0x7FFB0FA9F367 (1 samples, 0.54%)</title><rect x="91.3043%" y="389" width="0.5435%" height="15" fill="rgb(248,130,54)" fg:x="168" fg:w="1"/><text x="91.5543%" y="399.50"></text></g><g><title>`0x7FFB120E7EF6 (1 samples, 0.54%)</title><rect x="91.3043%" y="373" width="0.5435%" height="15" fill="rgb(234,196,4)" fg:x="168" fg:w="1"/><text x="91.5543%" y="383.50"></text></g><g><title>`0x7FFB1212D224 (1 samples, 0.54%)</title><rect x="91.3043%" y="357" width="0.5435%" height="15" fill="rgb(250,143,31)" fg:x="168" fg:w="1"/><text x="91.5543%" y="367.50"></text></g><g><title>`0x7FFB1216382D (1 samples, 0.54%)</title><rect x="91.8478%" y="629" width="0.5435%" height="15" fill="rgb(211,110,34)" fg:x="169" fg:w="1"/><text x="92.0978%" y="639.50"></text></g><g><title>`0x7FFB120A70A6 (1 samples, 0.54%)</title><rect x="91.8478%" y="613" width="0.5435%" height="15" fill="rgb(215,124,48)" fg:x="169" fg:w="1"/><text x="92.0978%" y="623.50"></text></g><g><title>`0x7FFB120A01FD (1 samples, 0.54%)</title><rect x="91.8478%" y="597" width="0.5435%" height="15" fill="rgb(216,46,13)" fg:x="169" fg:w="1"/><text x="92.0978%" y="607.50"></text></g><g><title>`0x7FFB120A0446 (1 samples, 0.54%)</title><rect x="91.8478%" y="581" width="0.5435%" height="15" fill="rgb(205,184,25)" fg:x="169" fg:w="1"/><text x="92.0978%" y="591.50"></text></g><g><title>`0x7FFB120C1D32 (1 samples, 0.54%)</title><rect x="91.8478%" y="565" width="0.5435%" height="15" fill="rgb(228,1,10)" fg:x="169" fg:w="1"/><text x="92.0978%" y="575.50"></text></g><g><title>`0x7FFB12163840 (1 samples, 0.54%)</title><rect x="92.3913%" y="629" width="0.5435%" height="15" fill="rgb(213,116,27)" fg:x="170" fg:w="1"/><text x="92.6413%" y="639.50"></text></g><g><title>`0x7FFB1210B42F (1 samples, 0.54%)</title><rect x="92.3913%" y="613" width="0.5435%" height="15" fill="rgb(241,95,50)" fg:x="170" fg:w="1"/><text x="92.6413%" y="623.50"></text></g><g><title>`0x7FFB1212D1C4 (1 samples, 0.54%)</title><rect x="92.3913%" y="597" width="0.5435%" height="15" fill="rgb(238,48,32)" fg:x="170" fg:w="1"/><text x="92.6413%" y="607.50"></text></g><g><title>`0x7FFB120A79D2 (1 samples, 0.54%)</title><rect x="92.9348%" y="613" width="0.5435%" height="15" fill="rgb(235,113,49)" fg:x="171" fg:w="1"/><text x="93.1848%" y="623.50"></text></g><g><title>`0x7FFB120A5096 (1 samples, 0.54%)</title><rect x="92.9348%" y="597" width="0.5435%" height="15" fill="rgb(205,127,43)" fg:x="171" fg:w="1"/><text x="93.1848%" y="607.50"></text></g><g><title>`0x7FFB120A4BCF (1 samples, 0.54%)</title><rect x="93.4783%" y="565" width="0.5435%" height="15" fill="rgb(250,162,2)" fg:x="172" fg:w="1"/><text x="93.7283%" y="575.50"></text></g><g><title>`0x7FFB1209FAD8 (1 samples, 0.54%)</title><rect x="93.4783%" y="549" width="0.5435%" height="15" fill="rgb(220,13,41)" fg:x="172" fg:w="1"/><text x="93.7283%" y="559.50"></text></g><g><title>`0x7FFB1209FE91 (1 samples, 0.54%)</title><rect x="93.4783%" y="533" width="0.5435%" height="15" fill="rgb(249,221,25)" fg:x="172" fg:w="1"/><text x="93.7283%" y="543.50"></text></g><g><title>`0x7FFB120A7ADD (1 samples, 0.54%)</title><rect x="94.0217%" y="549" width="0.5435%" height="15" fill="rgb(215,208,19)" fg:x="173" fg:w="1"/><text x="94.2717%" y="559.50"></text></g><g><title>`0x7FFB120A43EA (1 samples, 0.54%)</title><rect x="94.5652%" y="517" width="0.5435%" height="15" fill="rgb(236,175,2)" fg:x="174" fg:w="1"/><text x="94.8152%" y="527.50"></text></g><g><title>`0x7FFB120A5157 (1 samples, 0.54%)</title><rect x="94.5652%" y="501" width="0.5435%" height="15" fill="rgb(241,52,2)" fg:x="174" fg:w="1"/><text x="94.8152%" y="511.50"></text></g><g><title>`0x7FFB1212D6C4 (1 samples, 0.54%)</title><rect x="94.5652%" y="485" width="0.5435%" height="15" fill="rgb(248,140,14)" fg:x="174" fg:w="1"/><text x="94.8152%" y="495.50"></text></g><g><title>`0x7FFB120A4AAA (1 samples, 0.54%)</title><rect x="95.1087%" y="437" width="0.5435%" height="15" fill="rgb(253,22,42)" fg:x="175" fg:w="1"/><text x="95.3587%" y="447.50"></text></g><g><title>`0x7FFB120A4D42 (1 samples, 0.54%)</title><rect x="95.1087%" y="421" width="0.5435%" height="15" fill="rgb(234,61,47)" fg:x="175" fg:w="1"/><text x="95.3587%" y="431.50"></text></g><g><title>`0x7FFB1212D4E4 (1 samples, 0.54%)</title><rect x="95.1087%" y="405" width="0.5435%" height="15" fill="rgb(208,226,15)" fg:x="175" fg:w="1"/><text x="95.3587%" y="415.50"></text></g><g><title>`0x7FFB120A88A8 (3 samples, 1.63%)</title><rect x="94.5652%" y="533" width="1.6304%" height="15" fill="rgb(217,221,4)" fg:x="174" fg:w="3"/><text x="94.8152%" y="543.50"></text></g><g><title>`0x7FFB120A4479 (2 samples, 1.09%)</title><rect x="95.1087%" y="517" width="1.0870%" height="15" fill="rgb(212,174,34)" fg:x="175" fg:w="2"/><text x="95.3587%" y="527.50"></text></g><g><title>`0x7FFB120A4C14 (2 samples, 1.09%)</title><rect x="95.1087%" y="501" width="1.0870%" height="15" fill="rgb(253,83,4)" fg:x="175" fg:w="2"/><text x="95.3587%" y="511.50"></text></g><g><title>`0x7FFB120A7B29 (2 samples, 1.09%)</title><rect x="95.1087%" y="485" width="1.0870%" height="15" fill="rgb(250,195,49)" fg:x="175" fg:w="2"/><text x="95.3587%" y="495.50"></text></g><g><title>`0x7FFB120A88A8 (2 samples, 1.09%)</title><rect x="95.1087%" y="469" width="1.0870%" height="15" fill="rgb(241,192,25)" fg:x="175" fg:w="2"/><text x="95.3587%" y="479.50"></text></g><g><title>`0x7FFB120A4479 (2 samples, 1.09%)</title><rect x="95.1087%" y="453" width="1.0870%" height="15" fill="rgb(208,124,10)" fg:x="175" fg:w="2"/><text x="95.3587%" y="463.50"></text></g><g><title>`0x7FFB120A4C14 (1 samples, 0.54%)</title><rect x="95.6522%" y="437" width="0.5435%" height="15" fill="rgb(222,33,0)" fg:x="176" fg:w="1"/><text x="95.9022%" y="447.50"></text></g><g><title>`0x7FFB120A7A72 (1 samples, 0.54%)</title><rect x="95.6522%" y="421" width="0.5435%" height="15" fill="rgb(234,209,28)" fg:x="176" fg:w="1"/><text x="95.9022%" y="431.50"></text></g><g><title>`0x7FFB120BB44D (1 samples, 0.54%)</title><rect x="95.6522%" y="405" width="0.5435%" height="15" fill="rgb(224,11,23)" fg:x="176" fg:w="1"/><text x="95.9022%" y="415.50"></text></g><g><title>`0x7FFB120BD37A (1 samples, 0.54%)</title><rect x="95.6522%" y="389" width="0.5435%" height="15" fill="rgb(232,99,1)" fg:x="176" fg:w="1"/><text x="95.9022%" y="399.50"></text></g><g><title>`0x7FFB120D4D2F (1 samples, 0.54%)</title><rect x="95.6522%" y="373" width="0.5435%" height="15" fill="rgb(237,95,45)" fg:x="176" fg:w="1"/><text x="95.9022%" y="383.50"></text></g><g><title>`0x7FFB120D4B80 (1 samples, 0.54%)</title><rect x="95.6522%" y="357" width="0.5435%" height="15" fill="rgb(208,109,11)" fg:x="176" fg:w="1"/><text x="95.9022%" y="367.50"></text></g><g><title>`0x7FFB120D49A7 (1 samples, 0.54%)</title><rect x="95.6522%" y="341" width="0.5435%" height="15" fill="rgb(216,190,48)" fg:x="176" fg:w="1"/><text x="95.9022%" y="351.50"></text></g><g><title>`0x7FFB1209A03B (1 samples, 0.54%)</title><rect x="95.6522%" y="325" width="0.5435%" height="15" fill="rgb(251,171,36)" fg:x="176" fg:w="1"/><text x="95.9022%" y="335.50"></text></g><g><title>`0x7FFB1209A07E (1 samples, 0.54%)</title><rect x="95.6522%" y="309" width="0.5435%" height="15" fill="rgb(230,62,22)" fg:x="176" fg:w="1"/><text x="95.9022%" y="319.50"></text></g><g><title>`0x7FFB1209A4EB (1 samples, 0.54%)</title><rect x="95.6522%" y="293" width="0.5435%" height="15" fill="rgb(225,114,35)" fg:x="176" fg:w="1"/><text x="95.9022%" y="303.50"></text></g><g><title>`0x7FFB12163AFD (7 samples, 3.80%)</title><rect x="92.9348%" y="629" width="3.8043%" height="15" fill="rgb(215,118,42)" fg:x="171" fg:w="7"/><text x="93.1848%" y="639.50">`0x7..</text></g><g><title>`0x7FFB120A7B29 (6 samples, 3.26%)</title><rect x="93.4783%" y="613" width="3.2609%" height="15" fill="rgb(243,119,21)" fg:x="172" fg:w="6"/><text x="93.7283%" y="623.50">`0x..</text></g><g><title>`0x7FFB120A88A8 (6 samples, 3.26%)</title><rect x="93.4783%" y="597" width="3.2609%" height="15" fill="rgb(252,177,53)" fg:x="172" fg:w="6"/><text x="93.7283%" y="607.50">`0x..</text></g><g><title>`0x7FFB120A4479 (6 samples, 3.26%)</title><rect x="93.4783%" y="581" width="3.2609%" height="15" fill="rgb(237,209,29)" fg:x="172" fg:w="6"/><text x="93.7283%" y="591.50">`0x..</text></g><g><title>`0x7FFB120A4C14 (5 samples, 2.72%)</title><rect x="94.0217%" y="565" width="2.7174%" height="15" fill="rgb(212,65,23)" fg:x="173" fg:w="5"/><text x="94.2717%" y="575.50">`0..</text></g><g><title>`0x7FFB120A7B29 (4 samples, 2.17%)</title><rect x="94.5652%" y="549" width="2.1739%" height="15" fill="rgb(230,222,46)" fg:x="174" fg:w="4"/><text x="94.8152%" y="559.50">`..</text></g><g><title>`0x7FFB120A8BAF (1 samples, 0.54%)</title><rect x="96.1957%" y="533" width="0.5435%" height="15" fill="rgb(215,135,32)" fg:x="177" fg:w="1"/><text x="96.4457%" y="543.50"></text></g><g><title>`0x7FFB0FD39177 (1 samples, 0.54%)</title><rect x="96.7391%" y="549" width="0.5435%" height="15" fill="rgb(246,101,22)" fg:x="178" fg:w="1"/><text x="96.9891%" y="559.50"></text></g><g><title>`0x7FFB0FD34846 (1 samples, 0.54%)</title><rect x="96.7391%" y="533" width="0.5435%" height="15" fill="rgb(206,107,13)" fg:x="178" fg:w="1"/><text x="96.9891%" y="543.50"></text></g><g><title>`0x7FFB0FD34969 (1 samples, 0.54%)</title><rect x="96.7391%" y="517" width="0.5435%" height="15" fill="rgb(250,100,44)" fg:x="178" fg:w="1"/><text x="96.9891%" y="527.50"></text></g><g><title>`0x7FFB0FD34B23 (1 samples, 0.54%)</title><rect x="96.7391%" y="501" width="0.5435%" height="15" fill="rgb(231,147,38)" fg:x="178" fg:w="1"/><text x="96.9891%" y="511.50"></text></g><g><title>`0x7FFB0FD36FC6 (1 samples, 0.54%)</title><rect x="96.7391%" y="485" width="0.5435%" height="15" fill="rgb(229,8,40)" fg:x="178" fg:w="1"/><text x="96.9891%" y="495.50"></text></g><g><title>`0x7FFB0FD37232 (1 samples, 0.54%)</title><rect x="96.7391%" y="469" width="0.5435%" height="15" fill="rgb(221,135,30)" fg:x="178" fg:w="1"/><text x="96.9891%" y="479.50"></text></g><g><title>`0x7FFB1212D644 (1 samples, 0.54%)</title><rect x="96.7391%" y="453" width="0.5435%" height="15" fill="rgb(249,193,18)" fg:x="178" fg:w="1"/><text x="96.9891%" y="463.50"></text></g><g><title>`0x7FFB120FC05A (2 samples, 1.09%)</title><rect x="96.7391%" y="597" width="1.0870%" height="15" fill="rgb(209,133,39)" fg:x="178" fg:w="2"/><text x="96.9891%" y="607.50"></text></g><g><title>`0x7FFB120FC2C7 (2 samples, 1.09%)</title><rect x="96.7391%" y="581" width="1.0870%" height="15" fill="rgb(232,100,14)" fg:x="178" fg:w="2"/><text x="96.9891%" y="591.50"></text></g><g><title>`0x7FFB120A9A1D (2 samples, 1.09%)</title><rect x="96.7391%" y="565" width="1.0870%" height="15" fill="rgb(224,185,1)" fg:x="178" fg:w="2"/><text x="96.9891%" y="575.50"></text></g><g><title>`0x7FFB1197590E (1 samples, 0.54%)</title><rect x="97.2826%" y="549" width="0.5435%" height="15" fill="rgb(223,139,8)" fg:x="179" fg:w="1"/><text x="97.5326%" y="559.50"></text></g><g><title>`0x7FFB11975C8E (1 samples, 0.54%)</title><rect x="97.2826%" y="533" width="0.5435%" height="15" fill="rgb(232,213,38)" fg:x="179" fg:w="1"/><text x="97.5326%" y="543.50"></text></g><g><title>`0x7FFB11975CBB (1 samples, 0.54%)</title><rect x="97.2826%" y="517" width="0.5435%" height="15" fill="rgb(207,94,22)" fg:x="179" fg:w="1"/><text x="97.5326%" y="527.50"></text></g><g><title>`0x7FFB0FE26216 (1 samples, 0.54%)</title><rect x="97.8261%" y="533" width="0.5435%" height="15" fill="rgb(219,183,54)" fg:x="180" fg:w="1"/><text x="98.0761%" y="543.50"></text></g><g><title>`0x7FFB0FE27730 (1 samples, 0.54%)</title><rect x="97.8261%" y="517" width="0.5435%" height="15" fill="rgb(216,185,54)" fg:x="180" fg:w="1"/><text x="98.0761%" y="527.50"></text></g><g><title>`0x7FFB0FE1710E (1 samples, 0.54%)</title><rect x="97.8261%" y="501" width="0.5435%" height="15" fill="rgb(254,217,39)" fg:x="180" fg:w="1"/><text x="98.0761%" y="511.50"></text></g><g><title>`0x7FFB0FE17214 (1 samples, 0.54%)</title><rect x="97.8261%" y="485" width="0.5435%" height="15" fill="rgb(240,178,23)" fg:x="180" fg:w="1"/><text x="98.0761%" y="495.50"></text></g><g><title>`0x7FFB0FE176CC (1 samples, 0.54%)</title><rect x="97.8261%" y="469" width="0.5435%" height="15" fill="rgb(218,11,47)" fg:x="180" fg:w="1"/><text x="98.0761%" y="479.50"></text></g><g><title>`0x7FFB0FE17980 (1 samples, 0.54%)</title><rect x="97.8261%" y="453" width="0.5435%" height="15" fill="rgb(218,51,51)" fg:x="180" fg:w="1"/><text x="98.0761%" y="463.50"></text></g><g><title>`0x7FFB0FE17B11 (1 samples, 0.54%)</title><rect x="97.8261%" y="437" width="0.5435%" height="15" fill="rgb(238,126,27)" fg:x="180" fg:w="1"/><text x="98.0761%" y="447.50"></text></g><g><title>`0x7FFB0FE17F07 (1 samples, 0.54%)</title><rect x="97.8261%" y="421" width="0.5435%" height="15" fill="rgb(249,202,22)" fg:x="180" fg:w="1"/><text x="98.0761%" y="431.50"></text></g><g><title>`0x7FFB0FE18137 (1 samples, 0.54%)</title><rect x="97.8261%" y="405" width="0.5435%" height="15" fill="rgb(254,195,49)" fg:x="180" fg:w="1"/><text x="98.0761%" y="415.50"></text></g><g><title>`0x7FFB0FA4B9FA (1 samples, 0.54%)</title><rect x="97.8261%" y="389" width="0.5435%" height="15" fill="rgb(208,123,14)" fg:x="180" fg:w="1"/><text x="98.0761%" y="399.50"></text></g><g><title>`0x7FFB118078B0 (1 samples, 0.54%)</title><rect x="98.3696%" y="533" width="0.5435%" height="15" fill="rgb(224,200,8)" fg:x="181" fg:w="1"/><text x="98.6196%" y="543.50"></text></g><g><title>`0x7FFB1181A261 (1 samples, 0.54%)</title><rect x="98.3696%" y="517" width="0.5435%" height="15" fill="rgb(217,61,36)" fg:x="181" fg:w="1"/><text x="98.6196%" y="527.50"></text></g><g><title>`0x7FFB12104C43 (30 samples, 16.30%)</title><rect x="83.1522%" y="661" width="16.3043%" height="15" fill="rgb(206,35,45)" fg:x="153" fg:w="30"/><text x="83.4022%" y="671.50">`0x7FFB12104C43</text></g><g><title>`0x7FFB12104DBB (30 samples, 16.30%)</title><rect x="83.1522%" y="645" width="16.3043%" height="15" fill="rgb(217,65,33)" fg:x="153" fg:w="30"/><text x="83.4022%" y="655.50">`0x7FFB12104DBB</text></g><g><title>`0x7FFB12163C42 (5 samples, 2.72%)</title><rect x="96.7391%" y="629" width="2.7174%" height="15" fill="rgb(222,158,48)" fg:x="178" fg:w="5"/><text x="96.9891%" y="639.50">`0..</text></g><g><title>`0x7FFB120FC0E0 (5 samples, 2.72%)</title><rect x="96.7391%" y="613" width="2.7174%" height="15" fill="rgb(254,2,54)" fg:x="178" fg:w="5"/><text x="96.9891%" y="623.50">`0..</text></g><g><title>`0x7FFB120FC0E0 (3 samples, 1.63%)</title><rect x="97.8261%" y="597" width="1.6304%" height="15" fill="rgb(250,143,38)" fg:x="180" fg:w="3"/><text x="98.0761%" y="607.50"></text></g><g><title>`0x7FFB120FC05A (3 samples, 1.63%)</title><rect x="97.8261%" y="581" width="1.6304%" height="15" fill="rgb(248,25,0)" fg:x="180" fg:w="3"/><text x="98.0761%" y="591.50"></text></g><g><title>`0x7FFB120FC2C7 (3 samples, 1.63%)</title><rect x="97.8261%" y="565" width="1.6304%" height="15" fill="rgb(206,152,27)" fg:x="180" fg:w="3"/><text x="98.0761%" y="575.50"></text></g><g><title>`0x7FFB120A9A1D (3 samples, 1.63%)</title><rect x="97.8261%" y="549" width="1.6304%" height="15" fill="rgb(240,77,30)" fg:x="180" fg:w="3"/><text x="98.0761%" y="559.50"></text></g><g><title>`0x7FFB118078F4 (1 samples, 0.54%)</title><rect x="98.9130%" y="533" width="0.5435%" height="15" fill="rgb(231,5,3)" fg:x="182" fg:w="1"/><text x="99.1630%" y="543.50"></text></g><g><title>`0x7FFB1183C095 (1 samples, 0.54%)</title><rect x="98.9130%" y="517" width="0.5435%" height="15" fill="rgb(207,226,32)" fg:x="182" fg:w="1"/><text x="99.1630%" y="527.50"></text></g><g><title>`0x7FFB11819EBF (1 samples, 0.54%)</title><rect x="98.9130%" y="501" width="0.5435%" height="15" fill="rgb(222,207,47)" fg:x="182" fg:w="1"/><text x="99.1630%" y="511.50"></text></g><g><title>`0x7FFB1181A131 (1 samples, 0.54%)</title><rect x="98.9130%" y="485" width="0.5435%" height="15" fill="rgb(229,115,45)" fg:x="182" fg:w="1"/><text x="99.1630%" y="495.50"></text></g><g><title>`0x7FFB120BB44D (1 samples, 0.54%)</title><rect x="98.9130%" y="469" width="0.5435%" height="15" fill="rgb(224,191,6)" fg:x="182" fg:w="1"/><text x="99.1630%" y="479.50"></text></g><g><title>`0x7FFB120BDF6F (1 samples, 0.54%)</title><rect x="98.9130%" y="453" width="0.5435%" height="15" fill="rgb(230,227,24)" fg:x="182" fg:w="1"/><text x="99.1630%" y="463.50"></text></g><g><title>`0x7FFB12134192 (1 samples, 0.54%)</title><rect x="98.9130%" y="437" width="0.5435%" height="15" fill="rgb(228,80,19)" fg:x="182" fg:w="1"/><text x="99.1630%" y="447.50"></text></g><g><title>all (184 samples, 100%)</title><rect x="0.0000%" y="693" width="100.0000%" height="15" fill="rgb(247,229,0)" fg:x="0" fg:w="184"/><text x="0.2500%" y="703.50"></text></g><g><title>`0x7FFB12104BEE (31 samples, 16.85%)</title><rect x="83.1522%" y="677" width="16.8478%" height="15" fill="rgb(237,194,15)" fg:x="153" fg:w="31"/><text x="83.4022%" y="687.50">`0x7FFB12104BEE</text></g><g><title>`0x7FFB12104C54 (1 samples, 0.54%)</title><rect x="99.4565%" y="661" width="0.5435%" height="15" fill="rgb(219,203,20)" fg:x="183" fg:w="1"/><text x="99.7065%" y="671.50"></text></g><g><title>`0x7FFB12160391 (1 samples, 0.54%)</title><rect x="99.4565%" y="645" width="0.5435%" height="15" fill="rgb(234,128,8)" fg:x="183" fg:w="1"/><text x="99.7065%" y="655.50"></text></g><g><title>`0x7FFB120A0741 (1 samples, 0.54%)</title><rect x="99.4565%" y="629" width="0.5435%" height="15" fill="rgb(248,202,8)" fg:x="183" fg:w="1"/><text x="99.7065%" y="639.50"></text></g></svg></svg>